<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Shell函数返回值详解</title>
      <link href="/posts/20230809143243-c8a1efbf.html"/>
      <url>/posts/20230809143243-c8a1efbf.html</url>
      
        <content type="html"><![CDATA[<h1>Shell函数返回值详解</h1><p>shell脚本中，执行函数，</p><p>通常来说函数返回值有两类</p><h2 id="1-函数执行状态码">1. 函数执行状态码</h2><p>我更愿意称之为函数执行状态码</p><p>标识函数是否执行成功，返回值只能是整数 ，在0-255之间，0表示成功，其他值表示失败</p><blockquote><ul><li><p>函数内，显示使用return 语句，指定 函数返回值，（0-255）</p></li><li><p>不显示使用return 语句，会将最后一条命令运行结果状态作为返回值</p></li><li><p>获取该状态码，需要在函数执行后，<strong>立即</strong>从 $? 变量获取  ，因为该变量只显示最后命令的退出状态</p></li><li><table><thead><tr><th>$?</th><th>是显示最后命令的退出状态，0表示没有错误，其他表示有错误；</th></tr></thead></table></li></ul></blockquote><h3 id="举例">举例</h3><ol><li>return  整数 0-255，获取为正常状态码</li><li>return 字符串，报错，<a href="http://test.sh">test.sh</a>: line 11: return: xyz: numeric argument required</li><li>return 整数大于255，返回值 为 整数 取模256 ，如下例 64789 % 256 = 21</li><li>不显示使用return 语句，则函数内最后一条命令的执行结果，0为正常，其他错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo0</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 64789</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo2</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;xyz&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooa</span></span>() &#123;</span><br><span class="line">    <span class="built_in">ls</span> *.sh</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foob</span></span>() &#123;</span><br><span class="line">    <span class="built_in">ls</span> *.ksh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo0</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo0 return $?\n..&quot;</span></span><br><span class="line">foo1</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo1 return $?\n..&quot;</span></span><br><span class="line">foo2</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo2 return $?\n..&quot;</span></span><br><span class="line">fooa</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooa return $?\n..&quot;</span></span><br><span class="line">foob</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foob return $?\n..&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码执行结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foo0 <span class="built_in">return</span> 21</span><br><span class="line">..</span><br><span class="line">foo1 <span class="built_in">return</span> 1</span><br><span class="line">..</span><br><span class="line">test.sh: line 11: <span class="built_in">return</span>: xyz: numeric argument required</span><br><span class="line">foo2 <span class="built_in">return</span> 255</span><br><span class="line">..</span><br><span class="line">excutep.sh  test.sh</span><br><span class="line">fooa <span class="built_in">return</span> 0</span><br><span class="line">..</span><br><span class="line"><span class="built_in">ls</span>: cannot access *.ksh: No such file or directory</span><br><span class="line">foob <span class="built_in">return</span> 2</span><br><span class="line">..</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-用户自定义的函数执行返回结果">2. 用户自定义的函数执行返回结果</h2><p>也有两种方式</p><h3 id="1-函数内-给全局变量-赋值">1. 函数内 给全局变量 赋值</h3><blockquote><ol><li>函数外首先定义全局变量</li><li>函数内修改全局变量</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cc=<span class="string">&quot;aa&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooc</span></span>() &#123;</span><br><span class="line">    cc=<span class="string">&quot;bb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$cc</span>&quot;</span></span><br><span class="line">fooc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooc return $? \n  cc=<span class="variable">$cc</span>   \n..&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数执行结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">aa</span><br><span class="line">fooc return 0</span><br><span class="line">  cc=bb   </span><br><span class="line">..</span><br></pre></td></tr></table></figure><h3 id="2-执行函数的shell，继承函数内部的打印输出">2. 执行函数的shell，继承函数内部的打印输出</h3><blockquote><ol><li>函数内部 包括打印语句<br>比如 echo 语句，不止echo，还包括，head、cat等等</li><li>执行函数并赋值给一个变量 ，注意 dd=<code>food</code>，函数名使用`` 包裹表示执行函数<ul><li>而且通过下述例子可以看出，状态码是函数体内部返回的 状态码 5，也即该赋值操作，没改变变量$?</li></ul></li><li>函数内部有多处打印输出，则通过该种方法赋值时，赋值为一个字符串<br>==会把多行输出都合并到一个字符串中，并且以一个空格做分割==<br>( 这里一个测试时很奇怪的点<br>原因是，以<code>echo $dd</code> 打印，结果以空格分割<br>和以<code>echo &quot;$dd&quot;</code> 打印结果以换行分割<br>)</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;22 222&quot;</span></span><br><span class="line">    <span class="built_in">head</span> -1 test.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;33&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;directly print:&quot;</span>  `food`</span><br><span class="line"><span class="built_in">dd</span>=`food`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;food return $? &quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$dd</span> <span class="string">&quot;start:<span class="variable">$&#123;dd&#125;</span>end&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;****************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;if dd is string, print the length of dd: <span class="variable">$&#123;#dd&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;if dd is array,print the length of array: <span class="variable">$&#123;#dd[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">directly print: 11 22 222 #!/bin/bash 33</span><br><span class="line">food return 5 </span><br><span class="line">11 22 222 #!/bin/bash 33 start:11</span><br><span class="line">22 222</span><br><span class="line">#!/bin/bash</span><br><span class="line">33end</span><br><span class="line">****************</span><br><span class="line">if dd is string, print the length of dd: 24</span><br><span class="line">if dd is array,print the length of array: 1</span><br><span class="line"># 按数组来看，查询数组长度为1，所以函数返回值是一个字符串</span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ol><li>函数执行状态码，一般是用来判断 函数执行结果状态</li><li>第二种方式，获取函数返回值，如同一般编程中函数返回值使用</li></ol><h1>参考</h1><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell函数返回值,shell函数return </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReadyToRead</title>
      <link href="/posts/20230626153850-8f8e2f5b.html"/>
      <url>/posts/20230626153850-8f8e2f5b.html</url>
      
        <content type="html"><![CDATA[<h1>articles</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/79202151">BM25算法, Best Matching - 知乎专栏</a></li><li><a href="https://zhuanlan.zhihu.com/p/31009310">BM25F模型 - 知乎专栏</a></li><li><a href="https://lumingdong.cn/go/4q3yru">推荐系统算法调研. 蘑菇先生学习记</a><a href="https://lumingdong.cn/recommendation-algorithm-based-on-matrix-decomposition.html#ref-footnote-3">↩</a></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora代码块-添加折叠展开按钮</title>
      <link href="/posts/20230613222744-8b05256b.html"/>
      <url>/posts/20230613222744-8b05256b.html</url>
      
        <content type="html"><![CDATA[<p>Typora 是一款由 Abner Lee 开发的<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835?fromModule=lemma_inlink">轻量级</a> Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969?fromModule=lemma_inlink">源代码</a>和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p><p>一个遗憾是不支持，代码块的折叠，当代码块中代码行数过多，会显得臃肿</p><h1>代码块添加折叠按钮</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230613222824.png" alt="image-20230613220158516"></p><p>Typora实际就是一个浏览器</p><p>通过修改Typora安装目录如下 的  frame.js文件，来实现这个功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\NotesRead\Typora\resources\appsrc\window\frame.js</span><br></pre></td></tr></table></figure><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230613222824.png" alt="image-20230613215619674"></p><ul><li>在文件  frame.js的末尾添加如下代码</li></ul><h2 id="1-在单个代码块添加代码收缩按钮">1. 在单个代码块添加代码收缩按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加代码收缩功能</span></span><br><span class="line">content.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">codeDivs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">div, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (div.<span class="property">firstChild</span>.<span class="property">nodeName</span> != <span class="string">&quot;BUTTON&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">button.<span class="property">className</span> = <span class="string">&quot;contract-code-button&quot;</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">button.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (div.<span class="property">style</span>.<span class="property">height</span> != <span class="string">&quot;2.9em&quot;</span>) &#123;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码展开&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;2.9em&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">div.<span class="title function_">insertBefore</span>(button, div.<span class="property">firstChild</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-添加收缩文件全部代码块按钮">2.添加收缩文件全部代码块按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加收缩全部按钮</span></span><br><span class="line"><span class="keyword">var</span> isAdd = <span class="literal">false</span>;</span><br><span class="line">content.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isAdd) &#123;</span><br><span class="line"><span class="keyword">var</span> footer = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;footer&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部收缩按钮</span></span><br><span class="line"><span class="keyword">var</span> contractButton = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">contractButton.<span class="property">innerText</span> = <span class="string">&quot;全部收缩&quot;</span>;</span><br><span class="line">contractButton.<span class="property">name</span> = <span class="string">&quot;contarctAllButton&quot;</span>;</span><br><span class="line">contractButton.<span class="property">className</span> = <span class="string">&quot;contract-all-button&quot;</span>;</span><br><span class="line">contractButton.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;contract-code-button&quot;</span>);</span><br><span class="line">buttons.<span class="title function_">forEach</span>(<span class="function">(<span class="params">button, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> div = button.<span class="property">parentNode</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码展开&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;2.9em&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部展开按钮</span></span><br><span class="line"><span class="keyword">var</span> expandButton = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">expandButton.<span class="property">innerText</span> = <span class="string">&quot;全部展开&quot;</span>;</span><br><span class="line">expandButton.<span class="property">name</span> = <span class="string">&quot;expandAllButton&quot;</span>;</span><br><span class="line">expandButton.<span class="property">className</span> = <span class="string">&quot;expand-all-button&quot;</span>;</span><br><span class="line">expandButton.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;contract-code-button&quot;</span>);</span><br><span class="line">buttons.<span class="title function_">forEach</span>(<span class="function">(<span class="params">button, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> div = button.<span class="property">parentNode</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer.<span class="title function_">append</span>(contractButton);</span><br><span class="line">footer.<span class="title function_">append</span>(expandButton);</span><br><span class="line">isAdd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1>实现效果</h1><ol><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221127.png" alt="image-20230625221126253"><br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221323.png" alt="image-20230625221322980"></p></li><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221247.png" alt="image-20230625221247195"></p></li></ol><h1>参考</h1><ol><li><a href="https://baike.baidu.com/item/Typora/59397163?fr=aladdin">Typora</a></li><li><a href="https://www.baidu.com/link?url=vi5U5lv00bECq-fkX5mqrhd7uQJ53z1W6CKvh4ZGmMS&amp;wd=&amp;eqid=960a248d0007b0710000000364886a64">Typora官方中文站</a></li><li><a href="https://blog.csdn.net/qq_41259552/article/details/107892376">CSDN-jo尼jo斯达博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> PC软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown笔记 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统简述</title>
      <link href="/posts/20230310224218-66919c32.html"/>
      <url>/posts/20230310224218-66919c32.html</url>
      
        <content type="html"><![CDATA[<h1>推荐系统</h1><h2 id="什么是推荐">什么是推荐</h2><blockquote><ul><li>推荐是一种思维方式</li><li><ol><li>作为搜索的延申</li><li>作为广告的土壤</li><li>掌握信息传播主动权</li></ol></li><li>适用场景<ol><li>资源受限的信息过滤</li><li>导向性的信息展现</li><li>目的性的资源分配</li></ol></li><li></li></ul></blockquote><h2 id="解决问题">解决问题</h2><ol><li><p>信息过载</p></li><li><p>挖掘长尾</p><blockquote><ul><li><a href="https://baike.baidu.com/item/%E9%95%BF%E5%B0%BE/389156?fr=aladdin">长尾</a><br>是指那些原来不受到重视的销量小但种类多的产品或服务由于总量巨大，累积起来的总收益超过主流产品的现象。在互联网领域，长尾效应尤为显著。长尾术语也在统计学中被使用，通常应用在财产的分布和词汇。</li><li>帕雷托法则<br>向来被商业界视为铁律，其内涵认为企业界80%的业绩来自20%的产品</li></ul><p>数据、物品价值</p></blockquote></li><li><p>用户体验</p><blockquote><p>提升用户体验；帮助用户发现自己很难发现的兴趣点、商品……</p></blockquote></li></ol><h2 id="推荐系统的技术演进">推荐系统的技术演进</h2><blockquote><ol><li><p>早期论坛的打分系统；hacknews；reddit;</p></li><li><p>早期社交内容</p></li><li><p>早期电商内容</p></li><li><p>单一算法到多算法融合<br>基于内容的算法 ;( 文本相关性, 主题相关性)<br>基于行为的算法 ;( 协同过滤的变种，随机游走等其他行为类算法  )<br>结果融合；人工规则</p></li><li><p>引入机器学习模型</p><blockquote><p>启发式，无明确目标<br>相对静态，反应慢<br>考虑维度较少，个性化程度不足<br>纯手工，改进空间小</p></blockquote><blockquote><p>对齐明确目标，成熟的优化方法<br>时效性灵活，反映可快可慢特征维度丰富，个性化程度细腻<br>理论储备丰富，发展空间大</p></blockquote></li><li><p>深度学习</p><blockquote><ul><li>从浅层模型到深度模型</li><li><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309200210231" style="zoom:50%;" /></li></ul></blockquote></li></ol></blockquote><h2 id="推荐系统基本流程">推荐系统基本流程</h2><ol><li><h2 id="召回">召回</h2><blockquote><ul><li>协同过滤</li><li>内容相似召回</li><li>热门召回</li><li>……</li></ul></blockquote></li><li><h2 id="排序">排序</h2><blockquote><ul><li>机器学习</li><li>二分类算法</li><li>深度学习算法</li><li></li></ul></blockquote></li><li><h2 id="调整-重排">调整(重排)</h2><blockquote><ul><li>针对 具体场景</li></ul><hr><ul><li>去重</li><li>过滤，热门补充</li></ul></blockquote></li></ol><h3 id="召回-2">召回</h3><ul><li><p>一般召回路径</p><blockquote><ol><li>i2i</li><li>u2i</li><li>u2i2i</li><li>u2u2i</li><li>u2tag2i<br>泛化性好</li><li>u2***2i<br>基于图的算法</li></ol></blockquote></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230516165627.png" alt="image-20230516165625814"><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309155810040"></p><h3 id="排序-2">排序</h3><h3 id="调整">调整</h3><h2 id="通用推荐系统技术架构（数据流图）">通用推荐系统技术架构（数据流图）</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224422.png" alt="image-20230309161118965"></p><h1>推荐系统的方法</h1><h2 id="Content-Based-基于内容的推荐系统">Content-Based   ; 基于内容的推荐系统</h2><ul><li>最早被使用的推荐算法，效果良好</li><li>给用户推荐之前喜欢的物品，相似的物品</li><li>u2i2i<br>u2tag2i</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309165128805"></p><h3 id="重点：相似度计算">重点：相似度计算</h3><ol><li>余弦相似度</li><li></li></ol><h3 id="优缺点">优缺点</h3><ul><li><p>优点</p><blockquote><ol><li>不需要其他用户的数据</li><li>能给具备独特口味的用户推荐</li><li>可以推荐最新的、冷门的物品</li><li>容易做推荐结果的解释</li></ol></blockquote></li><li><p>缺点</p><blockquote><ol><li>很难找到能表达物品的“标签”，有时候需要人工打标签</li><li>过于局限于自己的世界，无法挖掘出用户的潜在兴趣</li><li>新用户如果没有行为，没法做推荐  (<em><strong>==冷启动问题==</strong></em>)</li></ol></blockquote></li></ul><h2 id="Collaborative-Filtering-协同过滤">Collaborative-Filtering  ; 协同过滤</h2><ul><li><p>大类，一般也分为两种</p><blockquote><ul><li><blockquote><ol><li>Memory-based CF ; 基于数据统计（记忆）的协同过滤</li><li>Model-based CF ; 基于模型（参数学习）的协同过滤</li></ol></blockquote></li><li><blockquote><ul><li>基于用户的协同过滤<br>u2u2i</li><li>基于物品的协同过滤<br>u2i2i</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309175315079"></p></blockquote></li></ul></blockquote></li></ul><h3 id="example">example</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224422.png" alt="image-20230309171614207"></p><hr><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309171709127"></p><h2 id="CF-Content-based-混合推荐系统">CF+Content-based ;  混合推荐系统</h2><h1>推荐系统一般问题</h1><h2 id="冷启动问题">冷启动问题</h2><h1>实战应用考虑方法</h1><h2 id="多路召回融合排序">多路召回融合排序</h2><blockquote><ul><li>一般会使 用多个召回策略，互相弥补不足，效果更好，三个臭皮匠顶个诸葛亮。</li><li>每个策略之间毫不相关，一般可以编写并发多线程同时执行</li><li>问题:怎样将多个召回列表融合成一个有序列表?</li></ul></blockquote><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309171938088"></p><blockquote><ul><li><blockquote><p>举例，几种召回策略返回的列表(Item-ID、权重)分别为:</p><p>召回策略x:A0.9，B0.8,C0.7<br>召回策略Y:B0.6，C0.5，D0.4<br>召回策略Z∶C0.3，D0.2，E0.1</p></blockquote></li><li><p>策略:效果依次变好，按照成本进行选择</p></li></ul><p>1、按顺序展示:比如实时&gt;购买数据召回&gt;播放数据召回，则直接展示A、B、C、D、E</p><p>2、平均法:分母为召回策略个数，分子为权重加和，C为(0.7+0.5+0.3)/3，B为(0.8+0.6)/3，</p><p>3、加权平均:比如三种策略自己指定权重为0…4、0.3、0.2，则B的权重为(0.4<em>0.8+0.6</em>0.3+O*0.2)/(0.4+0.3+0.2)</p><p>4、动态加权法:计算x/Y/z三种召回策略的CTR，作为每天更新的动态加权</p><p>5、机器学习权重法:逻辑回归LR分类模型预先离线算好各种召回的权重，然后做加权召回</p></blockquote><h2 id="推荐系统-AB-Test">推荐系统  AB Test</h2><ul><li><p>定义</p><blockquote><ol><li>AB测试是一种向产品的不同受众展示同一内容的2个或多个变体，并比较哪个变体带来了更多转化的做法。</li><li>AB测试是转化率优化过程的重要方法之一，使用它来收集定性和定量的用户见解，来了解潜在客户并根据该数据优化转化渠道。</li></ol></blockquote></li><li><p>必要性</p><blockquote><ol><li>想要数据驱动，重点是做AB对比实验，然后模型策略、设计等不断的迭代更新;</li><li>进行低风险的修改，先在小流量测试，如果没有问题再调大流量;</li><li>实现数据统计上的重大改进，降低人工猜测、直觉决策的不确定性;</li><li>怎样证明自己做的好?工程开发职位和算法职位的重大区分，后者更能用对比数据说话</li></ol></blockquote></li></ul><h3 id="AB-Test基本架构">AB Test基本架构</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309174152009"></p><h3 id="ab测试中常见问题">ab测试中常见问题</h3><blockquote><ol><li>不要同时运行太多测试:<br>要确定测试的优先级，一起测试太多的元素很难确定哪个元素对测试的成功或失败影响最大。</li><li>实验的流量大小:<br>流量样本的数量过小，实验结论不能使人信服</li><li>测试持续时间不能太短:<br>运行测试时间过短会导致测试失败或产生不重要的结果</li><li>无法遵循迭代过程:<br>A/B测试是一个迭代过程，每个测试都基于先前测试的结果，不管当前成功或失败，都不要停止继续AB测试</li></ol></blockquote><h1>案例</h1><h2 id="1-Netflix经典推荐系统架构">1. Netflix经典推荐系统架构</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309160440223"></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309160850977"></p><h1>智能推荐系统未来展望</h1><h2 id="CCF-C³活动第十八期：智能推荐与搜索，2023年3月30日周四（18-00-21-30），小红书北京举行">CCF C³活动第十八期：智能推荐与搜索，2023年3月30日周四（18:00-21:30），小红书北京举行</h2><h3 id="newbing-，AIGC-大模型的冲击">newbing  ，AIGC,  大模型的冲击</h3><ol><li>对于网站盈利，网站存活的影响</li><li>对于广告商认定广告有效程度的认定</li><li>智能推荐可能的更大的发展<ul><li>利用该大模型对于用户，心智捕捉更强的能力；能够真正做到智能推荐，给用户真正有用的推荐</li></ul></li><li>生成式的大模型，需要关注使用场景<ul><li>比如，风控领域，需要的是fact</li><li>适配大模型结合个人信息，个性化</li></ul></li><li>存疑，未来推荐、搜索的形态</li><li>过去的搜索推荐，都是基于用户点击行为驱动的算法分发模式，走向用户<br>行为加内容理解，双轮并驱的内容分发模式</li><li>搜推一体化</li></ol><h3 id="在智能信息检索方面，如何发现并去除用户反馈中的偏差">在智能信息检索方面，如何发现并去除用户反馈中的偏差</h3><ol><li><p>因果分析</p><blockquote><ul><li>假设；因果图</li></ul></blockquote><blockquote><p>总体是基于一种假设，没有对系统进行干预</p><p>搜推一体化不一定</p><p>但是搜索数据可以帮推荐，推荐的数据可以帮搜索</p><ul><li>是否可以进行干预，自然干预的方法<ul><li>不付出太多的代价，把搜索的query当成对推荐的一种干预</li><li>利用微观经济学中的一个概念，工具变量</li></ul></li><li>稍微引入外部的知识进行干预，</li><li>是否干预，都是为了实现无偏估计</li></ul></blockquote></li></ol><h3 id="基于人类反馈的强化学习，LHF，对推荐有哪些启发">基于人类反馈的强化学习，LHF，对推荐有哪些启发</h3><p>郝建业老师</p><p>传统强化学习的优化目标多是点击，时长</p><ul><li><p>openai,   训练的三步，强化学习的面临的挑战</p><blockquote><p>ss</p></blockquote></li><li><p>如何进行强化学习梯度的训练</p></li><li><p>ctr预估，早已经利用了强化学习的思想《</p><blockquote><p>当前推荐，有偏</p><p>强化学习 很难落地推荐</p><p>用户心智应该是一个序列决策问题</p><p>推荐领域的用户大模型，数据打通</p><p>数据质量</p></blockquote></li></ul><h3 id="用户隐私，AIGC，-计算所，敖翔老师">用户隐私，AIGC，--计算所，敖翔老师</h3><p>菁蓉领域反欺诈领域</p><p>对抗性，其内的机理和范式是存在的</p><h3 id="小红书，为什么脱颖而出-–-小红书技术负责人，夏侯">小红书，为什么脱颖而出 – 小红书技术负责人，夏侯</h3><ul><li><p>UGC社区而不是PGC社区</p></li><li><p>希望是一个去中心化的流量分发机制</p></li><li><p>交互和消费之间是怎样的trade-off，又是怎样建模</p></li><li><p>小红书内容的多样性</p></li><li><p>可行的流量货币化的机制</p></li></ul><p>关于搜索</p><ul><li>当前的搜索非常  中长尾，优化难度大</li><li>传统的搜索流量集中在头部</li><li>chatgpt，</li><li>搜索，推荐互相finetuning</li></ul><h3 id=""></h3><h3 id="已有研究，把各类推荐任务统一到语言生成任务框架中，下一代推荐系统是否会形成大一统">已有研究，把各类推荐任务统一到语言生成任务框架中，下一代推荐系统是否会形成大一统</h3><p>大模型+插件，会不会形成新的OS，以后的app都变成插件</p><ul><li><p>传统的搜索、推荐，是使用大量的用户数据，区训练模型，使得模型能够反映用户在使用这两种工具所自然的表现，喜好等等</p></li><li><p>而GPT的训练方式，还是使用了语言的特点</p></li><li><p>GPT  应用到搜索推荐的话，对应于搜索、推荐的行为做对齐</p><blockquote><p>不同推荐场景的关联性有多大</p></blockquote></li></ul><h3 id="大语言模型的开发和训练，需要极大的资源和算力">大语言模型的开发和训练，需要极大的资源和算力</h3><h1>参考资料</h1><ol><li><a href="https://www.bilibili.com/video/BV1Dz411B7wd?p=4&amp;spm_id_from=pageDriver&amp;vd_source=079f268ceb076dc167768a4865b01eaa">https://www.bilibili.com/video/BV1Dz411B7wd?p=4&amp;spm_id_from=pageDriver&amp;vd_source=079f268ceb076dc167768a4865b01eaa</a></li><li><a href="https://www.bilibili.com/video/BV1BL411m7A7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa">https://www.bilibili.com/video/BV1BL411m7A7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
