<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>推荐算法与推荐系统_学术界与工业界的理解</title>
      <link href="/posts/20250413162417-cad59384.html"/>
      <url>/posts/20250413162417-cad59384.html</url>
      
        <content type="html"><![CDATA[<ul><li>产学研结合，学术界和工业界，一直都是有关联的，</li><li>推荐，更是，</li></ul><h1 id="工业界和学术界的推荐">工业界和学术界的推荐</h1><p>工业界的推荐，现在是一个庞大的系统，</p><blockquote><p>做推荐系统的一般是互联网大厂，而互联网大厂能用又好用的特征太多了，不需要死磕图关系……</p><p>我倒是很想多了解，当可用特征太少、只剩下图值得深挖的场景里面用<a href="https://zhida.zhihu.com/search?content_id=700706607&amp;content_type=Answer&amp;match_order=1&amp;q=GNN&amp;zhida_source=entity">GNN</a>的成功例子，不过比较遗憾可能油水没有互联网推荐系统多，所以做的人也许很少</p></blockquote><p>这个问题问得非常专业，很适合在你论文中用来对比“理论与实践”的结合点。我来系统地整理一下：</p><hr><h2 id="工业界推荐系统的整体架构（自上而下）">工业界推荐系统的整体架构（自上而下）</h2><p>工业界的推荐系统一般是一个<strong>多层级、模块化、线上线下结合</strong>的大规模系统。整体从上到下可以划分为以下几个关键层次：</p><ol><li><strong>数据层</strong><ul><li>包含用户行为日志（点击、浏览、购买、停留时长等）、内容数据（文本、图片、音视频等）、用户画像、上下文信息等。</li><li>数据存储通常使用分布式数据库（如HDFS、Hive、Kafka）与数据湖架构，支撑离线训练与在线推理。</li></ul></li><li><strong>特征工程层</strong><ul><li>工业界非常重视高质量特征的设计与处理，包括稀疏特征编码、多种特征交叉、Embedding 构建、上下文特征提取等。</li><li>同时，工业界大量使用特征流水线系统（如Facebook 的 FBLearner，阿里巴巴的 X-Feature）来自动化处理和管理特征。</li></ul></li><li><strong>召回层（Recall）</strong><ul><li>从海量物品中快速筛选出一个初步候选集，常见的方法包括：协同过滤（UserCF、ItemCF）、基于Embedding 的向量检索（ANN）、基于标签或规则的过滤等。</li><li>该阶段追求的是<strong>高覆盖率与高效率</strong>，往往以近似检索或分布式稀疏模型为主。</li></ul></li><li><strong>粗排层（Rough Ranking）</strong><ul><li>对召回集进一步压缩排序，采用轻量级模型（如Wide &amp; Deep、FM、LR）进行快速预估。</li><li>粗排阶段主要目标是<strong>提升排序质量的同时保证计算效率</strong>。</li></ul></li><li><strong>精排层（Fine Ranking）</strong><ul><li>使用复杂的深度模型（如DIN、DIEN、Transformer-based 模型）精细建模用户意图与物品特征。</li><li>是工业推荐中性能提升的关键模块，但对延迟和资源要求较高。</li></ul></li><li><strong>重排与多目标融合（Re-Ranking / Post-Ranking）</strong><ul><li>在初步排序结果中综合考虑多种业务目标（点击率、转化率、多样性、长短期兴趣平衡、广告与自然内容混排等）进行最终调控。</li><li>常用技术包括强化学习、多目标优化、上下文规则融合等。</li></ul></li><li><strong>在线服务与反馈闭环</strong><ul><li>包括模型部署、实时推理、用户反馈收集、实时更新等，注重系统的<strong>稳定性、低延迟与自动化监控</strong>。</li><li>A/B测试与实验平台用于持续优化模型与策略。</li></ul></li></ol><hr><h2 id="学术界的研究重点">学术界的研究重点</h2><p>相较于工业界的系统完整性与工程优化，<strong>学术界的研究更专注于某一特定模块的建模创新与理论探索</strong>。研究热点主要集中在：</p><ol><li><strong>排序模型的创新</strong><ul><li>提出各种深度模型结构（如 RNN/LSTM/GRU、Transformer、GNN、多兴趣网络等），以更好地理解用户偏好与行为序列。</li><li>关注建模的表达能力、泛化能力、训练效率等。</li></ul></li><li><strong>序列建模与兴趣演化</strong><ul><li>如何捕捉用户兴趣的短期变化、长期偏好，研究行为序列中的时序信息、上下文相关性、兴趣迁移等问题。</li></ul></li><li><strong>冷启动与稀疏性问题</strong><ul><li>提出多模态推荐、迁移学习、元学习等方法应对用户或物品冷启动。</li></ul></li><li><strong>多目标推荐与公平性、可解释性等问题</strong><ul><li>探索如何兼顾精度、覆盖率、多样性、公平性等目标，提升推荐系统的可持续性与可信度。</li></ul></li><li><strong>离线评估指标与实验设计</strong><ul><li>提出更合理的评价指标（如NDCG、MRR、Hit@K等），分析训练-测试分布偏移、曝光偏差（exposure bias）等问题。</li></ul></li></ol><hr><h2 id="总结对比（简表）">总结对比（简表）</h2><table><thead><tr><th>层级/模块</th><th>工业界关注点</th><th>学术界研究点</th></tr></thead><tbody><tr><td>数据与特征</td><td>实时性、大规模特征系统</td><td>特征选择策略、多模态表示</td></tr><tr><td>召回层</td><td>高效检索、近似向量搜索</td><td>向量学习、对比学习、==图召回==方法</td></tr><tr><td>粗排/精排</td><td>多层架构、模型部署效率</td><td>模型结构创新（如Transformer等）</td></tr><tr><td>重排与融合</td><td>多目标业务优化</td><td>多目标学习、公平性/多样性研究</td></tr><tr><td>在线系统</td><td>工程系统稳定性、A/B测试</td><td>学术界一般不涉足</td></tr><tr><td>反馈与更新</td><td>闭环优化、在线学习</td><td>强化学习、因果推断等前沿方法</td></tr></tbody></table><hr><h2 id="学术界和工业界有着不同的侧重点和理解。">学术界和工业界有着不同的侧重点和理解。</h2><p>from  通义千问</p><p>推荐算法和推荐系统在学术界和工业界有着不同的侧重点和理解。</p><h3 id="学术界的理解">学术界的理解</h3><p>在学术界，推荐系统的研究主要集中在算法的创新和改进上。学者们致力于探索新的方法来提高推荐系统的准确性、多样性和新颖性。他们通常会关注以下几个方面：</p><ol><li><p><strong>算法的精确度</strong>：研究者们开发了各种类型的推荐算法，如协同过滤（基于用户或物品）、基于内容的推荐、混合推荐等，并不断优化这些算法以提高预测准确率。</p></li><li><p><strong>算法的可扩展性</strong>：随着数据量的增长，如何使推荐算法能够处理大规模的数据集成为了一个重要的研究方向。这包括分布式计算、增量学习等技术的应用。</p></li><li><p><strong>解决冷启动问题</strong>：对于新用户或新项目，由于缺乏足够的历史数据，推荐系统难以给出有效的推荐。学术界一直在寻找解决方案，例如利用社交网络信息或者外部知识库。</p></li><li><p><strong>多样性与新颖性</strong>：除了准确性之外，推荐结果的多样性和新颖性也是研究的重点，目的是避免“信息茧房”效应，即用户只接收到符合已有偏好的内容，而忽略了其他可能感兴趣的内容。</p></li><li><p><strong>理论分析与模型验证</strong>：学术界会对提出的算法进行严格的理论分析，并通过实验验证其有效性。常用评估指标包括均方根误差（RMSE）、平均绝对误差（MAE）等。</p></li></ol><h3 id="工业界的理解">工业界的理解</h3><p>在工业界，推荐系统更多地被视为一种产品功能或服务，其目标是提升用户体验、增加用户粘性和促进商业目标的实现。因此，工业界更注重以下几点：</p><ol><li><p><strong>用户体验与满意度</strong>：推荐系统不仅要准确，还需要提供流畅的用户体验，比如快速响应时间和个性化的界面设计。</p></li><li><p><strong>业务增长与转化率</strong>：工业界使用推荐系统的主要目的是推动销售、增加点击率、延长用户停留时间等商业指标。</p></li><li><p><strong>实时性与个性化</strong>：为了适应用户的即时需求，工业界的推荐系统往往需要具备高度的实时性和个性化能力，这就要求有强大的后台支持和高效的数据处理机制。</p></li><li><p><strong>成本效益与可维护性</strong>：在实际部署中，推荐系统的设计必须考虑成本效益比，确保系统既能在预算内运行又能方便维护。</p></li><li><p><strong>合规性与道德考量</strong>：随着对隐私保护的关注日益增加，工业界也更加重视推荐系统中的用户数据安全和个人隐私保护。</p></li></ol><p>综上所述，学术界倾向于理论上的深入探究和算法优化，而工业界则侧重于实践应用和商业价值的实现。不过，两者之间也有着紧密的联系，学术界的成果为工业界提供了技术支持，而工业界的挑战也为学术研究提供了新的课题。</p><h1 id="推荐系统的优化">推荐系统的优化</h1><blockquote><ul><li>为什么最近几年，没人在推荐系统里去玩 GNN 模型，GNN 是凉透了吗？ - 王喆的回答 - 知乎<br><a href="https://www.zhihu.com/question/3320585936/answer/36857602893">https://www.zhihu.com/question/3320585936/answer/36857602893</a></li></ul><p>我们做推荐系统的优化，一定要清楚每次优化的效果收益来源是什么。一般来说，收益总是来源于样本、特征和模型三个方向的一个或多个。但归根到底，可以再精炼成两个方面，收益要么来源于信息的增加（样本、特征），要么来源于信息利用能力的增强（模型）。</p><p>比如说，一个电影推荐系统，从来没有利用过电影中的演员信息，这时候把演员的信息加入到推荐系统中，很大概率能够带来效果的提升，因为这部分信息是新鲜的，系统从未学习过的知识，这就是增量信息带来的收益。</p><p>再比如说，我们的推荐模型本来是一个简单的MLP模型，把所有特征通过MLP进行交叉。但用户的行为是一个时间序列，是有前后关联性的，那么改成sequence model就能够更好的表达用户的行为及背后兴趣的变化，这部分的收益就是信息利用能力增强带来的。</p></blockquote><h1 id="end">end</h1>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习中模型训练过程中的一些理解</title>
      <link href="/posts/20250402105958-e7432c.html"/>
      <url>/posts/20250402105958-e7432c.html</url>
      
        <content type="html"><![CDATA[<h1 id="训练loss">训练loss</h1><h2 id="trainloss-在降低，但是-validscore-ndcg-10增长减慢，甚至下降">trainloss  在降低，但是 validscore  ndcg@10增长减慢，甚至下降</h2><p>另一组模型的trainloss更高，但是validscore  ndcg@10反而更大，</p><p>这种现象在训练深度学习模型时并不罕见，尤其是在推荐系统中。以下是一些可能的原因和解决方法：</p><h3 id="1-过拟合">1. <strong>过拟合</strong></h3><ul><li><strong>原因</strong>：训练损失降低但验证指标（如 NDCG@10）增长减慢或下降，通常是因为模型过拟合。模型在训练集上表现良好，但在验证集上表现不佳。</li><li><strong>解决方法</strong>：<ul><li><strong>正则化</strong>：增加 Dropout 层或 L2 正则化。</li><li><strong>数据增强</strong>：增加训练数据的多样性。</li><li><strong>早停</strong>：在验证损失不再下降时停止训练。</li><li><strong>简化模型</strong>：减少模型的复杂性，例如减少层数或神经元数量。</li></ul></li></ul><h3 id="2-验证集和训练集的分布不一致">2. <strong>验证集和训练集的分布不一致</strong></h3><ul><li><strong>原因</strong>：训练集和验证集的数据分布可能不一致，导致模型在验证集上的表现不佳。</li><li><strong>解决方法</strong>：<ul><li><strong>重新划分数据</strong>：确保训练集和验证集的数据分布一致。</li><li><strong>数据预处理</strong>：对训练集和验证集进行相同的预处理。</li></ul></li></ul><h3 id="3-学习率问题">3. <strong>学习率问题</strong></h3><ul><li><strong>原因</strong>：学习率过高可能导致模型在训练集上快速收敛，但在验证集上表现不佳。</li><li><strong>解决方法</strong>：<ul><li><strong>调整学习率</strong>：尝试使用更小的学习率。</li><li><strong>学习率调度器</strong>：使用学习率调度器（如学习率衰减）。</li></ul></li></ul><h3 id="4-模型结构问题">4. <strong>模型结构问题</strong></h3><ul><li><strong>原因</strong>：模型结构可能不适合当前任务，导致训练损失降低但验证指标不增长。</li><li><strong>解决方法</strong>：<ul><li><strong>尝试不同的模型结构</strong>：例如，使用更复杂的模型结构（如 Transformer）或更简单的模型结构（如线性模型）。</li><li><strong>调整模型的输出层</strong>：确保模型的输出层适合任务需求。</li></ul></li></ul><h3 id="5-评估指标的特性">5. <strong>评估指标的特性</strong></h3><ul><li><strong>原因</strong>：某些评估指标（如 NDCG@10）对模型的输出排序非常敏感，即使训练损失降低，但排序未显著改善，指标也可能不增长。</li><li><strong>解决方法</strong>：<ul><li><strong>检查模型的输出排序</strong>：确保模型能够生成正确的排序结果。</li><li><strong>调整损失函数</strong>：使用更适合评估指标的损失函数。</li></ul></li></ul><h3 id="6-随机性">6. <strong>随机性</strong></h3><ul><li><strong>原因</strong>：深度学习模型的训练过程存在随机性，可能导致某些情况下训练损失降低但验证指标不增长。</li><li><strong>解决方法</strong>：<ul><li><strong>多次运行模型训练</strong>：观察结果的稳定性。</li><li><strong>设置固定的随机种子</strong>：确保实验结果的可重复性。</li></ul></li></ul><h3 id="7-训练不足">7. <strong>训练不足</strong></h3><ul><li><strong>原因</strong>：即使训练损失在降低，但模型可能还没有充分学习到验证集上的模式。</li><li><strong>解决方法</strong>：<ul><li><strong>增加训练轮数</strong>：让模型有更多的时间学习。</li><li><strong>使用早停机制</strong>：在验证损失不再下降时停止训练。</li></ul></li></ul><h3 id="8-模型的泛化能力">8. <strong>模型的泛化能力</strong></h3><ul><li><strong>原因</strong>：训练损失低但验证指标不增长，可能是因为模型在训练集上表现良好，但在验证集上泛化能力不足。</li><li><strong>解决方法</strong>：<ul><li><strong>增加正则化</strong>：使用 Dropout、L2 正则化等技术。</li><li><strong>交叉验证</strong>：使用交叉验证来评估模型的泛化能力。</li></ul></li></ul><h3 id="总结">总结</h3><p>当遇到训练损失降低但验证指标不增长的情况时，可以尝试以下方法：</p><ul><li>检查是否过拟合，并采取相应的正则化措施。</li><li>确保训练集和验证集的数据分布一致。</li><li>调整学习率和模型结构。</li><li>使用早停机制和学习率调度器。</li><li>多次运行模型训练，观察结果的稳定性。</li></ul><p>通过这些方法，可以更好地诊断和解决模型训练过程中的问题，提升模型的验证性能。</p><h2 id="trainloss-还很高，但是validscore指标值已经变化很慢了，触发了早停机制，通常的原因是什么">trainloss 还很高，但是validscore指标值已经变化很慢了，触发了早停机制，通常的原因是什么</h2><p>在深度学习中，训练过程中出现训练损失（train loss）仍然很高，但验证指标（valid score）已经变化很慢并触发早停机制的情况，通常有以下几种原因：</p><h3 id="1-过拟合的早期迹象">1. <strong>过拟合的早期迹象</strong></h3><ul><li><strong>模型对训练集拟合不足</strong>：训练损失仍然很高，说明模型可能没有很好地学习到训练数据中的模式。然而，验证指标变化缓慢并触发早停，可能是因为模型已经开始对验证集的噪声或局部特征进行拟合，而没有进一步提升对验证集的整体泛化能力。</li><li><strong>验证集的代表性不足</strong>：如果验证集的分布与训练集差异较大，或者验证集的样本量过小，模型可能在验证集上表现稳定，但实际上并没有真正学习到泛化的特征。</li></ul><h3 id="2-模型容量与复杂度">2. <strong>模型容量与复杂度</strong></h3><ul><li><strong>模型容量不足</strong>：模型的复杂度可能不足以捕捉训练数据中的复杂关系，导致训练损失一直较高。同时，由于模型容量有限，它在验证集上的性能也难以进一步提升，从而触发早停。</li><li><strong>模型过于复杂</strong>：如果模型容量过大，可能会导致过拟合。即使训练损失很高，模型也可能在验证集上表现出一定的稳定性，但这种稳定性是虚假的，因为它没有真正提升泛化能力。</li></ul><h3 id="3-训练策略和超参数">3. <strong>训练策略和超参数</strong></h3><ul><li><strong>学习率问题</strong>：学习率过高可能导致模型在训练过程中无法收敛，训练损失居高不下。同时，模型可能在验证集上表现出一定的稳定性，但这种稳定性是由于模型无法进一步优化，而不是因为模型性能的真实提升。</li><li><strong>早停机制的参数设置不合理</strong>：早停机制中的耐心值（patience）和最小变化量（min_delta）设置不合理，可能导致模型过早停止训练。例如，耐心值设置得太小，或者最小变化量设置得太大，都可能导致早停机制在模型尚未充分优化时触发。</li></ul><h3 id="4-数据问题">4. <strong>数据问题</strong></h3><ul><li><strong>数据预处理不足</strong>：如果训练数据和验证数据没有经过充分的预处理（如归一化、标准化等），模型可能无法有效学习。这可能导致训练损失一直很高，而验证指标变化缓慢。</li><li><strong>数据泄露</strong>：如果验证数据在训练过程中被模型间接学习到（数据泄露），模型可能会在验证集上表现出虚假的稳定性。</li></ul><h3 id="解决建议">解决建议</h3><ul><li><strong>调整模型容量</strong>：尝试使用更复杂的模型（如增加层数或神经元数量），或者简化模型以更好地匹配数据的复杂性。</li><li><strong>优化训练策略</strong>：调整学习率，使用学习率调度器（如学习率衰减）。同时，检查早停机制的参数设置，适当增加耐心值或减小最小变化量。</li><li><strong>改进数据预处理</strong>：确保训练数据和验证数据经过一致的预处理。</li><li><strong>增加数据多样性</strong>：通过数据增强或引入更多的训练数据，帮助模型更好地学习数据中的模式。</li></ul><p>通过以上分析和调整，可以更好地理解模型在训练和验证过程中的行为，并优化模型的性能。</p><h2 id="融合两个embedding为什么，通过一个feedforward反而没有直接相加这两个embedding，得到的validscore高呢">融合两个embedding为什么，通过一个feedforward反而没有直接相加这两个embedding，得到的validscore高呢</h2><p>深度学习的神经网络，训练模型的时候，<br>现在双支路分别得到了一个embedding，如何进行融合呢，<br>通过交叉注意力之后，得到两组embedding，<br>专门合成一个，<br>在深度学习的神经网络中，对于双支路得到的 embedding 进行融合时，直接相加和通过 Feed-Forward 网络进行融合会有不同的效果，原因如下：</p><h3 id="直接相加">直接相加</h3><ul><li><strong>优点</strong>：简单高效，计算成本低。直接相加是一种线性融合方式，能够快速地将两个 embedding 合并在一起，保留了两个 embedding 的原始信息，且不会引入额外的参数。</li><li><strong>缺点</strong>：无法捕捉非线性关系。现实世界中的数据往往具有复杂的非线性关系，直接相加的方式无法有效地学习到这些非线性特征，从而限制了模型对数据的理解和表达能力。</li></ul><h3 id="通过-Feed-Forward-网络融合">通过 Feed-Forward 网络融合</h3><ul><li><strong>优点</strong>：<ul><li><strong>非线性变换</strong>：Feed-Forward 网络通常包含多个全连接层和激活函数，能够对输入的 embedding 进行复杂的非线性变换。这种非线性变换可以捕捉到两个 embedding 之间更复杂的交互关系，使模型能够更好地理解和处理输入数据，从而提高模型的性能。</li><li><strong>特征提取与转换</strong>：Feed-Forward 网络可以进一步提取和转换特征。在经过交叉注意力之后得到的两组 embedding 中，可能包含一些冗余信息或不重要的特征。Feed-Forward 网络可以通过其隐藏层的权重和激活函数，对这些特征进行筛选和转换，提取出更有用的信息，增强模型的特征表达能力。</li><li><strong>学习能力更强</strong>：Feed-Forward 网络具有更强的学习能力，可以通过训练自动学习到最佳的融合方式。在训练过程中，网络会根据损失函数的反馈，不断调整其权重和偏置，以找到最适合当前任务的融合策略，从而提高模型的准确性和泛化能力。</li></ul></li><li><strong>缺点</strong>：计算成本较高。相比直接相加，Feed-Forward 网络需要进行更多的矩阵运算和激活函数计算，增加了模型的计算复杂度和训练时间。</li></ul><h3 id="为什么直接相加得到的-validscore-更高">为什么直接相加得到的 validscore 更高</h3><ul><li><strong>数据特性</strong>：如果两个 embedding 之间的关系较为简单，直接相加可能已经足够捕捉到它们之间的主要信息。在这种情况下，Feed-Forward 网络引入的复杂非线性变换可能会导致过拟合，反而降低了模型的泛化能力。</li><li><strong>模型复杂度与过拟合</strong>：当模型的复杂度增加时，更容易出现过拟合现象。Feed-Forward 网络的复杂结构可能会使模型在训练集上表现很好，但在验证集上的表现却不如直接相加的方式。这是因为直接相加的方式相对简单，对噪声和异常值的鲁棒性更强，不容易受到过拟合的影响。</li><li><strong>训练不足或参数设置不合理</strong>：如果 Feed-Forward 网络的训练时间不足，或者其参数设置不合理，如学习率过高、隐藏层维度不合适等，可能会导致网络没有充分学习到有效的融合策略。在这种情况下，直接相加的方式可能会因为其简单性而表现出更好的性能。</li></ul><h2 id="是不是说验证集的分越高，模型学到的东西越多，泛化能力越好">是不是说验证集的分越高，模型学到的东西越多，泛化能力越好</h2><p>valid score  ndcg@10  这个指标值代表了什么，</p><h3 id="NDCG-10-指标解释">NDCG@10 指标解释</h3><p><strong>NDCG@10</strong>（Normalized Discounted Cumulative Gain at 10）是一种用于评估排序质量的指标，广泛应用于推荐系统和信息检索领域。它衡量的是模型生成的推荐列表与用户真实交互列表之间的相似度，特别关注前10个推荐项。</p><h4 id="NDCG-10-的计算方法"><strong>NDCG@10 的计算方法</strong></h4><ol><li><p><strong>DCG（Discounted Cumulative Gain）</strong>：</p><ul><li>DCG 考虑了推荐结果的排序顺序，对排名靠前的项目赋予更高的权重，对排名靠后的项目进行折损。公式如下：<br>[<br>DCG@k = \sum_{i=1}^{k} \frac{rel_i}{\log_2(i+1)}<br>]<br>其中，(rel_i) 是第 (i) 个推荐项的相关性得分。</li></ul></li><li><p><strong>IDCG（Ideal DCG）</strong>：</p><ul><li>IDCG 是理想情况下的 DCG，即假设推荐列表完全按照真实相关性排序时的 DCG 值。</li></ul></li><li><p><strong>NDCG</strong>：</p><ul><li>NDCG 是 DCG 与 IDCG 的比值，用于归一化 DCG，使其取值范围在 ([0, 1]) 之间。公式如下：<br>[<br>NDCG@k = \frac{DCG@k}{IDCG@k}<br>]<br>NDCG@10 的值越接近 1，表示推荐结果的排序质量越好。</li></ul></li></ol><h4 id="NDCG-10-的含义"><strong>NDCG@10 的含义</strong></h4><ul><li><strong>高 NDCG@10 值</strong>：表示模型生成的推荐列表与用户真实交互列表高度一致，推荐结果的排序质量高。</li><li><strong>低 NDCG@10 值</strong>：表示推荐列表与用户真实交互列表差异较大，推荐结果的排序质量低。</li></ul><h3 id="验证集分数与模型泛化能力">验证集分数与模型泛化能力</h3><p><strong>验证集分数（如 NDCG@10）与模型泛化能力的关系</strong>：</p><ul><li><strong>高验证集分数</strong>：通常意味着模型在验证集上的表现较好，能够较好地捕捉到数据中的模式和规律，从而具有较好的泛化能力。</li><li><strong>低验证集分数</strong>：可能意味着模型在验证集上的表现不佳，可能是因为过拟合、模型结构不适合任务、数据分布不一致等原因。</li></ul><p>然而，需要注意的是：</p><ul><li><strong>训练损失与验证分数的关系</strong>：训练损失降低但验证分数不增长，可能是因为模型过拟合训练数据，而无法在验证集上泛化。</li><li><strong>不同模型的比较</strong>：即使一个模型的训练损失更高，但如果其验证集分数（如 NDCG@10）更大，这可能意味着该模型在验证集上的泛化能力更强。</li></ul><h3 id="总结-2">总结</h3><ul><li><strong>NDCG@10</strong> 是一种衡量推荐列表排序质量的指标，值越高表示推荐结果的排序质量越好。</li><li><strong>验证集分数</strong> 可以反映模型的泛化能力，高验证集分数通常意味着模型具有较好的泛化能力。</li><li>在模型选择时，应综合考虑训练损失和验证分数，选择在验证集上表现较好的模型。</li></ul><h1 id="valid-score">valid score</h1><h2 id="valid-score是最高的，但是测试集的值却不高">valid-score是最高的，但是测试集的值却不高</h2><p>模型中有一个GNN模块，测试使用GAT还是GCN，<br>使用GCN模块时，早停时valid-score是最高的，但是测试集的值却不高<br>使用GAT模块，早停时valid-score比使用GCN要低，但是测试集的值却更高，<br>分析可能的原因<br>在使用 GCN 和 GAT 模块时出现的这种现象，可以从以下几个方面进行分析：</p><h3 id="1-验证集与测试集的分布差异">1. <strong>验证集与测试集的分布差异</strong></h3><ul><li>验证集的分布可能与测试集不完全一致。即使模型在验证集上表现良好，也可能无法很好地泛化到测试集。</li><li>验证集的规模可能较小，导致其对模型性能的评估不够全面。</li></ul><h3 id="2-早停机制的局限性">2. <strong>早停机制的局限性</strong></h3><ul><li>早停机制依赖于验证集的性能来决定是否停止训练。如果验证集的性能在某个局部最优值时停止，而此时模型尚未达到全局最优，可能会错过更好的模型。</li><li>早停机制的超参数（如耐心值 <code>patience</code> 和最小变化量 <code>min_delta</code>）设置不合理，可能导致模型过早停止训练。</li></ul><h3 id="3-模型的泛化能力不足">3. <strong>模型的泛化能力不足</strong></h3><ul><li>即使模型在验证集上表现良好，也可能是因为模型对验证集的特定特征过度拟合，而这些特征在测试集中并不存在。</li><li>模型可能在验证集上达到了一个性能瓶颈，而进一步训练可能会改善测试集的性能。</li></ul><h3 id="4-模型选择与保存的问题">4. <strong>模型选择与保存的问题</strong></h3><ul><li>在早停时保存的模型可能并不是在测试集上表现最好的模型。即使验证集的性能在某个点最高，但后续的训练可能仍然会改善测试集的性能。</li></ul><h3 id="解决建议-2">解决建议</h3><ol><li><p><strong>调整早停机制的超参数</strong>：</p><ul><li>增加 <code>patience</code> 的值，允许模型在验证集性能没有显著提升的情况下继续训练更长时间。</li><li>减小 <code>min_delta</code> 的值，以更敏感地捕捉验证集性能的变化。</li></ul></li><li><p><strong>使用更全面的验证集</strong>：</p><ul><li>确保验证集的分布与测试集尽可能一致，或者使用交叉验证来更全面地评估模型。</li></ul></li><li><p><strong>保存多个模型</strong>：</p><ul><li>在训练过程中保存多个性能较好的模型，而不仅仅是验证集性能最高的模型。这样可以在测试集上评估多个模型，选择表现最好的一个。</li></ul></li><li><p><strong>进一步分析模型性能</strong>：</p><ul><li>在早停后，继续训练模型并监控测试集的性能，以确认是否错过了更好的模型。</li></ul></li></ol><p>通过这些方法，可以更好地平衡验证集和测试集的性能，避免因早停机制导致的测试集性能不佳的问题。</p><p>涉及到可能因为GNN的原因</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 1. **模型特性差异**</span></span><br><span class="line">- **GCN（图卷积网络）**：</span><br><span class="line">  - GCN 是基于频域的图神经网络，通过邻接矩阵对节点之间的关系进行建模。它对图结构的利用较为均匀，适合处理节点间关系较为规则的图。在验证集上，GCN 的早停机制可能因为其稳定的性能而触发，但这种稳定性可能没有很好地泛化到测试集。</span><br><span class="line">  - GCN 的性能在某些数据集上可能不如 GAT，尤其是在节点间关系较为复杂时。</span><br><span class="line">- **GAT（图注意力网络）**：</span><br><span class="line">  - GAT 是基于空域的图神经网络，通过注意力机制为每个节点的邻居分配不同的权重。这种机制使得 GAT 能够更灵活地处理节点间复杂的交互关系，从而在测试集上表现出更好的性能。</span><br><span class="line">  - GAT 的注意力机制使其在某些任务上具有更强的表达能力，尤其是在处理节点间关系不均匀的图时。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 2. **早停机制的影响**</span></span><br><span class="line">- **早停机制的触发条件**：</span><br><span class="line">  - 早停机制通常是基于验证集的性能来决定是否停止训练。如果 GCN 在验证集上表现稳定且早停时的验证指标较高，但测试集性能不佳，可能是因为验证集的分布与测试集存在差异，导致模型在验证集上过拟合。</span><br><span class="line">  - GAT 的早停时验证指标虽然较低，但其在测试集上的性能更高，可能是因为 GAT 的注意力机制使其能够更好地捕捉测试集中的复杂关系。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 3. **数据集特性**</span></span><br><span class="line">- **数据集的复杂性**：</span><br><span class="line">  - 如果数据集的节点间关系较为复杂，GAT 的注意力机制能够更好地适应这种复杂性，从而在测试集上表现更好。</span><br><span class="line">  - 如果数据集的节点间关系较为规则，GCN 可能更适合，但在这种情况下，验证集和测试集的分布差异可能导致 GCN 在测试集上的性能不佳。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4. **模型优化与超参数**</span></span><br><span class="line">- **超参数设置**：</span><br><span class="line">  - 不同的模型可能需要不同的超参数设置。例如，GAT 的注意力头数量、隐藏层维度等参数的调整可能对性能有较大影响。</span><br><span class="line">  - GCN 的超参数设置可能更适合验证集，但不适合测试集。</span><br><span class="line">- **训练策略**：</span><br><span class="line">  - GAT 的训练可能需要更多的迭代次数来充分学习节点间的关系。早停机制可能在 GAT 还未充分优化时就触发，导致验证指标较低，但测试集性能较高。</span><br><span class="line"></span><br><span class="line"><span class="comment">### 总结</span></span><br><span class="line">- **选择模型的建议**：</span><br><span class="line">  - 如果数据集的节点间关系较为复杂，且测试集的性能更为重要，建议使用 GAT。</span><br><span class="line">  - 如果数据集的节点间关系较为规则，且验证集的性能更为重要，可以尝试使用 GCN。</span><br><span class="line">- **优化建议**：</span><br><span class="line">  - 调整早停机制的参数（如耐心值和最小变化量），以更好地适应 GAT 的训练过程。</span><br><span class="line">  - 仔细调整模型的超参数，以提高模型在测试集上的性能。</span><br><span class="line">  - 考虑使用数据增强或其他正则化技术，以提高模型的泛化能力。</span><br><span class="line"></span><br><span class="line">  在使用早停机制时，出现“早停时验证集的性能指标（valid-score）最高，但测试集的性能却不理想”的情况，可能有以下原因：</span><br></pre></td></tr></table></figure><h1 id="dropout">dropout</h1><h2 id="在训练神经网络模型时，有时候去除-embedding-的-Dropout-层反而使早停时的验证集性能（valid-score）更高，以及测试集表现更好，可能有以下原因：">在训练神经网络模型时，有时候去除 embedding 的 Dropout 层反而使早停时的验证集性能（valid-score）更高，以及测试集表现更好，可能有以下原因：</h2><h3 id="1-Dropout-的作用与限制">1. <strong>Dropout 的作用与限制</strong></h3><p>Dropout 是一种常用的正则化技术，通过在训练过程中随机丢弃一部分神经元的输出，来防止模型对训练数据的过度拟合。然而，Dropout 也可能带来一些负面影响：</p><ul><li><strong>信息丢失</strong>：Dropout 会随机丢弃一部分特征信息，可能导致模型在学习过程中丢失一些重要的特征，从而影响模型的表达能力和泛化能力。</li><li><strong>训练效率问题</strong>：在某些情况下，Dropout 可能会降低模型的训练效率，尤其是在训练数据有限或模型结构较复杂时。</li></ul><h3 id="2-模型性能提升的原因">2. <strong>模型性能提升的原因</strong></h3><ul><li><strong>更完整的特征学习</strong>：去除 Dropout 后，模型能够更完整地学习到输入数据的特征信息，尤其是在 embedding 层中。这使得模型在验证集和测试集上能够更好地捕捉数据的模式和规律，从而提升性能。</li><li><strong>模型复杂度与泛化能力的平衡</strong>：在某些情况下，Dropout 可能会过度限制模型的复杂度，导致模型无法充分学习数据中的复杂关系。去除 Dropout 后，模型的复杂度增加，可能会更好地适应数据的分布，从而提升泛化能力。</li></ul><h3 id="3-验证集与测试集的差异">3. <strong>验证集与测试集的差异</strong></h3><ul><li><strong>验证集的局限性</strong>：验证集可能无法完全代表测试集的分布。即使在验证集上使用 Dropout 能够获得较好的性能，但在测试集上可能并不适用。</li><li><strong>测试集的复杂性</strong>：测试集可能包含更多复杂的模式或噪声，去除 Dropout 后，模型能够更好地处理这些复杂性，从而提升测试集的性能。</li></ul><h3 id="4-早停机制的影响">4. <strong>早停机制的影响</strong></h3><ul><li><strong>早停的时机</strong>：早停机制依赖于验证集的性能来决定停止训练的时机。如果 Dropout 导致验证集性能提升较快，但模型尚未充分学习到测试集的特征，早停机制可能会过早地停止训练。</li><li><strong>模型的最终性能</strong>：去除 Dropout 后，模型在训练过程中能够更充分地学习到数据的特征，即使早停时的验证集性能稍低，也可能在测试集上表现出更好的性能。</li></ul><h3 id="建议">建议</h3><ul><li><strong>调整 Dropout 比例</strong>：如果需要使用 Dropout，可以尝试调整 Dropout 的比例，找到一个既能防止过拟合又能保留足够特征信息的平衡点。</li><li><strong>验证集与测试集的一致性</strong>：确保验证集的分布与测试集尽可能一致，以更好地反映模型在真实数据上的性能。</li><li><strong>进一步的正则化技术</strong>：除了 Dropout，还可以尝试其他正则化技术，如权重衰减（L2 正则化）、Batch Normalization 等，以提升模型的泛化能力。</li></ul><p>通过以上分析和调整，可以更好地理解 Dropout 在模型训练中的作用，并优化模型在验证集和测试集上的性能。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch学习笔记_3_pytorch中的一些概念</title>
      <link href="/posts/20250329113824-5d9a52b0.html"/>
      <url>/posts/20250329113824-5d9a52b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="PyTorch中的广播机制（Broadcasting）">PyTorch中的广播机制（Broadcasting）</h2><h3 id="1-广播机制原理">1. <strong>广播机制原理</strong></h3><p>广播（broadcasting）是指当进行张量（Tensor）运算时，如果两个张量的形状（shape）不同，PyTorch 会自动扩展它们，使它们具有相同的形状，从而能够进行逐元素运算（element-wise operation）。这一机制避免了显式复制数据，提高了计算效率，并节省了内存。</p><h3 id="2-广播的条件">2. <strong>广播的条件</strong></h3><ul><li>维度必须要么相等，要么其中一个维度为 1，要么该维度不存在（会被自动补 1）。</li><li>不能广播的情况：如果在某个维度上，两个张量的形状既不相等也不包含 1，则无法广播。</li></ul><h3 id="3-广播的规则">3. <strong>广播的规则</strong></h3><p>PyTorch 在进行广播时，会遵循以下规则来匹配张量的形状：</p><ol><li><p><strong>从后向前（右对齐）比较两个张量的形状</strong>：</p><ul><li>若两个张量的维度数不同，则在较小的张量前面补 1，使得两个张量具有相同的维度数。</li><li>从后向前比较两个张量的维度时 规则参照下一条2.</li></ul></li><li><p><strong>维度匹配规则</strong>：</p><ul><li>如果两个维度相等，则可以直接进行运算。</li><li>如果某个维度的值为 1，则 PyTorch 会在计算时自动扩展该维度，使其匹配另一个张量的维度大小。</li><li>如果两个维度不相等且都不为 1，则会报错，表示不能广播。</li></ul></li></ol><h3 id="4-示例">4. <strong>示例</strong></h3><h4 id="示例-1：可以广播的情况">示例 1：可以广播的情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建两个形状不同的张量</span></span><br><span class="line">A = torch.rand(<span class="number">3</span>, <span class="number">1</span>)   <span class="comment"># 形状 (3,1)</span></span><br><span class="line">B = torch.rand(<span class="number">1</span>, <span class="number">4</span>)   <span class="comment"># 形状 (1,4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行加法运算</span></span><br><span class="line">C = A + B  <span class="comment"># 广播后形状变为 (3,4)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C.shape)  <span class="comment"># 输出: torch.Size([3, 4])</span></span><br><span class="line"></span><br><span class="line">A = torch.rand(<span class="number">4</span>)   <span class="comment"># 形状 (3)</span></span><br><span class="line">B = torch.rand(<span class="number">2</span>, <span class="number">4</span>)   <span class="comment"># 形状 (1,4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行加法运算</span></span><br><span class="line">C = A + B  <span class="comment"># 广播后形状变为 (3,4)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C.shape)  <span class="comment"># 输出: torch.Size([3, 4])</span></span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>A</code> 的形状 <code>(3,1)</code> → 扩展为 <code>(3,4)</code></li><li><code>B</code> 的形状 <code>(1,4)</code> → 扩展为 <code>(3,4)</code></li><li>结果 <code>C</code> 的形状为 <code>(3,4)</code></li></ul><hr><ul><li><code>A</code> 的形状 <code>(4)</code> → 扩展为 <code>(2,4)</code></li><li><code>B</code> 的形状 <code>(2,4)</code> → 无须扩展</li><li>结果 <code>C</code> 的形状为 <code>(2,4)</code></li></ul><hr><h4 id="示例-2：不能广播的情况">示例 2：不能广播的情况</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A = torch.rand(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">B = torch.rand(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">C = A + B  <span class="comment"># 报错：RuntimeError: The size of tensor a (3) must match the size of tensor b (2) at non-singleton dimension 1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>A</code> 的形状是 <code>(2,3)</code></li><li><code>B</code> 的形状是 <code>(3,2)</code></li><li>在第二个维度上，<code>A</code> 为 <code>3</code>，<code>B</code> 为 <code>2</code>，不满足广播规则，运算失败。</li></ul><hr><h3 id="5-广播的应用">5. <strong>广播的应用</strong></h3><p>广播机制在深度学习和科学计算中非常重要，主要用于：</p><ul><li><strong>不同形状张量的运算</strong>：在不显式复制数据的情况下进行高效计算。</li><li><strong>批量计算</strong>：对不同尺寸的数据进行同一操作，常用于计算损失、归一化、特征缩放等。</li><li><strong>神经网络中的参数运算</strong>：如批量归一化（Batch Normalization）中，每个通道的均值和方差都是标量，但会广播到整个批次的数据。</li></ul><h4 id="实际应用示例"><strong>实际应用示例</strong></h4><h5 id="示例-1：归一化"><strong>示例 1：归一化</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">X = torch.rand(<span class="number">5</span>, <span class="number">3</span>)  <span class="comment"># 5个样本，每个样本有3个特征</span></span><br><span class="line">mean = X.mean(dim=<span class="number">0</span>)  <span class="comment"># 计算每个特征的均值，形状为 (3,)</span></span><br><span class="line">std = X.std(dim=<span class="number">0</span>)    <span class="comment"># 计算每个特征的标准差，形状为 (3,)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归一化</span></span><br><span class="line">X_norm = (X - mean) / std  <span class="comment"># 通过广播，mean 和 std 自动扩展为 (5,3)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(X_norm.shape)  <span class="comment"># 输出: torch.Size([5, 3])</span></span><br></pre></td></tr></table></figure><h5 id="示例-2：计算加权和"><strong>示例 2：计算加权和</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X = torch.rand(<span class="number">4</span>, <span class="number">3</span>)   <span class="comment"># 4个样本，每个样本有3个特征</span></span><br><span class="line">weights = torch.tensor([<span class="number">0.2</span>, <span class="number">0.3</span>, <span class="number">0.5</span>])  <span class="comment"># 每个特征的权重，形状 (3,)</span></span><br><span class="line"></span><br><span class="line">weighted_sum = X * weights  <span class="comment"># 广播到 (4,3)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(weighted_sum.shape)  <span class="comment"># 输出: torch.Size([4, 3])</span></span><br></pre></td></tr></table></figure><hr><h3 id="6-总结">6. <strong>总结</strong></h3><ul><li><strong>广播机制使不同形状的张量可以进行运算</strong>，避免显式复制数据，提高计算效率。</li><li><strong>广播规则</strong>：从右向左匹配维度，维度相等或为 1 时可广播，否则会报错。</li><li><strong>应用场景</strong>：用于特征归一化、加权计算、神经网络参数运算等。</li></ul><p>广播机制在 PyTorch 中极大提升了代码的简洁性和运行效率，是高效张量计算的核心功能之一。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python,pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习中的embedding范式</title>
      <link href="/posts/20241124110839-eb76e80b.html"/>
      <url>/posts/20241124110839-eb76e80b.html</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习中的embedding范式">深度学习中的embedding范式</h1><h2 id="1-什么是embedding">1. 什么是embedding</h2><p>在深度学习中，embedding是指将高维度的离散特征映射到低维度的连续空间中，以便模型能够更好地学习特征之间的关系。embedding的目的是将离散特征转换为连续特征，使得模型能够更好地学习特征之间的相似性和关联性，从而提高模型的泛化能力和性能。</p><p>Embedding 是深度学习中一种重要的表示学习技术，旨在将高维或离散数据映射到连续、低维的实数向量空间。这种低维表示保留了数据的语义信息，并能够使离散的类别数据适合于深度学习模型处理。</p><hr><h3 id="Embedding-的原理"><strong>Embedding 的原理</strong></h3><ol><li><p><strong>定义</strong><br>Embedding 可以理解为一种编码方式，将离散的输入（如单词、类别或图像特征）转化为实数向量。这些向量位于一个连续空间中，其中距离关系通常反映输入数据之间的语义相似性。</p></li><li><p><strong>实现机制</strong><br>Embedding 的核心是通过一个嵌入矩阵 ( W \in \mathbb{R}^{|V| \times d} ) 实现：</p><ul><li>( |V| )：输入数据的类别数量（如词汇表大小）。</li><li>( d )：嵌入向量的维度。</li></ul><p>对于一个输入索引 ( i )，通过查表操作提取 ( W ) 中的第 ( i ) 行，得到对应的嵌入向量 ( \mathbf{e}_i )。</p></li><li><p><strong>训练</strong></p><ul><li><strong>随机初始化</strong>：嵌入矩阵 ( W ) 通常在训练开始时被随机初始化。</li><li><strong>梯度更新</strong>：通过反向传播，嵌入矩阵会随着目标任务（如分类、语言建模）的损失函数进行更新。</li><li><strong>语义优化</strong>：优化后，相似输入的嵌入向量通常会更加接近，从而反映语义上的相似性。</li></ul></li><li><p><strong>常见模型</strong></p><ul><li><strong>Word2Vec</strong>: 使用上下文窗口预测单词的共现关系。</li><li><strong>GloVe</strong>: 基于全局共现矩阵生成嵌入。</li><li><strong>Transformer-based Embedding</strong>: 使用 Transformer 模型，如 BERT 和 GPT，通过深度上下文生成动态的词嵌入。</li></ul></li></ol><hr><h2 id="2-Embedding-的优缺点">2. Embedding 的优缺点</h2><h3 id="优点"><strong>优点</strong></h3><ol><li><p><strong>低维紧凑表示</strong>：</p><ul><li>大幅降低了高维离散数据的表示复杂度。</li><li>能够减少存储空间，提高计算效率。</li></ul></li><li><p><strong>语义捕捉能力</strong>：</p><ul><li>嵌入向量在连续空间中可以捕捉输入的语义和关系（如同义词或上下文依赖性）。</li></ul></li><li><p><strong>模型兼容性</strong>：</p><ul><li>嵌入作为深度学习的输入特征，便于与各种神经网络架构（如卷积网络、循环网络、Transformer）结合。</li></ul></li><li><p><strong>任务迁移</strong>：</p><ul><li>通过预训练的嵌入（如 Word2Vec 或 BERT 嵌入），可以在多个下游任务上复用，提高泛化能力。</li></ul></li></ol><hr><h3 id="缺点"><strong>缺点</strong></h3><ol><li><p><strong>解释性差</strong>：</p><ul><li>嵌入向量的语义难以直观解释，具体维度的含义通常不明确。</li></ul></li><li><p><strong>训练依赖性强</strong>：</p><ul><li>嵌入质量高度依赖于训练数据的规模和质量，不适合小规模数据集。</li><li>对长尾分布数据表现较差（如稀有词汇或类别）。</li></ul></li><li><p><strong>动态上下文局限</strong>：</p><ul><li>传统静态嵌入（如 Word2Vec、GloVe）无法适应动态上下文，而动态嵌入（如 BERT）计算成本较高。</li></ul></li><li><p><strong>维度选择挑战</strong>：</p><ul><li>嵌入维度 ( d ) 的选择需要权衡表示能力和计算成本，维度过小可能丢失信息，维度过大可能导致过拟合。</li></ul></li></ol><hr><h2 id="3-embeddings变换为什么经常使用加法操作">3. embeddings变换为什么经常使用加法操作</h2><p>在推荐系统、图神经网络（GNNs）以及注意力机制中，嵌入向量（embeddings）之间的变换经常使用加法操作。这种做法有效的原因及其替代方案如下：</p><h3 id="使用加法操作的原因">使用加法操作的原因</h3><ol><li><p>信息融合<br>加法操作可以有效地将多个嵌入向量的信息融合在一起，而不会丢失任何一个向量的信息。每个嵌入向量的不同维度通常代表不同的特征或属性，通过加法操作，这些特征可以被综合起来，形成一个新的、综合的表示。</p></li><li><p>保持信息的线性关系<br>加法操作是一种线性变换，它可以保持嵌入向量之间的线性关系。这对于许多机器学习模型（尤其是基于线性模型的变体）是非常重要的，因为这些模型通常假设输入特征之间存在线性关系。</p></li><li><p>梯度传播<br>在深度学习模型中，加法操作在反向传播过程中可以有效地传递梯度。这意味着在训练过程中，模型可以更稳定地更新参数，避免梯度消失或梯度爆炸的问题。</p></li><li><p>简单性和效率<br>加法操作非常简单，计算成本低，易于实现。在大规模数据和复杂模型中，这一点尤为重要。现代深度学习框架（如TensorFlow和PyTorch）都高度优化了加法操作，可以在GPU等硬件上高效运行。</p></li><li><p>保持向量空间的结构<br>嵌入向量通常在高维向量空间中表示，这些空间通常具有某种结构（如距离、相似度等）。加法操作可以保持这些结构，使得新的嵌入向量仍然具有合理的几何意义。例如，在词嵌入中，向量的加法操作可以捕捉到语义上的关系（如“king” + “woman” - “man” ≈ “queen”）。</p></li><li><p><strong>线性组合的简单性和效率</strong>：</p><ul><li>加法是一种简单的线性组合方式，计算成本低，易于实现。</li><li>在深度学习框架中，加法操作可以高效地利用硬件加速（如GPU）。</li></ul></li><li><p><strong>保持信息的完整性</strong>：</p><ul><li>加法操作可以将多个嵌入向量的信息合并在一起，而不会丢失任何一个向量的信息。</li><li>对于推荐系统和GNNs，加法可以有效地聚合邻居节点的信息，保留每个节点的贡献。</li></ul></li><li><p><strong>可解释性</strong>：</p><ul><li>加法操作的结果通常更容易理解和解释，特别是在特征工程和调试过程中。</li></ul></li><li><p><strong>梯度传播</strong>：</p><ul><li>加法操作在反向传播过程中可以有效地传递梯度，有助于模型的优化。</li></ul></li></ol><h3 id="替代方案">替代方案</h3><p>尽管加法操作在许多情况下非常有效，但在某些场景下，其他操作也可能更合适：</p><ol><li><p><strong>拼接（Concatenation）</strong>：</p><ul><li>拼接操作将多个嵌入向量连接成一个更大的向量。</li><li>优点：保留了每个嵌入向量的原始信息，不会发生信息丢失。</li><li>缺点：增加了后续层的参数数量，可能导致模型复杂度增加。</li><li>应用场景：当需要保留每个嵌入向量的独立信息时，例如在多模态学习中。</li></ul></li><li><p><strong>逐元素乘法（Element-wise Multiplication）</strong>：</p><ul><li>逐元素乘法将两个嵌入向量对应位置的元素相乘。</li><li>优点：可以增强某些特征的权重，抑制其他特征。</li><li>缺点：可能会导致信息的丢失，特别是在某些特征接近零时。</li><li>应用场景：当需要强调某些特征而抑制其他特征时，例如在注意力机制中。</li></ul></li><li><p><strong>注意力机制（Attention Mechanism）</strong>：</p><ul><li>注意力机制通过计算权重来决定每个嵌入向量的重要性，然后加权求和。</li><li>优点：可以动态地调整每个嵌入向量的权重，更加灵活和适应性强。</li><li>缺点：增加了模型的复杂度，需要额外的参数来计算权重。</li><li>应用场景：当需要根据上下文动态调整特征重要性时，例如在序列建模和推荐系统中。</li></ul></li><li><p><strong>池化操作（Pooling）</strong>：</p><ul><li>池化操作（如最大池化或平均池化）可以用于从多个嵌入向量中提取关键信息。</li><li>优点：可以减少信息的维度，提高模型的鲁棒性。</li><li>缺点：可能会丢失一些细节信息。</li><li>应用场景：当需要减少信息维度并保留关键特征时，例如在图像处理和文本分类中。</li></ul></li></ol><h3 id="结论">结论</h3><p>加法操作在嵌入向量变换中非常有效，因为它简单、高效且能保留信息的完整性。然而，根据具体应用场景和需求，其他操作（如拼接、逐元素乘法、注意力机制和池化操作）也可能更合适。选择合适的操作方法需要综合考虑模型的复杂度、计算效率和任务的具体需求。</p><h2 id="应用场景"><strong>应用场景</strong></h2><ol><li><p><strong>自然语言处理 (NLP)</strong>：</p><ul><li>词嵌入（Word Embedding）：如 Word2Vec、GloVe、FastText。</li><li>子词嵌入：处理 OOV（Out of Vocabulary）问题。</li><li>动态嵌入：如 BERT 和 GPT 的上下文嵌入。</li></ul></li><li><p><strong>推荐系统</strong>：</p><ul><li>用户和物品的嵌入表示，用于计算相似度或协同过滤。</li></ul></li><li><p><strong>计算机视觉</strong>：</p><ul><li>图像特征嵌入（如 FaceNet 提取人脸特征）。</li><li>类别嵌入，用于多任务学习或迁移学习。</li></ul></li><li><p><strong>图数据分析</strong>：</p><ul><li>节点嵌入（如 DeepWalk、Node2Vec）和图结构嵌入（如 GraphSAGE、GAT）。</li></ul></li></ol><hr><h3 id="总结"><strong>总结</strong></h3><p>Embedding 是深度学习中不可或缺的工具，其核心思想是将离散数据嵌入到一个连续的向量空间，便于捕捉复杂的语义信息并加速模型训练。然而，其效果往往依赖于数据的规模和任务的复杂性，在实际应用中需要结合具体场景灵活选择和调整嵌入方法。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/posts/20241108231554-6782be63.html"/>
      <url>/posts/20241108231554-6782be63.html</url>
      
        <content type="html"><![CDATA[<h1 id="镜像">镜像</h1><p>当你创建一个 Docker 镜像时，镜像内的文件是固定的，意味着该镜像包含了创建时所有的文件系统状态，包括应用、依赖、配置文件等。这个镜像本身是不可变的，也就是说一旦镜像被创建，镜像内的文件和结构不会再被修改。</p><ol><li><p><strong>镜像的不可变性</strong>：</p><ul><li>Docker 镜像是分层构建的，每一层都表示文件系统的一个增量。当你创建一个新的镜像时，这些层是只读的，镜像一旦生成后就不会改变。</li><li>你可以使用 <code>docker commit</code> 或重新构建镜像来创建新的镜像版本，但原始镜像不会被修改。</li></ul></li><li><p><strong>容器是镜像的可写副本</strong>：</p><ul><li>当你使用 <code>docker run</code> 命令启动一个容器时，Docker 会在镜像的基础上创建一个容器。容器包含一个可写的层，允许你在容器内修改、添加或删除文件。</li><li>这些更改只发生在容器中，镜像本身不会受到影响。如果删除容器，容器内的更改也会被丢失，除非你将更改保存到一个新的镜像中。</li></ul></li><li><p><strong>镜像内的文件在容器中的表现</strong>：</p><ul><li>容器启动时，会基于镜像文件系统创建可写层。你可以在容器中修改文件（例如，写入日志、修改配置），但这些修改不会影响原始镜像。</li><li>当容器停止或删除时，所有对文件系统的更改都会消失，除非你将更改保存为一个新的镜像（使用 <code>docker commit</code>）。</li></ul></li></ol><p>总结：</p><ul><li><strong>镜像本身是不可变的</strong>，创建后镜像中的文件不会自动更改。</li><li><strong>容器是镜像的运行副本</strong>，并有一个可写层，容器内的文件可以改变，但不会影响原始镜像。</li><li>如果你希望镜像的内容发生变化，必须重新构建或使用 <code>docker commit</code> 创建一个新的镜像。</li></ul><h2 id="构建">构建</h2><p>当你启动一个 Docker 容器时，容器内部执行的程序所处的初始路径通常由 Docker 镜像的 <code>WORKDIR</code> 指令决定。如果镜像没有指定 <code>WORKDIR</code>，则默认路径通常是容器的根目录 <code>/</code>。</p><h3 id="情况-1：镜像指定了-WORKDIR">情况 1：镜像指定了 <code>WORKDIR</code></h3><ul><li>如果 Dockerfile 中使用了 <code>WORKDIR</code> 指令，那么容器启动后，程序会在这个指定的目录中运行。例如，以下 Dockerfile 片段：<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br></pre></td></tr></table></figure>当你启动容器时，容器内部程序的工作目录就是 <code>/app</code>，你可以在该目录下执行程序。</li></ul><h3 id="情况-2：镜像没有指定-WORKDIR">情况 2：镜像没有指定 <code>WORKDIR</code></h3><ul><li>如果 Dockerfile 中没有指定 <code>WORKDIR</code>，容器内的默认路径会是根目录 <code>/</code>。这意味着程序会从 <code>/</code> 目录开始执行。</li></ul><h3 id="如何检查容器内的当前路径：">如何检查容器内的当前路径：</h3><p>如果你已经启动了一个容器，可以通过以下方式检查当前路径：</p><ol><li>进入容器：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name&gt; /bin/bash</span><br></pre></td></tr></table></figure></li><li>使用 <code>pwd</code> 命令查看当前工作路径：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="示例：">示例：</h3><p>假设启动了一个名为 <code>my_container</code> 的容器，你可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my_container /bin/bash</span><br><span class="line"><span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><p>如果 Dockerfile 中有 <code>WORKDIR /app</code>，那么输出将是 <code>/app</code>。如果没有 <code>WORKDIR</code>，则输出通常为 <code>/</code>。</p><p>总结：</p><ul><li>容器内程序执行的路径由 Dockerfile 中的 <code>WORKDIR</code> 指定。</li><li>如果没有 <code>WORKDIR</code>，则默认是根目录 <code>/</code>。</li><li>你可以使用 <code>pwd</code> 命令来查看容器内程序当前的工作路径。</li></ul><h2 id="修改镜像">修改镜像</h2><p>在 Docker 容器的镜像中，镜像本身是不可变的，但你可以通过多种方式修改镜像内部的文件。一般情况下有两种方法来实现这一目的：</p><h3 id="方法-1：通过容器修改文件并创建新的镜像">方法 1：通过容器修改文件并创建新的镜像</h3><ol><li><p><strong>启动容器并修改文件</strong>：<br>你可以先基于现有的镜像启动一个容器，然后在该容器内修改文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name my_container &lt;image_name&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>进入容器后，你可以通过标准的 Linux 命令（如 <code>vim</code>, <code>nano</code>, <code>cp</code>, <code>mv</code> 等）修改容器内的文件。</p></li><li><p><strong>提交更改创建新的镜像</strong>：<br>完成文件修改后，退出容器并使用 <code>docker commit</code> 命令将容器的更改保存为一个新的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit my_container my_new_image</span><br></pre></td></tr></table></figure><p>这样，你就可以创建一个包含所做更改的新镜像。<code>my_new_image</code> 是新镜像的名字。</p></li><li><p><strong>删除旧容器</strong>（可选）：<br>如果不再需要修改时用到的容器，可以删除它。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> my_container</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法-2：通过-Dockerfile-修改镜像">方法 2：通过 Dockerfile 修改镜像</h3><p>如果你想批量修改文件或进行更多自定义操作，可以创建或修改一个 <code>Dockerfile</code>，然后重新构建镜像。以下是使用 <code>Dockerfile</code> 修改镜像的步骤。</p><ol><li><p><strong>创建 Dockerfile</strong>：<br>假设你想修改某个镜像中的文件内容，可以创建一个 <code>Dockerfile</code>，基于原有的镜像进行修改。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;base_image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制本地文件到镜像</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./new_file /path/in/container/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者删除、修改镜像中的文件</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">rm</span> /path/in/container/old_file</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;New content&quot;</span> &gt; /path/in/container/existing_file</span></span><br></pre></td></tr></table></figure></li><li><p><strong>构建新的镜像</strong>：<br>编写好 <code>Dockerfile</code> 后，可以通过 <code>docker build</code> 命令构建新的镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t my_modified_image .</span><br></pre></td></tr></table></figure><p>这个命令会根据 <code>Dockerfile</code> 的指令构建一个新的镜像，<code>my_modified_image</code> 就是新镜像的名字。</p></li><li><p><strong>使用新镜像</strong>：<br>完成构建后，你可以使用这个新镜像来启动容器，修改后的文件将会包含在新镜像中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it my_modified_image /bin/bash</span><br></pre></td></tr></table></figure></li></ol><h3 id="方法-3：直接在已有镜像中修改（不推荐）">方法 3：直接在已有镜像中修改（不推荐）</h3><p>你可以通过以下方式修改镜像内的文件，但这种方式非常不灵活，且容易丢失更改，因此不推荐。</p><ol><li><p>启动容器并进入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name temp_container &lt;image_name&gt; /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>在容器内部修改文件。</p></li><li><p>停止并提交容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit temp_container &lt;new_image_name&gt;</span><br></pre></td></tr></table></figure></li><li><p>删除临时容器（可选）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> temp_container</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结：">总结：</h3><ul><li><strong>直接修改容器内的文件并提交为新镜像</strong>：适用于小范围修改。</li><li><strong>使用 Dockerfile 进行文件修改和重建镜像</strong>：适合大规模、批量或可重复的修改操作。</li></ul><h1 id="启动">启动</h1><h2 id="启动命令参数">启动命令参数</h2><p>这个 Bash 脚本的作用是运行一个 Docker 容器，执行 <code>python main.py</code> 脚本，并且设置了网络和挂载选项。让我们逐步解析每个部分的含义：</p><ol><li><p><strong><code>docker run -d</code></strong></p><ul><li><code>docker run</code>：启动一个新的 Docker 容器。</li><li><code>-d</code>：表示后台运行容器（detach 模式），不会在前台阻塞终端。</li></ul></li><li><p><strong><code>--net=host</code></strong></p><ul><li>这个选项将 Docker 容器的网络模式设置为与宿主机相同，容器将共享宿主机的网络堆栈。这意味着容器内的进程可以直接使用宿主机的 IP 和端口，而不会通过 NAT 进行端口映射。</li><li>在某些应用场景下（如需要高性能的网络连接，或与宿主机进行通信的情况），<code>--net=host</code> 是非常有用的。</li></ul></li><li><p><strong><code>--ipc=&quot;host&quot;</code></strong></p><ul><li>将容器的 IPC（进程间通信）命名空间设置为与宿主机共享。容器内的进程可以与宿主机的进程共享 IPC 资源（如共享内存）。</li><li>这种配置通常在需要容器与宿主机共享内存时使用。</li></ul></li><li><p><strong><code>--name=container</code></strong></p><ul><li>设置容器的名称为 <code>container</code>。之后你可以使用这个名称来管理或查看容器，例如使用 <code>docker logs container</code> 查看日志。</li></ul></li><li><p><strong><code>--add-host=solrdic.test.com:172.16.1.1</code></strong></p><ul><li>通过这个选项，可以将 <code>solrdic.test.com</code> 添加到容器内的 <code>/etc/hosts</code> 文件中，并将它映射到 <code>172.16.1.1</code> IP 地址。</li><li>在容器内部，当你访问 <code>solrdic.test.com</code>，它会解析到 <code>172.16.1.1</code>，这对容器内的网络配置是有用的。</li></ul></li><li><p><strong><code>-v &quot;$ITEM2VEC_DATA&quot;/data:/data</code></strong></p><ul><li><code>-v</code>：这是一个挂载卷的选项，用来将宿主机目录与容器内的目录进行映射。</li><li><code>&quot;$ITEM2VEC_DATA&quot;/data</code>：这是宿主机的目录，其中 <code>$ITEM2VEC_DATA</code> 是一个环境变量，指向宿主机的某个路径。这个路径将映射到容器内的 <code>/data</code> 目录。</li><li><code>/data</code>：容器内部的路径，容器内的应用可以在这个目录中读取和写入数据。</li></ul></li><li><p><strong><code>test/container:latest</code></strong></p><ul><li>这是 Docker 镜像的名称和版本号。该命令使用名为 <code>test/container</code> 的镜像，并拉取 <code>latest</code> 标签对应的版本。</li></ul></li><li><p><strong><code>python main.py</code></strong></p><ul><li>这是容器启动后执行的命令。启动容器后，它将执行镜像中的 <code>python main.py</code> 脚本。</li><li><code>main.py</code> 应该是一个位于容器内的 Python 文件。可以在镜像构建时将 <code>main.py</code> 放置在合适的路径中。</li></ul></li></ol><h3 id="完整脚本的作用：">完整脚本的作用：</h3><ol><li>在后台启动一个名为 <code>container</code> 的 Docker 容器。</li><li>容器使用宿主机的网络和 IPC 命名空间。</li><li>在容器的 <code>/etc/hosts</code> 文件中添加 <code>solrdic.test.com</code> 与 <code>172.16.1.1</code> 的映射。</li><li>将宿主机的 <code>$ITEM2VEC_DATA/data</code> 目录挂载到容器的 <code>/data</code> 目录中。</li><li>启动镜像 <code>test/container:latest</code>，并执行 <code>python main.py</code> 脚本。</li></ol><h2 id="文件导入">文件导入</h2><p>要启动一个 Docker 容器并导入已有的文件，可以通过多种方法实现。以下是一些常用的方法。</p><h3 id="方法-1：使用-v-选项挂载宿主机的目录">方法 1：使用 <code>-v</code> 选项挂载宿主机的目录</h3><p>你可以在启动容器时使用 <code>-v</code>（或 <code>--volume</code>）选项将宿主机上的目录挂载到容器内部。这样，容器可以访问宿主机的文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my_container -v /path/on/host:/path/in/container &lt;image_name&gt;</span><br></pre></td></tr></table></figure><ul><li><code>/path/on/host</code>：宿主机上你希望挂载的目录路径。</li><li><code>/path/in/container</code>：容器内部将要挂载的目录路径。</li><li><code>&lt;image_name&gt;</code>：要运行的 Docker 镜像的名称。</li></ul><h3 id="示例">示例</h3><p>假设你想将宿主机的 <code>/data</code> 目录挂载到容器的 <code>/app/data</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name my_container -v /data:/app/data &lt;image_name&gt;</span><br></pre></td></tr></table></figure><h3 id="方法-2：使用-COPY-或-ADD-指令在-Dockerfile-中导入文件">方法 2：使用 <code>COPY</code> 或 <code>ADD</code> 指令在 Dockerfile 中导入文件</h3><p>如果你想在构建镜像时将文件复制到容器中，可以使用 <code>COPY</code> 或 <code>ADD</code> 指令。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;base_image&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件到镜像</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> /path/on/host/file.txt /path/in/container/file.txt</span></span><br></pre></td></tr></table></figure><p>然后，你可以构建镜像并启动容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -t &lt;image_name&gt; .</span><br><span class="line">docker run -d --name my_container &lt;image_name&gt;</span><br></pre></td></tr></table></figure><h3 id="方法-3：使用-docker-cp-命令将文件复制到运行中的容器">方法 3：使用 <code>docker cp</code> 命令将文件复制到运行中的容器</h3><p>如果容器已经在运行，你可以使用 <code>docker cp</code> 命令将文件复制到容器内。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /path/on/host/file.txt my_container:/path/in/container/file.txt</span><br></pre></td></tr></table></figure><h3 id="示例-2">示例</h3><p>假设容器 <code>my_container</code> 已经在运行，你希望将宿主机的 <code>/data/file.txt</code> 复制到容器的 <code>/app/data/</code> 目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> /data/file.txt my_container:/app/data/file.txt</span><br></pre></td></tr></table></figure><h3 id="方法-4：通过交互式终端访问容器">方法 4：通过交互式终端访问容器</h3><p>你也可以启动一个交互式容器，并在容器中手动将文件复制到容器内：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name my_container -v /path/on/host:/app &lt;image_name&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>在容器内部，你可以使用 Linux 命令（如 <code>cp</code>）将文件移动到所需的位置。</p><h3 id="总结">总结</h3><ul><li>使用 <code>-v</code> 选项挂载目录是将宿主机文件导入容器的最常用方法。</li><li>在 Dockerfile 中使用 <code>COPY</code> 或 <code>ADD</code> 可以在构建镜像时导入文件。</li><li>使用 <code>docker cp</code> 可以在容器运行后导入文件。</li><li>通过交互式终端，你可以在容器内部手动进行文件操作。</li></ul><p>根据你的需求选择合适的方法。</p><h2 id="设置时间">设置时间</h2><p>Docker 容器的日志时间戳默认是容器<strong>内部的时间</strong>，但是这个内部时间通常与宿主机的系统时间同步。如果容器内的时区或时间设置与宿主机不同，日志的时间戳可能会显示不同的时间。</p><p>在 Docker 容器中，容器的时间默认情况下与宿主机（系统）的时间是同步的。容器使用宿主机的时区和时间信息，但有时由于某些原因（例如时区设置、NTP 同步问题），可能会出现时间不同步的情况。如果你遇到容器内的时间与宿主机不一致的情况，可以按照以下方法对齐它们的时间。</p><h3 id="方法-1：同步容器时间与宿主机时间">方法 1：同步容器时间与宿主机时间</h3><ol><li><p><strong>容器的时间与宿主机默认同步</strong>：<br>默认情况下，Docker 容器是通过共享宿主机的时间命名空间来同步时间的。因此，你不需要额外的配置，容器应该与宿主机的时间保持一致。</p></li><li><p><strong>时区问题导致时间不一致</strong>：<br>如果容器中的时间与宿主机不同步，通常是时区设置的问题。你可以通过以下方式确保时区与宿主机对齐。</p></li></ol><h3 id="方法-2：通过挂载宿主机的时区文件">方法 2：通过挂载宿主机的时区文件</h3><p>你可以通过挂载宿主机的时区文件，将容器的时区与宿主机保持一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro &lt;image_name&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-v /etc/localtime:/etc/localtime:ro</code>：将宿主机的 <code>/etc/localtime</code> 文件挂载到容器中，使得容器使用宿主机的时区。</li><li><code>-v /etc/timezone:/etc/timezone:ro</code>：将宿主机的 <code>/etc/timezone</code> 文件挂载到容器中，确保容器的时区与宿主机一致。</li></ul><p>这可以确保容器内的时间与宿主机完全对齐。</p><h3 id="方法-3：手动设置容器时区">方法 3：手动设置容器时区</h3><p>如果你只想调整容器的时区，而不挂载宿主机的时区文件，你可以在容器内部通过安装时区设置工具并手动调整时区：</p><ol><li><p>进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name&gt; /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>在基于 Debian 或 Ubuntu 的容器中，你可以通过安装 <code>tzdata</code> 包来调整时区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get update &amp;&amp; apt-get install -y tzdata</span><br></pre></td></tr></table></figure></li><li><p>然后配置时区：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure tzdata</span><br></pre></td></tr></table></figure></li><li><p>选择正确的时区后，容器的时间会自动与时区同步。</p></li></ol><h3 id="方法-4：重新启动容器同步时间">方法 4：重新启动容器同步时间</h3><p>有时，容器的时间可能与宿主机时间不同步，尤其是当宿主机的时间被更新（例如通过 NTP 同步）而容器还没有更新时。在这种情况下，你可以通过重新启动容器来强制同步时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart &lt;container_name&gt;</span><br></pre></td></tr></table></figure><h3 id="小结：">小结：</h3><ul><li>Docker 容器内的时间默认情况下与宿主机同步。</li><li>如果遇到时间不一致问题，通常是时区问题，可以通过挂载宿主机的 <code>/etc/localtime</code> 和 <code>/etc/timezone</code> 文件来同步时区。</li><li>也可以手动在容器内设置时区。</li><li>如果时间不同步，可以通过重启容器来强制同步时间。</li></ul><h3 id="详细解释：">详细解释：</h3><ul><li><p><strong>默认情况下</strong>，容器内的时间是从宿主机继承的，容器启动时会自动同步宿主机的时区和时间。因此，容器日志中的时间戳通常与宿主机系统时间一致。</p></li><li><p><strong>容器内部时区</strong>：如果容器内的时区与宿主机不一致（例如，容器内配置了不同的时区），则日志的时间戳会使用容器内的时区。</p></li><li><p><strong>特殊情况</strong>：如果容器内手动修改了系统时间或时区（通过安装 <code>tzdata</code> 包或其他方式），那么日志的时间戳将使用修改后的时间。</p></li></ul><h3 id="检查与同步时区：">检查与同步时区：</h3><ul><li><p><strong>同步时区</strong>：如果容器的时间戳与宿主机时间不同步，可以通过挂载宿主机的时区文件来确保时区一致：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /etc/localtime:/etc/localtime:ro -v /etc/timezone:/etc/timezone:ro ...</span><br></pre></td></tr></table></figure><p>这会将宿主机的时区文件挂载到容器中，使得容器和宿主机的时区同步。</p></li><li><p><strong>查看容器时间</strong>：你可以通过进入容器内部，使用 <code>date</code> 命令检查容器的当前时间：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name&gt; <span class="built_in">date</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="总结：-2">总结：</h3><ul><li><strong>默认情况下</strong>，Docker 容器日志的时间是容器内的时间，通常与宿主机同步。</li><li>如果容器的时区设置不同或时间被修改，日志的时间戳可能会有所不同。</li></ul><h2 id="重启">重启</h2><p>Docker 提供了多种命令来管理和控制容器，其中包括重启容器的命令。下面是对 <code>docker restart</code> 命令的完全解析，包括其语法、选项和常见用法。<br>当你使用 docker restart 命令重启一个容器时，Docker 会保留该容器原有的所有配置参数。这意味着容器启动时的所有设置，包括环境变量、卷挂载、端口映射等，都会保持不变。具体来说：</p><ol><li>环境变量：容器内原有的环境变量不会改变。</li><li>卷挂载：任何与主机文件系统绑定的卷挂载都会保持原样。</li><li>网络配置：包括端口映射、网络模式等都不会发生变化。</li><li>资源限制：如CPU和内存限制等也会保持不变。</li><li>重启策略：如果容器有设置重启策略，重启后仍然有效。</li></ol><h3 id="命令语法">命令语法</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h3 id="参数说明">参数说明</h3><ul><li><strong>CONTAINER</strong>: 需要重启的一个或多个容器的名称或 ID。</li><li><strong>OPTIONS</strong>: 可选参数，用于控制重启行为。</li></ul><h3 id="常见选项">常见选项</h3><ul><li><code>-t</code>, <code>--time int</code>：在停止容器之前等待的时间（秒）。默认值为 10 秒。如果在指定时间内容器没有停止，Docker 将强制停止容器。</li></ul><h3 id="示例-3">示例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要检查的字符串列表</span></span><br><span class="line">ERROR_STRINGS=(<span class="string">&quot;device-side assert triggered&quot;</span>)</span><br><span class="line"><span class="comment"># ERROR_STRINGS=(&quot;device-side assert triggered&quot; &quot;out of memory&quot; &quot;segmentation fault&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义需要监控的容器列表</span></span><br><span class="line">CONTAINERS=(<span class="string">&quot;product_ranking_service&quot;</span>)</span><br><span class="line"><span class="comment"># CONTAINERS=(&quot;product_ranking_service&quot; &quot;another_container&quot; &quot;yet_another_container&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用关联数组记录每个容器的最后时间戳</span></span><br><span class="line"><span class="built_in">declare</span> -A LAST_LOG_TIMESTAMPS</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查日志并重启容器的函数</span></span><br><span class="line"><span class="function"><span class="title">check_logs_and_restart</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> CONTAINER_NAME=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取从上次读取的时间戳之后的日志</span></span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$&#123;LAST_LOG_TIMESTAMPS[$CONTAINER_NAME]&#125;</span>&quot;</span> ]] || ! <span class="built_in">date</span> -d <span class="string">&quot;<span class="variable">$&#123;LAST_LOG_TIMESTAMPS[$CONTAINER_NAME]&#125;</span>&quot;</span> &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;no valid last log timestamp for container &#x27;<span class="variable">$CONTAINER_NAME</span>&#x27;, reading recent 2000 logs&quot;</span></span><br><span class="line">        LOGS=$(docker logs -t --<span class="built_in">tail</span> 2000 <span class="string">&quot;<span class="variable">$CONTAINER_NAME</span>&quot;</span> 2&gt;&amp;1)</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        LOGS=$(docker logs -t --since <span class="string">&quot;<span class="variable">$&#123;LAST_LOG_TIMESTAMPS[$CONTAINER_NAME]&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$CONTAINER_NAME</span>&quot;</span> 2&gt;&amp;1)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;last log timestamp for container &#x27;<span class="variable">$CONTAINER_NAME</span>&#x27;: <span class="variable">$&#123;LAST_LOG_TIMESTAMPS[$CONTAINER_NAME]&#125;</span>, logs count: <span class="subst">$(echo <span class="string">&quot;<span class="variable">$LOGS</span>&quot;</span> | wc -l)</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 检查日志是否为空</span></span><br><span class="line">    <span class="keyword">if</span> [[ -z <span class="string">&quot;<span class="variable">$LOGS</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;No new logs to check.&quot;</span></span><br><span class="line">        <span class="built_in">return</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="comment"># 遍历错误字符串列表</span></span><br><span class="line">    <span class="keyword">for</span> ERROR_STRING <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;ERROR_STRINGS[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="comment"># 如果日志中包含错误字符串，则重启容器</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$LOGS</span>&quot;</span> | grep -q <span class="string">&quot;<span class="variable">$ERROR_STRING</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;Error string &#x27;<span class="variable">$ERROR_STRING</span>&#x27; found in logs for container &#x27;<span class="variable">$CONTAINER_NAME</span>&#x27;. Restarting container...&quot;</span></span><br><span class="line">            docker restart <span class="string">&quot;<span class="variable">$CONTAINER_NAME</span>&quot;</span></span><br><span class="line">            <span class="built_in">return</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新 LAST_LOG_TIMESTAMPS 为最后一行日志的时间戳</span></span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="string">&quot;<span class="variable">$LOGS</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        LAST_LOG_TIMESTAMPS[<span class="variable">$CONTAINER_NAME</span>]=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$LOGS</span>&quot;</span> | <span class="built_in">tail</span> -1 | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每分钟检查一次日志</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> CONTAINER <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;CONTAINERS[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        check_logs_and_restart <span class="string">&quot;<span class="variable">$CONTAINER</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="built_in">sleep</span> 600</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure><h3 id="详细解析">详细解析</h3><h4 id="基本用法">基本用法</h4><ul><li><strong>重启容器</strong>：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart CONTAINER_NAME</span><br></pre></td></tr></table></figure>这条命令会停止并重新启动指定的容器。Docker 会先发送 <code>SIGTERM</code> 信号给容器，等待一段时间（默认 10 秒）后，如果容器还没有停止，会发送 <code>SIGKILL</code> 信号强制停止容器，然后重新启动容器。</li></ul><h4 id="使用选项">使用选项</h4><ul><li><strong>设置停止等待时间</strong>：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart --time 20 CONTAINER_NAME</span><br></pre></td></tr></table></figure>这条命令会在停止容器之前等待 20 秒。如果在这段时间内容器没有停止，Docker 将强制停止容器。</li></ul><h4 id="多个容器">多个容器</h4><ul><li><strong>同时重启多个容器</strong>：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart CONTAINER_NAME1 CONTAINER_NAME2 CONTAINER_NAME3</span><br></pre></td></tr></table></figure>这条命令会同时重启多个容器。</li></ul><h3 id="注意事项">注意事项</h3><ol><li><p><strong>容器状态</strong>：</p><ul><li>如果容器已经在运行，<code>docker restart</code> 会先停止容器再启动。</li><li>如果容器已经停止，<code>docker restart</code> 会直接启动容器。</li></ul></li><li><p><strong>健康检查</strong>：</p><ul><li>如果容器配置了健康检查，Docker 会在重启后重新进行健康检查。</li></ul></li><li><p><strong>网络连接</strong>：</p><ul><li>重启容器可能会导致网络连接中断，特别是在容器正在处理请求时。</li></ul></li></ol><h3 id="实际应用">实际应用</h3><p>在实际应用中，<code>docker restart</code> 命令常用于以下场景：</p><ul><li><strong>更新配置</strong>：当容器的配置文件发生变化时，重启容器可以使新的配置生效。</li><li><strong>恢复服务</strong>：当容器出现异常时，重启容器可以尝试恢复服务。</li><li><strong>测试</strong>：在开发和测试环境中，频繁重启容器可以帮助验证容器的健壮性和恢复能力。</li></ul><p>通过理解和掌握 <code>docker restart</code> 命令及其选项，你可以更高效地管理和维护 Docker 容器。</p><h1 id="退出、删除">退出、删除</h1><p>当一个 Docker 容器的状态是 <code>exited</code> 时，虽然容器已停止运行，但它仍然存在，并且其名字也依然被占用。因此，如果你尝试启动一个同名的容器，Docker 会提示名字已被使用，无法启动一个同名的容器。</p><p>但是，你有以下几种选择：</p><h3 id="1-重新启动同一个容器">1. 重新启动同一个容器</h3><p>你可以通过以下命令重新启动已经退出的容器，而不需要新建一个同名容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名称或容器ID</span><br></pre></td></tr></table></figure><p>这将会重新启动已经退出的容器。</p><h3 id="2-删除已退出的容器并创建一个同名的新容器">2. 删除已退出的容器并创建一个同名的新容器</h3><p>如果你想删除原有的容器并创建一个同名的新容器，你可以按照以下步骤操作：</p><ul><li><p>先删除已退出的容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> 容器名称或容器ID</span><br></pre></td></tr></table></figure></li><li><p>然后创建并启动一个同名的新容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name 容器名称 其他参数</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-强制删除并运行同名容器">3. 强制删除并运行同名容器</h3><p>你可以使用 <code>docker run</code> 命令中的 <code>--rm</code> 参数来在容器退出后自动删除容器，也可以避免命名冲突。</p><p>总结：在容器 <code>exited</code> 的状态下不能直接启动同名的新容器，但可以通过重新启动、删除或修改命名来解决这个问题。</p><h1 id="docker-logs">docker logs</h1><p><code>docker logs</code> 命令用于查看 Docker 容器的日志。它可以查看标准输出和标准错误输出的日志。下面是 <code>docker logs</code> 命令的所有常用参数及其作用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [OPTIONS] 容器名称或ID</span><br></pre></td></tr></table></figure><h3 id="docker-logs-的常用选项"><code>docker logs</code> 的常用选项</h3><ol><li><p><strong><code>-f</code> 或 <code>--follow</code></strong></p><ul><li><strong>作用</strong>：实时跟踪日志输出（类似 <code>tail -f</code>）。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f 容器名称或ID</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>--since</code></strong></p><ul><li><strong>作用</strong>：从指定时间开始显示日志。时间可以是 Unix 时间戳、RFC3339 时间格式，或简单的时间单位（如 <code>1h</code> 表示 1 小时前）。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since <span class="string">&quot;2023-10-15T10:00:00&quot;</span> 容器名称或ID</span><br></pre></td></tr></table></figure>或：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since 1h 容器名称或ID</span><br></pre></td></tr></table></figure>（表示显示 1 小时前到现在的日志）</li></ul></li><li><p><strong><code>--until</code></strong></p><ul><li><strong>作用</strong>：显示指定时间之前的日志。时间格式与 <code>--since</code> 相同。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --until <span class="string">&quot;2023-10-15T12:00:00&quot;</span> 容器名称或ID</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>-n</code> 或 <code>--tail</code></strong></p><ul><li><strong>作用</strong>：只显示最近的 <code>n</code> 条日志。你可以使用 <code>all</code> 来显示全部日志。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --<span class="built_in">tail</span> 100 容器名称或ID</span><br></pre></td></tr></table></figure>（表示只显示最近的 100 条日志）</li></ul></li><li><p><strong><code>-t</code> 或 <code>--timestamps</code></strong></p><ul><li><strong>作用</strong>：在日志行前加上时间戳。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -t 容器名称或ID</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>--details</code></strong></p><ul><li><strong>作用</strong>：显示日志的额外详细信息，如有的话（通常取决于日志驱动程序）。</li><li><strong>示例</strong>：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --details 容器名称或ID</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="组合使用示例">组合使用示例</h3><ol><li><p>实时跟踪容器日志，并只显示最近 100 条日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f --<span class="built_in">tail</span> 100 容器名称或ID</span><br></pre></td></tr></table></figure></li><li><p>从 1 小时前开始，带时间戳显示日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since 1h -t 容器名称或ID</span><br></pre></td></tr></table></figure></li><li><p>显示今天早上 10 点到现在的日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --since <span class="string">&quot;2024-10-15T10:00:00&quot;</span> 容器名称或ID</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结：-3">总结：</h3><ul><li><code>docker logs</code> 是查看容器日志的主要工具，可以通过选项 <code>-f</code> 进行实时查看，<code>--since</code> 和 <code>--until</code> 来指定时间范围，<code>--tail</code> 用于显示最近的几条日志，<code>-t</code> 用于显示时间戳。</li></ul><h1 id="使用">使用</h1><h2 id="要打开一个已经在运行中的-Docker-容器的终端">要打开一个已经在运行中的 Docker 容器的终端</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name_or_id&gt; /bin/bash</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it &lt;container_name_or_id&gt; /bin/sh</span><br></pre></td></tr></table></figure><h3 id="参数解释：">参数解释：</h3><ul><li><code>-i</code>：保持标准输入处于打开状态。</li><li><code>-t</code>：为容器分配一个伪终端。</li><li><code>&lt;container_name_or_id&gt;</code>：你要进入的容器的名称或 ID，可以通过 <code>docker ps</code> 查看。</li><li><code>/bin/bash</code> 或 <code>/bin/sh</code>：在容器中执行的 shell 程序。大部分容器会包含 <code>/bin/bash</code>，但有些轻量级镜像（如 <code>alpine</code>）可能只包含 <code>/bin/sh</code>。</li></ul><h3 id="示例：-2">示例：</h3><p>假设容器名是 <code>my_container</code>，你可以使用以下命令进入该容器的终端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my_container /bin/bash</span><br></pre></td></tr></table></figure><p>如果你不确定是否有 <code>/bin/bash</code>，可以使用 <code>/bin/sh</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it my_container /bin/sh</span><br></pre></td></tr></table></figure><p>这样，你就可以进入正在运行的容器并执行命令。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch学习笔记_2_dataloader</title>
      <link href="/posts/20241028173104-bbb696dc.html"/>
      <url>/posts/20241028173104-bbb696dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="DataLoader中的数据加载方法">DataLoader中的数据加载方法</h2><blockquote><p>深度学习中，数据加载器（DataLoader）是一个非常重要的类，它用于加载数据集并以批次（batch）的方式返回数据。<code>DataLoader</code> 提供了一个迭代器，可以通过 <code>next()</code> 函数或 <code>for</code> 循环来访问数据集中的批次。<br>在 PyTorch 中，<code>DataLoader</code> 是一个用于加载数据的工具，它可以帮助你有效地加载和处理数据。<code>DataLoader</code> 通常用于训练神经网络，它可以将数据集分成多个批次，并在训练过程中逐批次地提供数据。这样可以减少内存占用，提高训练效率。<br><strong>iter</strong>() 方法：当你使用 iter(dataloader) 或 for 循环遍历 DataLoader 时，Python 会调用 DataLoader 的 <strong>iter</strong>() 方法。这个方法返回一个迭代器对象，这个对象是 DataLoader 的一个内部迭代器，通常是一个 DataLoaderIter 类的实例</p></blockquote><h2 id="iter-方法"><strong>iter</strong>() 方法</h2><p><code>torch.utils.data.DataLoader</code> 是 PyTorch 中用于加载数据集的一个高效工具，它能够并行地从数据集中抽取样本，并将它们组合成批次（batches）。<code>DataLoader</code> 的 <code>__iter__()</code> 方法是其内部机制的一部分，用于实现迭代器协议，使得 <code>DataLoader</code> 可以被直接用于 for 循环中。</p><h3 id="iter-方法详解"><code>__iter__()</code> 方法详解</h3><h4 id="定义">定义</h4><p><code>__iter__()</code> 方法返回一个迭代器对象，该对象负责在每次迭代时生成一个新的批次数据。对于 <code>DataLoader</code> 来说，这个方法返回的是一个实现了迭代器协议的 <code>_DataLoaderIter</code> 对象。</p><ul><li><strong>签名</strong>: <code>DataLoader.__iter__() -&gt; _BaseDataLoaderIter</code></li><li><strong>参数</strong>: 无</li><li><strong>返回值</strong>: 返回一个迭代器对象，通常是一个 <code>_SingleProcessDataLoaderIter</code> 或 <code>_MultiProcessingDataLoaderIter</code>，具体取决于是否启用了多进程数据加载 (<code>num_workers &gt; 0</code>)。</li></ul><h4 id="内部工作原理">内部工作原理</h4><ol><li><p><strong>单进程模式</strong> (<code>num_workers=0</code>):</p><ul><li>当 <code>num_workers</code> 设置为 0 时，<code>DataLoader</code> 在主进程中依次调用数据集的 <code>__getitem__</code> 方法来获取单个样本，并通过 <code>collate_fn</code> 将这些样本组合成批次。</li></ul></li><li><p><strong>多进程模式</strong> (<code>num_workers &gt; 0</code>):</p><ul><li>当 <code>num_workers</code> 大于 0 时，<code>DataLoader</code> 会启动多个子进程来并行地从数据集中抽取样本。每个子进程都有自己的 Python 解释器和内存空间，因此可以独立地进行数据预处理和增强操作。</li><li>子进程通过队列将准备好的批次发送回主进程，主进程再将这些批次提供给用户代码。</li></ul></li><li><p><strong>批处理和打乱顺序</strong>:</p><ul><li>如果设置了 <code>batch_size</code> 参数，则每次迭代都会返回一个包含多个样本的批次。</li><li>如果设置了 <code>shuffle=True</code>，则在每个 epoch 开始前会对数据集进行随机打乱，确保不同 epoch 之间的训练数据顺序不同。</li></ul></li><li><p><strong>停止条件</strong>:</p><ul><li>当所有可用的数据都被遍历完毕后，迭代器会抛出 <code>StopIteration</code> 异常，结束当前 epoch 的迭代过程。</li></ul></li></ol><h3 id="示例代码">示例代码</h3><p>下面是一个简单的例子，展示了如何使用 <code>DataLoader</code> 和它的 <code>__iter__()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个简单的数据集类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, idx</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data[idx]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集实例</span></span><br><span class="line">data = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">dataset = SimpleDataset(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 DataLoader 实例</span></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">2</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 __iter__() 方法创建迭代器，并遍历数据</span></span><br><span class="line">iterator = <span class="built_in">iter</span>(dataloader)</span><br><span class="line"><span class="keyword">for</span> batch <span class="keyword">in</span> iterator:</span><br><span class="line">    <span class="built_in">print</span>(batch)</span><br></pre></td></tr></table></figure><p>在这个例子中，我们定义了一个简单的数据集 <code>SimpleDataset</code>，然后创建了一个 <code>DataLoader</code> 实例 <code>dataloader</code>。通过 <code>iter(dataloader)</code> 我们显式地调用了 <code>__iter__()</code> 方法来获得一个迭代器对象，最后通过 <code>for</code> 循环遍历了所有的批次数据。</p><h3 id="总结">总结</h3><p><code>DataLoader</code> 的 <code>__iter__()</code> 方法是其实现迭代功能的核心部分，它根据配置选项（如 <code>num_workers</code>、<code>batch_size</code> 和 <code>shuffle</code>）动态地管理数据的加载和批处理过程。理解这一机制有助于更好地利用 <code>DataLoader</code> 进行高效的模型训练和评估。</p><ul><li><code>_next_batch_data</code> 方法是 <code>DataLoader</code> 内部的一个私有方法，它的作用是获取下一个批次的数据。这个方法通常不会被直接调用，因为它是 <code>DataLoader</code> 迭代器的一部分。当你使用 <code>iter(dataloader)</code> 将 <code>DataLoader</code> 对象转换为迭代器后，可以通过 <code>next(iterator)</code> 来获取下一个批次的数据 。</li></ul><p>当你创建了一个 <code>DataLoader</code> 实例并迭代它时，比如使用 <code>for</code> 循环或者 <code>next()</code> 函数，<code>_next_batch_data</code> 方法会被调用来获取数据。这个方法会处理以下几个步骤：</p><ol><li>从 <code>sampler</code> 获取下一个批次的索引。</li><li>使用这些索引从 <code>Dataset</code> 中获取对应的数据项。</li><li>如果提供了 <code>collate_fn</code>，则使用它来合并这些数据项成一个批次；如果没有提供，则使用默认的合并方式。</li></ol><p>例如，如果你有一个 <code>DataLoader</code> 实例 <code>dataloader</code>，你可以这样做：</p><h2 id="使用next-函数获取下一个批次的数据">使用next()函数获取下一个批次的数据</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader, Dataset</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDataset</span>(<span class="title class_ inherited__">Dataset</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据集实例</span></span><br><span class="line">dataset = MyDataset(data=[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)])</span><br><span class="line"><span class="comment"># 创建DataLoader实例</span></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">3</span>, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将DataLoader转换为迭代器</span></span><br><span class="line">iterator = <span class="built_in">iter</span>(dataloader)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用next()函数获取下一个批次的数据</span></span><br><span class="line">batch_data = <span class="built_in">next</span>(iterator)</span><br><span class="line"><span class="built_in">print</span>(batch_data)</span><br></pre></td></tr></table></figure><p>在这个例子中，<code>next(iterator)</code> 会调用 <code>DataLoader</code> 的 <code>_next_batch_data</code> 方法来获取下一个批次的数据。如果迭代器中没有更多的数据，<code>next()</code> 函数会抛出 <code>StopIteration</code> 异常 。</p><h2 id="使用for循环遍历DataLoader中的所有批次">使用for循环遍历DataLoader中的所有批次</h2><p>通常，我们使用 <code>for</code> 循环来遍历 <code>DataLoader</code> 中的所有批次，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> batch_data <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="comment"># 处理每个批次的数据</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在这种情况下，不需要显式调用 <code>iter()</code> 或 <code>next()</code>，因为 <code>for</code> 循环会自动处理这些操作 。</p><h2 id="collate-fn-自定义数据合并逻辑">collate_fn   自定义数据合并逻辑</h2><p><code>collate_fn</code> 是一个可自定义的函数，它允许你指定如何将多个数据样本合并成一个批次。这在处理不同长度的序列或者需要特殊预处理的数据时非常有用。如果你的数据需要特殊的处理，比如填充、排序或者其他复杂的操作，你可以自定义 <code>collate_fn</code>。</p><p>下面是一个使用 <code>collate_fn</code> 的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">collate_fn</span>(<span class="params">batch</span>):</span><br><span class="line">    <span class="comment"># 假设 batch 是一个列表，其中包含了多个数据样本</span></span><br><span class="line">    <span class="comment"># 每个数据样本都是一个元组，包含了数据和标签</span></span><br><span class="line">    inputs, targets = <span class="built_in">zip</span>(*batch)</span><br><span class="line">    <span class="comment"># 这里可以添加任何需要的预处理步骤</span></span><br><span class="line">    inputs = torch.stack(inputs)</span><br><span class="line">    targets = torch.tensor(targets)</span><br><span class="line">    <span class="keyword">return</span> inputs, targets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 DataLoader 实例时，传入 collate_fn</span></span><br><span class="line">dataloader = DataLoader(dataset, batch_size=<span class="number">32</span>, collate_fn=collate_fn)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代 DataLoader</span></span><br><span class="line"><span class="keyword">for</span> inputs, targets <span class="keyword">in</span> dataloader:</span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>collate_fn</code> 接受一个批次的数据样本列表，然后使用 <code>zip</code> 来分离数据和标签，接着对数据进行必要的预处理，最后返回处理后的批次数据。</p><h2 id="总结-2">总结</h2><p>总结来说，<code>_next_batch_data</code> 是 PyTorch 内部处理数据批次的方法，而 <code>collate_fn</code> 是一个可以让你自定义数据合并逻辑的钩子。如果你不需要特殊的数据预处理，你可以不提供 <code>collate_fn</code>，让 <code>DataLoader</code> 使用默认的合并方式。如果你需要特殊的预处理，那么你应该提供一个 <code>collate_fn</code>。</p><p>以下是这个过程的简化视图：</p><ol><li><code>DataLoader</code> 的迭代器调用 <code>_next_batch_data</code> 方法来获取下一个批次的数据。</li><li><code>_next_batch_data</code> 方法通过 <code>sampler</code> 获取一批数据的索引。</li><li>根据这些索引，从 <code>Dataset</code> 中检索出相应的数据项。</li><li>如果提供了 <code>collate_fn</code>，则 <code>_next_batch_data</code> 方法会将这批数据项传递给 <code>collate_fn</code>。</li><li><code>collate_fn</code> 函数处理这批数据，执行必要的预处理，比如填充、堆叠等。</li><li><code>collate_fn</code> 返回处理后的批次数据，<code>_next_batch_data</code> 方法将这个批次数据返回给迭代器。</li><li>迭代器将处理后的批次数据提供给用户，用户可以在训练循环中使用这些数据。</li></ol><p>如果你没有提供 <code>collate_fn</code>，则 <code>DataLoader</code> 会使用默认的合并函数，它简单地将数据堆叠成批次。自定义 <code>collate_fn</code> 允许你在数据进入模型之前对数据进行更复杂的处理。</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python,pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对推荐系统中embedding的一些认识和理解</title>
      <link href="/posts/20240807205512-21ca7d78.html"/>
      <url>/posts/20240807205512-21ca7d78.html</url>
      
        <content type="html"><![CDATA[<h1 id="对推荐系统中embedding的一些认识和理解">对推荐系统中embedding的一些认识和理解</h1><ul><li>有待于进一步思考完善</li></ul><h2 id="1-什么是embedding">1. 什么是embedding</h2><p>embedding是一种将高维数据映射到低维空间的技术，它是一种将离散数据转换为连续向量的方法。在推荐系统中，embedding主要用于将用户和物品映射到低维空间，以便于计算用户和物品之间的相似度。</p><p>利用embedding做匹配，从精确匹配转化为模糊查找，</p><h1 id="一些问题">一些问题</h1><h2 id="1-user和item的embedding有什么含义，用户的embedding是不是用户的兴趣向量，">1. user和item的embedding有什么含义，用户的embedding是不是用户的兴趣向量，</h2><p>在推荐系统中，用户（user）和物品（item）的嵌入（embedding）通常是指将用户和物品映射到低维空间的向量表示。这些嵌入向量捕捉了用户和物品的各种潜在特征和属性，使得推荐系统能够更有效地进行匹配和预测。</p><h3 id="用户嵌入的含义：">用户嵌入的含义：</h3><ol><li><p><strong>兴趣向量</strong>：用户的嵌入向量确实可以被视为用户兴趣的表示。它通过用户的历史行为（如购买、评分、浏览等）学习得到，反映了用户偏好的物品类型、品牌、主题等。</p></li><li><p><strong>个性化特征</strong>：嵌入向量包含了用户的个性化特征，如年龄段、性别、地理位置等，如果这些信息被用于训练过程。</p></li><li><p><strong>行为模式</strong>：嵌入向量还可以反映用户的行为模式，例如购买频率、活跃时间等。</p></li><li><p><strong>隐含因素</strong>：在矩阵分解或深度学习方法中，用户嵌入可能捕捉到难以直接观察的隐含因素，如用户的情绪状态或生活方式。</p></li></ol><h3 id="物品嵌入的含义：">物品嵌入的含义：</h3><ol><li><p><strong>属性向量</strong>：物品嵌入向量包含了物品的属性，如类别、品牌、价格、颜色等。</p></li><li><p><strong>内容特征</strong>：如果物品有文本描述、图像或视频内容，嵌入向量可以包含从这些内容中提取的特征。</p></li><li><p><strong>流行度</strong>：物品的嵌入向量可能反映其在用户群体中的流行度或热度。</p></li><li><p><strong>隐含属性</strong>：类似于用户嵌入，物品嵌入也可以捕捉一些不易观察的属性，如物品之间的相似性或替代关系。</p></li></ol><h2 id="2-嵌入向量的生成步骤和应用：">2. 嵌入向量的生成步骤和应用：</h2><ul><li><h2 id="嵌入向量的生成步骤">嵌入向量的生成步骤</h2></li></ul><ol><li><strong>数据收集</strong>：收集用户的行为数据和物品的属性数据。</li><li><strong>特征工程</strong>：从原始数据中提取有用的特征，可能包括用户和物品的属性、交互行为等。</li><li><strong>模型训练</strong>：使用推荐系统算法（如矩阵分解、深度学习模型等）来学习嵌入向量。</li><li><strong>优化</strong>：通过调整模型参数和超参数来优化嵌入向量的质量，以提高推荐的准确性和相关性。</li><li><strong>评估</strong>：评估嵌入向量的质量，通常通过推荐系统的性能指标，如精确度、召回率或AUC等。</li></ol><ul><li><h2 id="嵌入向量的应用：">嵌入向量的应用：</h2></li></ul><ol><li><strong>相似性匹配</strong>：使用嵌入向量计算用户和物品之间的相似性，以推荐相似物品。</li><li><strong>个性化推荐</strong>：利用用户嵌入向量来进行个性化推荐。</li><li><strong>聚类分析</strong>：对嵌入向量进行聚类，以发现用户群体或物品类别。</li><li><strong>可视化</strong>：将嵌入向量降维后进行可视化，以直观展示用户和物品的关系。</li></ol><p>用户和物品的嵌入向量是推荐系统的核心组件，它们为系统提供了一种有效的方式来表示和处理复杂的用户偏好和物品特征。</p><h2 id="3-通常得到embedding的方法有哪些">3. 通常得到embedding的方法有哪些</h2><p>embedding的训练主要有以下几种方法：</p><ul><li>离线训练：通过大规模数据集训练embedding，得到用户和物品的表示。</li><li>在线训练：通过在线学习的方式，实时更新embedding。</li></ul><p>获得用户（user）和物品（item）的嵌入向量是推荐系统中的一个核心任务。以下是一些常见的方法以及它们的具体步骤：</p><h3 id="1-矩阵分解（Matrix-Factorization）">1. 矩阵分解（Matrix Factorization）</h3><ul><li><strong>目标</strong>: 通过分解用户-物品评分矩阵来学习低维嵌入向量。</li><li><strong>步骤</strong>:<ul><li>初始化用户和物品的嵌入向量。</li><li>通过最小化重建误差来优化嵌入向量，通常使用平方损失或对数损失。</li><li>应用正则化来防止过拟合。</li></ul></li></ul><h3 id="2-协同过滤（Collaborative-Filtering）">2. 协同过滤（Collaborative Filtering）</h3><ul><li><strong>目标</strong>: 利用用户之间的相似性或物品之间的相似性来推荐物品。</li><li><strong>步骤</strong>:<ul><li>计算用户或物品之间的相似性。</li><li>使用相似性来加权用户或物品的历史行为，生成嵌入向量。</li><li>可以结合用户和物品的嵌入向量来预测缺失的评分。</li></ul></li></ul><h3 id="3-基于内容的推荐（Content-based-Recommendation）">3. 基于内容的推荐（Content-based Recommendation）</h3><ul><li><strong>目标</strong>: 根据用户的历史偏好和物品的属性来推荐相似的物品。</li><li><strong>步骤</strong>:<ul><li>提取用户和物品的特征，如文本、类别、标签等。</li><li>使用特征向量通过机器学习模型学习嵌入向量。</li><li>结合用户和物品的嵌入向量来预测用户对物品的兴趣。</li></ul></li></ul><h3 id="4-深度学习方法（Deep-Learning-Approaches）">4. 深度学习方法（Deep Learning Approaches）</h3><ul><li><strong>目标</strong>: 使用神经网络来学习复杂的嵌入表示。</li><li><strong>步骤</strong>:<ul><li>选择合适的神经网络架构，如CNN、RNN、LSTM或Transformer。</li><li>输入用户的历史行为序列或物品的属性。</li><li>训练网络以学习嵌入向量。</li></ul></li></ul><h3 id="5-序列模型（Sequential-Models）">5. 序列模型（Sequential Models）</h3><ul><li><strong>目标</strong>: 学习用户行为序列中的时序信息。</li><li><strong>步骤</strong>:<ul><li>使用RNN、LSTM或GRU等序列模型处理用户的行为序列。</li><li>通过模型的隐藏状态来获取用户的嵌入向量。</li><li>结合物品的嵌入向量来预测用户的兴趣。</li></ul></li></ul><h3 id="6-注意力机制（Attention-Mechanisms）">6. 注意力机制（Attention Mechanisms）</h3><ul><li><strong>目标</strong>: 使模型能够关注用户行为序列中更重要的部分。</li><li><strong>步骤</strong>:<ul><li>使用带有注意力机制的模型，如Transformer或自注意力网络。</li><li>学习在不同时间步对用户行为的不同关注度。</li><li>生成综合了注意力权重的用户嵌入向量。</li></ul></li></ul><h3 id="7-图神经网络（Graph-Neural-Networks）">7. 图神经网络（Graph Neural Networks）</h3><ul><li><strong>目标</strong>: 在图结构数据中学习嵌入向量。</li><li><strong>步骤</strong>:<ul><li>构建用户和物品的图表示，其中节点表示用户或物品，边表示交互。</li><li>使用图卷积网络（GCN）或图注意力网络（GAT）等图神经网络模型学习嵌入向量。</li></ul></li></ul><h3 id="8-强化学习（Reinforcement-Learning）">8. 强化学习（Reinforcement Learning）</h3><ul><li><strong>目标</strong>: 通过与环境的交互来学习最优的嵌入向量。</li><li><strong>步骤</strong>:<ul><li>定义推荐策略和奖励函数。</li><li>使用强化学习算法，如Q-learning或策略梯度方法，来优化嵌入向量。</li><li>通过不断试错来提高推荐的准确性。</li></ul></li></ul><h3 id="9-预训练模型（Pre-trained-Models）">9. 预训练模型（Pre-trained Models）</h3><ul><li><strong>目标</strong>: 利用预训练的语言模型来学习文本数据的嵌入表示。</li><li><strong>步骤</strong>:<ul><li>使用BERT、GPT等预训练模型来处理用户和物品的文本信息。</li><li>微调模型以适应特定的推荐任务。</li></ul></li></ul><h3 id="10-端到端训练（End-to-End-Training）">10. 端到端训练（End-to-End Training）</h3><ul><li><strong>目标</strong>: 直接在推荐任务上训练模型，同时学习嵌入向量。</li><li><strong>步骤</strong>:<ul><li>定义损失函数，如交叉熵损失或均方根误差。</li><li>使用梯度下降和反向传播算法来优化模型参数，包括嵌入向量。</li></ul></li></ul><p>在实际应用中，这些方法可以单独使用，也可以组合使用，以达到更好的推荐效果。嵌入向量的质量和模型的性能密切相关，因此选择合适的方法和调整模型参数是至关重要的。</p><h2 id="4-embedding的优缺点">4. embedding的优缺点</h2><p>在推荐算法中使用嵌入（embedding）范式是一种流行的技术，它通过将用户和物品映射到低维向量空间来捕捉它们的特征和潜在关系。以下是使用嵌入范式的优点和缺点：</p><h3 id="优点：">优点：</h3><ol><li><p><strong>降维</strong>: 嵌入可以将高维数据（如用户特征或物品属性）映射到低维空间，简化模型复杂度。</p></li><li><p><strong>捕捉潜在因素</strong>: 嵌入能够学习到数据中的隐含模式和潜在因素，这些因素可能不容易直接从原始数据中观察到。</p></li><li><p><strong>提高泛化能力</strong>: 通过学习泛化的特征表示，嵌入有助于提高模型对新用户或新物品的推荐性能。</p></li><li><p><strong>易于计算相似性</strong>: 嵌入向量使得计算用户与物品之间的相似性变得简单，通常只需计算向量之间的点积或余弦相似度。</p></li><li><p><strong>灵活性</strong>: 嵌入可以与多种模型架构结合使用，如矩阵分解、深度学习、图神经网络等。</p></li><li><p><strong>处理稀疏数据</strong>: 在许多推荐系统中，用户-物品交互矩阵通常是稀疏的。嵌入能够有效地处理这种稀疏性，通过隐式特征学习来弥补缺失数据。</p></li><li><p><strong>增强模型表达能力</strong>: 嵌入使得模型能够捕捉更复杂的用户偏好和物品属性，从而提高推荐的准确性和多样性。</p></li></ol><h3 id="缺点：">缺点：</h3><ol><li><p><strong>计算成本</strong>: 训练嵌入向量可能需要大量的计算资源，特别是在处理大规模数据集时。</p></li><li><p><strong>过拟合风险</strong>: 如果嵌入维度设置得过高或正则化不足，模型可能会过拟合训练数据。</p></li><li><p><strong>冷启动问题</strong>: 对于没有足够历史数据的新用户或新物品，嵌入向量可能无法准确捕捉它们的特征，导致推荐效果不佳。</p></li><li><p><strong>解释性差</strong>: 嵌入向量通常是高维空间中的连续点，这使得它们的解释性不如基于规则的模型直观。</p></li><li><p><strong>维度选择</strong>: 选择合适的嵌入维度可能需要经验和实验，过大或过小的维度都可能影响模型性能。</p></li><li><p><strong>更新困难</strong>: 一旦嵌入向量被学习，更新它们以反映用户或物品的最新特征可能具有挑战性，尤其是在动态变化的数据环境中。</p></li><li><p><strong>依赖高质量数据</strong>: 嵌入的质量高度依赖于输入数据的质量和多样性。如果数据存在偏差或不完整，嵌入向量可能无法准确反映用户或物品的特征。</p></li><li><p><strong>可能忽略上下文</strong>: 某些嵌入方法可能无法充分考虑用户与物品交互的上下文信息，如时间、地点或情境因素。</p></li></ol><p>总的来说，嵌入范式在推荐系统中提供了一种强大的工具来捕捉和建模用户偏好和物品特征，但同时也需要注意其潜在的局限性，并在实际应用中进行适当的调整和优化。</p><h1 id="reference">reference</h1><ol><li><a href="https://kimi.moonshot.cn/">https://kimi.moonshot.cn/</a></li><li><a href="https://zhuanlan.zhihu.com/p/320196402">无中生有：论推荐算法中的Embedding思想 - 知乎 (zhihu.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> embedding,推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习中一些设置的理解</title>
      <link href="/posts/20240728231040-6638e649.html"/>
      <url>/posts/20240728231040-6638e649.html</url>
      
        <content type="html"><![CDATA[<h1 id="深度学习中一些设置的理解">深度学习中一些设置的理解</h1><h2 id="1-batch-size-为什么要设置batch-size">1.  batch_size:   为什么要设置batch_size</h2><blockquote><p>batch_size=1单个样本训练计算loss形象的说就是你让野人（模型）学习辨别猫狗，但是你每次只给他看一张图（仅一种形态的猫或狗），这样会有2个不可避免的问题：</p><ol><li>梯度更新不稳定：就算前后两次都给dog图片，但两种品种的dog特征可能差距巨大，这时候需要更新权重（野人会困惑）的方向差异很大（就是梯度的方差大），更新会不稳定，且如果数据集没有经过清洗，很可能会朝错误的方向学习，最后导致训练震荡。相反，如果使用较大的 batch_size，梯度更新会更加平滑和稳定，模型能够更好地学到数据的总体分布特征；</li><li>计算效率问题：batch的话可以多多利用GPU的并行计算能力嘛。另外大batch也可以更快训练完成，收敛快。</li></ol><p>看了上面可能会觉得是不是直接每次更新都把全部训了就好了，没错 [脱单doge]这样训练集是可以很快学好，但是这会导致另外一个问题→过拟合，这意味着模型在训练集上看起来很牛，但在未知数据上表现较差，因为它只是记住了训练集的具体样本特征，而没有学到数据的泛化特征（类似你把猫狗就分别摆在野人左右两边 让他学什么是猫什么是狗，你随便拿起一个问他说这是猫还是狗？他全部答对 acc=100%，那么[奥比岛_点赞]他有可能只是记住了左猫右狗），你拿新的猫狗测试集来问他，他就分辨不出来了，这就是过拟合了没有泛化能力。<br>综上，一般我们会选择合适的batchsize去训练，（但其实大数据集全跑 gpu也训不了。），我们工业上给现场用的话，统一告诉一个每张显卡下 不同尺寸图像的最大batch就完事了，大多数情况用了预训练模型都没啥问题，但是如果你要训练一个新的模型，还是要根据实际情况去调整batchsize，不过一般来说，batchsize=32-128是比较合适的选择。<br>–<a href="https://www.bilibili.com/video/BV134421U77t/?spm_id_from=333.1007.tianma.2-3-6.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa">B站用户</a></p></blockquote><h2 id="2-L1-正则化，为什么会降低模型复杂度">2.  L1 正则化，为什么会降低模型复杂度</h2><ul><li>参考：<a href="https://blog.mlreview.com/l1-norm-regularization-and-sparsity-explained-for-dummies-5b0e4be3938a">L1-norm regularization and sparsity explained for dummies</a>; (<a href="https://blog.csdn.net/qq_39422642/article/details/106083366">chinese version</a>)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习原始数据编码方式总结</title>
      <link href="/posts/20240625161553-3e0c9627.html"/>
      <url>/posts/20240625161553-3e0c9627.html</url>
      
        <content type="html"><![CDATA[<p>数据编码方式</p><h2 id="one-hot">one-hot</h2><p>one-hot编码是将类别型特征转换成向量的一种编码方式。由于类别型特征不具备数值化意义，如果不进行one-hot编码，无法将其直接作为特征向量的一个维度使用。举例来说，某样本有三个特征，分别是星期、性别和城市，用[Weekday=Tuesday，Gender=Male，City=London]表示。由于模型的输入特征向量仅可以是数值型特征向量，无法把“Tuesday”这个字符串直接输入模型，需要将其数值化，最常用的方法就是将特征做one-hot 编码.<br>Weekday=Tuesday:[0,1,0,0,0,0,0]<br>Gender=Male:[0,1]<br>City=London:[0,0,1,0,…,0,0]<br>Weekday这个特征域有7个维度，Tuesday对应第2个维度，所以把对应维度置为1。Gender分为Male和Female，one-hot编码就有两个维度，City特征域同理。</p><p>虽然one-hot 编码方式可以将类别型特征转变成数值型特征向量，但是会不可避免地造成特征向量中存在大量数值为0的特征维度。这在互联网这种海量用户场景下尤为明显。假设某应用有1亿用户，那么将用户id进行one-hot编码后，将造成1亿维特征向量中仅有1维是非零的。这是造成互联网模型的输入特征向量稀疏的主要原因</p><h2 id="multi-hot">multi-hot</h2><p>对历史行为序列类、标签特征等数据来说，用户往往会与多个物品产生交互行为，或者被打上多个同类别标签，这时最常用的特征向量生成方式就是把其转换成multi-hot编码。举例来说，某电商网站共有10000 种商品，用户购买过其中的10 种，那么用户的历史行为数据就可以转换成一个10000 维的数值向量，其中仅有10个已购买商品对应的维度是1，其余维度均为0，这就是multi-hot编码。</p><h1 id="reference">reference</h1><ol><li>《深度学习推荐系统》——王喆</li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《深度学习推荐系统》——王喆</title>
      <link href="/posts/20240619110418-c232d3a1.html"/>
      <url>/posts/20240619110418-c232d3a1.html</url>
      
        <content type="html"><![CDATA[<p>书名：深度学习推荐系统<br>作者：王喆<br>出版社：电子工业出版社<br>出版时间：2020-03-01<br>ISBN：9787121384646</p><ul><li>本篇为笔者阅读该书简要总结，推荐阅读原书。</li><li>传统推荐模型烟花关系图</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240731-215947.png" alt="image-20240731215946103"></p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>协同过滤算法族</td><td>从物品相似度和用户相似度角度出发，协同过滤衍生出物品协同过滤(ItemCF)和用户协同过滤(UserCF)两种算法，再到MF</td><td></td></tr><tr><td>逻辑回归算法族</td><td>与协同过滤仅利用用户和物品之间的显式或隐式反馈信息相比，逻辑回归能够利用和融合更多用户、物品及上下文特征</td><td></td></tr><tr><td>因子分解机模型族</td><td>因子分解机在传统逻辑回归的基础上，加入了二阶部分，使模型具备了进行特征组合的能力</td><td></td></tr><tr><td>组合模型</td><td></td><td>组合模型中体现出的特征工程模型化的思想，也成了深度学习推荐模型的引子和核心思想之一</td></tr></tbody></table><ul><li>主流深度学习推荐模型演化图谱</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/06/20240619-111026.png" alt="image-20240619111026078"></p><ul><li>主要演变方向</li></ul><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>改变NN的复杂度</td><td></td><td></td></tr><tr><td>改变特征交叉方式</td><td></td><td></td></tr><tr><td>组合模型</td><td></td><td></td></tr><tr><td>FM模型的深度学习演化版本</td><td></td><td></td></tr><tr><td>注意力机制+rec</td><td></td><td></td></tr><tr><td>序列模型+rec</td><td></td><td></td></tr><tr><td>强化学习+rec</td><td></td><td></td></tr></tbody></table><p>文中形式化定义推荐系统</p><ul><li><p>推荐系统的逻辑架构</p><blockquote><p>对于用户U(user)，在特定场景C(context)下，针对海量的“物品”信息，构建一个函数f(U，I，C)，预测用户对特定候选物品I(item)的喜好程度，再根据喜好程度对所有候选物品进行排序，生成推荐列表的问题。</p></blockquote></li><li><p>推荐系统的技术架构<br>推荐系统实现，工程化；技术架构示意图如下</p><ol><li>数据和信息相关问题<ul><li>即“用户信息”“物品信息”“场景信息”分别是什么？如何存储、更新和处理</li><li>逐渐发展为推荐系统中融合了数据离线批处理、实时流处理的数据流框架</li></ul></li><li>推荐系统算法和模型相关问题<ul><li>即推荐模型如何训练、如何预测、如何达成更好的推荐效果？</li><li>“算法和模型”部分则进一步细化为推荐系统中集训练(training)、评估(evaluation)、部署(deployment)、线上推断(online inference)为一体的模型框架</li></ul></li></ol></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240731-215616.png" alt="推荐系统技术架构图-image-20240731215613263"></p><h1 id="特征工程自动化道路">特征工程自动化道路</h1><ul><li><p>GBDT+LR组合模型的提出，意味着特征工程可以完全交由一个独立的模型来完成，模型的输入可以是原始的特征向量，不必在特征工程上投入过多的人工筛选和模型设计的精力，实现真正的端到端(End to End)训练<br>深度学习模型通过各类网络结构、Embedding层等方法完成特征工程的自动化，都是GBDT+LR开启的特征工程模型化这一趋势的延续。</p></li><li><p>从目前的时间节点上看，Deep Crossing模型是平淡无奇的，因为它没有引入任何诸如注意力机制、序列模型等特殊的模型结构，只是采用了常规的“Embedding+多层神经网络”的经典深度学习结构。但从历史的尺度看，Deep Crossing模型的出现是有革命意义的。Deep Crossing模型中没有任何人工特征工程的参与，原始特征经Embedding后输入神经网络层，将全部特征交叉的任务交给模型。相比之前介绍的FM、FFM模型只具备二阶特征交叉的能力，Deep Crossing模型可以通过调整神经网络的深度进行特征之间的“深度交叉”，这也是Deep Crossing名称的由来</p></li></ul><table><thead><tr><th>年份</th><th>模型</th><th>主要思想</th><th>优点</th><th>缺点</th><th></th></tr></thead><tbody><tr><td>2014</td><td>GBDT+LR</td><td></td><td>GBDT+LR组合模型的提出，意味着特征工程可以完全交由一个独立的模型来完成，模型的输入可以是原始的特征向量，不必在特征工程上投入过多的人工筛选和模型设计的精力，实现真正的端到端(End to End)训练</td><td></td><td></td></tr><tr><td>2015</td><td>AutoRec</td><td>单隐藏层NN 推荐</td><td></td><td></td><td></td></tr><tr><td>2016</td><td>Deep Crossing</td><td>ResNet做特征交叉</td><td>相比AutoRec模型过于简单的网络结构带来的一些表达能力不强的问题，Deep Crossing模型完整地解决了从特征工程、稀疏向量稠密化、多层神经网络进行优化目标拟合等一系列深度学习在推荐系统中的应用问题，为后续的研究打下了良好的基础。</td><td></td><td></td></tr><tr><td>2017</td><td>NeuralCF</td><td>MLPS+softmax输出层替代,<br />（U ，I之间的互操作形式）</td><td></td><td>以上仅包括交互信息</td><td></td></tr><tr><td>2016</td><td>PNN</td><td>引入product Layer</td><td>加入用户、物品之外的特征向量</td><td>外积操作中的简化操作<br />对所有特征无差别交叉</td><td></td></tr><tr><td>20161</td><td>Wide&amp;Deep</td><td>Wide部分的主要作用是让模型具有较强的“记忆能力”(memorization)；<br />Deep部分的主要作用是让模型具有“泛化能力”(generalization)</td><td>不仅综合了“记忆能力”和“泛化能力”，而且开启了不同网络结构融合的新思路</td><td></td><td></td></tr><tr><td>2017</td><td>Deep&amp;Cross<br />(DCN)</td><td>使用Cross网络替代原来的Wide部分, 增加特征之间的交互力度<br />使用多层交叉层(Cross layer)对输入向量进行特征交叉</td><td>由多层交叉层组成的Cross 网络在Wide＆Deep模型中Wide部分的基础上进行特征的自动化交叉，避免了更多基于业务理解的人工特征组合</td><td></td><td>DeepFM、NFM等模型都可以看成Wide＆Deep模型的延伸。</td></tr><tr><td>2017</td><td>DeepFM</td><td>用FM代替Wide部分</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="FM路线">FM路线</h2><blockquote><p>在神经网络的参数初始化过程中，往往采用随机初始化这种不包含任何先验信息的初始化方法。由于Embedding层的输入极端稀疏化，导致Embedding层的收敛速度非常缓慢。再加上Embedding层的参数数量往往占整个神经网络参数数量的大半以上，因此***<u>模型的收敛速度往往受限于Embedding层</u>***</p></blockquote><table><thead><tr><th></th><th></th><th></th><th></th><th>缺点</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>POLY2</td><td></td><td></td><td></td></tr><tr><td>2010</td><td>FM</td><td>与POLY2相比，其主要区别是用两个向量的内积取代了单一的权重系数w</td><td>FM为每个特征学习了一个隐权重向量(latent vector)。在特征交叉时，使用两个特征隐向量的内积作为交叉特征的权重<br />FM 是将矩阵分解隐向量的思想进行了进一步扩展，从单纯的用户、物品隐向量扩展到了所有特征上。</td><td></td></tr><tr><td>2015</td><td>FFM</td><td>相比FM模型，FFM模型引入了特征域感知(field-aware)这一概念，使模型的表达能力更强</td><td></td><td>是一个二阶特征交叉的模型。受组合爆炸问题的困扰，FM 几乎不可能扩展到三阶以上，这就不可避免地限制了FM模型的表达能力</td></tr><tr><td>2016</td><td>FNN</td><td>类似于Deep Crossing,改进Embedding层<br />用FM模型训练好的各特征隐向量初始化Embedding 层的参数<br />也为另一种Embedding 层的处理方式——Embedding 预训练提供了借鉴思路</td><td>并没有对神经网络的结构进行调整</td><td></td></tr><tr><td>2017</td><td>DeepFM</td><td>用FM代替Wide部分</td><td></td><td></td></tr><tr><td>2017</td><td>NFM</td><td>在数学形式上，NFM模型的主要思路是用一个表达能力更强的函数替代原FM中二阶隐向量内积的部分</td><td>使用神经网络代替FM中二阶交叉部分<br />NN中包括特征交叉池化层<br />如果把NFM的一阶部分视为一个线性模型，那么NFM的架构也可以视为Wide＆Deep模型的进化。相比原始的Wide＆Deep模型，NFM模型对其Deep 部分加入了特征交叉池化层，加强了特征交叉。这是理解NFM模型的另一个角度</td><td>加和池化(Sum Pooling)操作，它相当于“一视同仁”地对待所有交叉特征，不考虑不同特征对结果的影响程度，事实上消解了大量有价值的信息</td></tr><tr><td>2017</td><td>AFM</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/06/20240619-120312.png" alt="NFM对FM二阶部分的改进"></p><h2 id="Wide-Deep">Wide&amp;Deep</h2><blockquote><p>Wide＆Deep模型把单输入层的Wide部分与由Embedding层和多隐层组成的Deep部分连接起来，一起输入最终的输出层。单层的Wide部分善于处理大量稀疏的id类特征；Deep部分利用神经网络表达能力强的特点，进行深层的特征交叉，挖掘藏在特征背后的数据模式。最终，利用逻辑回归模型，输出层将Wide部分和Deep部分组合起来，形成统一的模型</p></blockquote><p>Wide＆Deep模型的详细结构</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/06/20240619-113320.png" alt="image-20240619113320099"></p><h2 id="其他技术路线">其他技术路线</h2><h3 id="注意力机制">注意力机制</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>2017</td><td>AFM</td><td>NFM模型的延续；<br />加和池化(Sum Pooling)操作，它相当于“一视同仁”地对待所有交叉特征，不考虑不同特征对结果的影响程度，事实上消解了大量有价值的信息<br />AFM模型引入注意力机制是通过在特征交叉层和最终的输出层之间加入注意力网络(Attention Net)实现的，生成注意力得分</td><td>该注意力网络的结构是一个简单的单全连接层加softmax输出层的结构</td><td></td></tr><tr><td>2018</td><td>DIN</td><td>在原来的基础模型中（图3-24中的Base模型），用户特征组中的商品序列和商铺序列经过简单的平均池化操作后就进入上层神经网络进行下一步训练，序列中的商品既没有区分重要程度，也和广告特征中的商品id没有关系<br /></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>注意力机制在数学形式上只是将过去的平均操作或加和操作换成了加权和或者加权平均操作</td><td></td><td></td></tr><tr><td></td><td></td><td>从“注意力机制”开始，越来越多对深度学习模型结构的改进是基于对用户行为的深刻观察而得出的</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="序列模型">序列模型</h3><blockquote><p>在工程实现上需要注意：序列模型比较高的训练复杂度，以及在线上推断过程中的串行推断，使其在模型服务过程中延迟较大，这无疑增大了其上线的难度，需要在工程上着重优化</p></blockquote><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>2019</td><td>DIEN</td><td>创新点在于如何构建“兴趣进化网络</td><td>应用场景同DIN</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="强化学习-Rec">强化学习+Rec</h3><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>2018</td><td>DRN</td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="Embedding">Embedding</h1><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td>Embedding</td><td></td><td></td><td></td><td></td></tr><tr><td>2013</td><td>谷歌</td><td>Word2vec</td><td>Word2vec的两种模型结构CBOW和Skip-gram</td><td></td><td></td><td></td></tr><tr><td>2016</td><td>微软</td><td>Item2Vec</td><td>Item2vec与Word2vec唯一的不同在于，Item2vec摒弃了时间窗口的概念，认为序列中任意两个物品都相关，因此在Item2vec的目标函数中可以看到，其是两两物品的对数概率的和，而不仅是时间窗口内物品的对数概率之和</td><td>Item2vec方法也有其局限性，因为只能利用序列型数据，所以Item2vec在处理互联网场景下大量的网络化数据时往往显得捉襟见肘，这就是Graph Embedding技术出现的动因</td><td></td><td></td></tr><tr><td></td><td></td><td>广义Itemsvec<br />双塔模型</td><td>广义上的Item2vec模型其实是物品向量化方法的统称</td><td>Word2vec和由其衍生出的Item2vec是Embedding技术的基础性方法，但二者都是<u><strong>建立在“序列”样本（比如句子、用户行为序列）的基础上的</strong></u></td><td></td><td></td></tr><tr><td></td><td></td><td>Graph Embedding</td><td>Graph Embedding是一种对图结构中的节点进行Embedding编码的方法。最终生成的节点Embedding 向量一般包含图的结构信息及附近节点的局部相似性信息</td><td></td><td></td><td></td></tr><tr><td>2014</td><td>阿里</td><td>DeepWalk</td><td>在由物品组成的图结构上进行随机游走，产生大量物品序列，作为训练样本输入Word2vec 进行训练，得到物品的Embedding。</td><td>DeepWalk可以被看作连接序列Embedding和Graph Embedding的过渡方法</td><td></td><td></td></tr><tr><td>2016</td><td>斯坦福</td><td>Node2vec</td><td>通过调整随机游走权重的方法使Graph Embedding的结果更倾向于体现网络的同质性(homophily)或结构性(structural equivalence)</td><td>Node2vec算法中，是怎样控制BFS和DFS的倾向性的呢？主要是通过节点间的跳转概率</td><td></td><td></td></tr><tr><td>2018</td><td>阿里巴巴</td><td>EGES</td><td>在淘宝应用的Embedding方法EGES(Enhanced Graph Embedding with Side Information), 基本思想是在DeepWalk生成的Graph Embedding基础上引入补充信息。<br />注意力权重embedding加权求和</td><td>物品冷启动问题，通过引入更多补充信息(side information)来丰富Embedding信息的来源，从而使没有历史行为记录的商品获得较合理的初始Embedding</td><td></td><td></td></tr><tr><td></td><td></td><td>LINE</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td>SDNE</td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="Embedding与深度学习推荐系统的结合">Embedding与深度学习推荐系统的结合</h2><p>(1)在深度学习网络中作为Embedding层，完成从高维稀疏特征向量到低维稠密特征向量的转换。</p><p>(2)作为预训练的Embedding特征向量，与其他特征向量连接后，一同输入深度学习网络进行训练。</p><p>(3)通过计算用户和物品的Embedding相似度，Embedding可以直接作为推荐系统的召回层或者召回策略之一。</p><h3 id="1-作为Embedding层">1, 作为Embedding层</h3><p>embedding 层与整个深度学习网络整合后一同进行训练是理论上最优的选择，因为上层梯度可以直接反向传播到输入层，模型整体是自洽的。但这样做的缺点是显而易见的，Embedding 层输入向量的维度往往很大，导致整个Embedding层的参数数量巨大，因此Embedding层的加入会拖慢整个神经网络的收敛速度（3.7节的基础知识中曾详细论证过这一点）</p><p>很多工程上要求快速更新的深度学习推荐系统放弃了Embedding层的端到端训练，用预训练Embedding层的方式替代。</p><h3 id="2，Embedding作为推荐系统召回层">2，Embedding作为推荐系统召回层</h3><h3 id="局部敏感哈希">局部敏感哈希</h3><ul><li><p>传统的Embedding相似度的计算方法是Embedding向量间的内积运算，这就意味着为了筛选某个用户的候选物品，需要对候选集合中的所有物品进行遍历。在k维的Embedding空间中，物品总数为n，那么遍历计算用户和物品向量相似度的时间复杂度是O(kn)</p></li><li><p>通过建立kd(k-dimension)树索引结构进行最近邻搜索是常用的快速最近邻搜索方法，时间复杂度可以降低到O(log2n)。一方面，kd树的结构较复杂，而且在进行最近邻搜索时往往还要进行回溯，确保最近邻的结果，导致搜索过程较复杂；另一方面，O(log2n)的时间复杂度并不是完全理想的状</p></li><li></li><li><p>推荐系统工程实践上主流的快速Embedding 向量最近邻搜索方法——局部敏感哈希(Locality Sensitive Hashing，LSH)[12]。</p></li></ul><blockquote><p>局部敏感哈希的基本思想是让相邻的点落入同一个“桶”，这样在进行最近邻搜索时，仅需要在一个桶内，或相邻的几个桶内的元素中进行搜索即可。如果保持每个桶中的元素个数在一个常数附近，就可以把最近邻搜索的时间复杂度降低到常数级别</p></blockquote><h1 id="多角度审视推荐系统">多角度审视推荐系统</h1><p>推荐模型只是推荐系统的一部分，除此之外，还有很多考虑的问题</p><blockquote><p>(1)推荐系统如何选取和处理特征？</p><p>(2)推荐系统召回层的主要策略有哪些？</p><p>(3)推荐系统实时性的重要性体现在哪儿？有哪些提高实时性的方法？</p><p>(4)如何根据具体场景构建推荐模型的优化目标？</p><p>(5)如何基于用户动机改进模型结构？</p><p>(6)推荐系统冷启动问题的解决方法有哪些？</p><p>(7)什么是“探索与利用”问题？有哪些主流的解决方法？</p><ul><li><p>还有</p><blockquote><p>可解释性</p></blockquote></li></ul></blockquote><table><thead><tr><th>perspective</th><th></th><th></th><th></th><th>常用的</th><th></th></tr></thead><tbody><tr><td>特征工程</td><td>从具体的行为转化成抽象的特征</td><td>信息损失，（有用或者冗余的）<br />无法手机或存储；过拟合</td><td>置身处地</td><td></td><td>特征工程与模型结构统一思考、整体建模的深度学习模式</td></tr><tr><td>召回</td><td></td><td>设计召回层时，“计算速度”和“召回率”其实是矛盾的两个指标</td><td>多路召回（业务强相关）<br />基于Embedding召回</td><td>多路召回中使用“兴趣标签”“热门度”“流行趋势”“物品属性”等信息都可以作为Embedding召回方法中的附加信息(side information)融合进最终的Embedding向量中</td><td>多路召回中使用“兴趣标签”“热门度”“流行趋势”“物品属性”等信息都可以作为Embedding召回方法中的附加信息(side information)融合进最终的Embedding向量中</td></tr><tr><td>实时性</td><td></td><td>推荐系统特征的实时性指的是“实时”地收集和更新推荐模型的输入特征，使推荐系统总能使用最新的特征进行预测和推荐<br />各种实时数据处理架构</td><td></td><td>模型的实时性则是希望更快地抓住全局层面的新数据模式，发现新的趋势和相关性<br />模型的实时性由弱到强的训练方式分别是全量更新、增量更新和在线学习(Online Learning)</td><td></td></tr><tr><td>系统优化目标</td><td></td><td>YouTube以观看时长为优化目标</td><td></td><td>为了达到同时优化CTR和CVR模型的目的，阿里巴巴提出了多目标优化模型ESMM(Entire Space Multi-task Model)[4]。ESMM可以被当作一个同时模拟“曝光到点击”和“点击到转化”两个阶段的模型。</td><td>优化目标”这个话题，笔者想强调的第三点不是技术型问题，而是团队合作的问题</td></tr><tr><td>从用户的角度思考问题</td><td></td><td>相比这些技术原因，</td><td></td><td>在构建推荐模型的过程中，从应用场景出发，基于用户行为和数据的特点，提出合理的改进模型的动机才是最重要的。</td><td></td></tr><tr><td>冷启动</td><td></td><td>“探索与利用”机制</td><td></td><td></td><td></td></tr><tr><td>探索与利用</td><td></td><td></td><td></td><td>探索与利用思想是所有推荐系统不可或缺的补充。相比推荐模型的优化目标——利用已有数据做到现有条件下的利益最大化，探索与利用的思想实际上是着眼于未来的，着眼于用户的长期兴趣和公司的长期利益</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="推荐系统的工程实现">推荐系统的工程实现</h1><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>数据流</td><td></td><td></td><td></td><td></td></tr><tr><td>训练</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>部署</td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="推荐系统评估">推荐系统评估</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240701-163114.png" alt="image-20240701163113014"></p><ul><li></li></ul><h2 id="一般离线评估方法">一般离线评估方法</h2><table><thead><tr><th>点击率预估评估</th><th></th><th>推荐序列评估</th><th></th><th></th></tr></thead><tbody><tr><td>P</td><td></td><td>P-R</td><td>P-R 曲线的横轴是召回率，纵轴是精确率</td><td>同P-R 曲线一样，ROC 曲线也是通过不断移动模型正样本阈值生成的</td></tr><tr><td>R</td><td>精确率(Precision)是分类正确的正样本个数占分类器判定为正样本的样本个数的比例，召回率(Recall)是分类正确的正样本个数占真正的正样本个数的比例</td><td>P-R<br />AUC</td><td>AUC 指的是P-R 曲线下的面积大小，因此计算AUC值只需要沿着P-R曲线横轴做积分。AUC越大，排序模型的性能越好</td><td></td></tr><tr><td>F1</td><td>采用Top N排序结果的精确率(Precision@N)和召回率(Recall@N)来衡量排序模型的性能，即认为模型排序的To p N的结果就是模型判定的正样本，然后计算Precision@N和Recall@N</td><td>ROC</td><td>ROC曲线的横坐标为False Positive Rate（FPR，假阳性率）；纵坐标为True Positive Rate（TPR，真阳性率</td><td>ROC 的纵坐标就是召回率；</td></tr><tr><td>RMSE</td><td>均方根误差</td><td>ROC<br />AUC</td><td>同P-R曲线一样，可以计算出ROC曲线的AUC，并用AUC评估推荐系统排序模型的优劣</td><td></td></tr><tr><td>MAPE</td><td>相比RMSE，MAPE相当于把每个点的误差进行了归一化，降低了个别离群点带来的绝对误差的影响</td><td>AP</td><td>AP的计算只取正样本处的precision进行平均</td><td></td></tr><tr><td>LogLoss</td><td>LogLoss就是逻辑回归的损失函数</td><td>mAP</td><td>平均精度均值(mean Average Precision，mAP):   是对平均精度(Average Precision，AP)的再次平均</td><td>推荐系统对测试集中的每个用户都进行样本排序，那么每个用户都会计算出一个AP值，再对所有用户的AP值进行平均，就得到了mAP</td></tr><tr><td></td><td></td><td>NDCG</td><td></td><td></td></tr><tr><td></td><td></td><td>Hit</td><td></td><td></td></tr><tr><td></td><td></td><td>覆盖率</td><td></td><td></td></tr><tr><td></td><td></td><td>多样性</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>离线评估的目的在于快速定位问题，快速排除不可行的思路，为线上评估找到“靠谱”的候选者</p><h2 id="更接近线上环境的离线评估方法——Replay">更接近线上环境的离线评估方法——Replay</h2><ul><li>动态离线评估方法先根据样本产生时间对测试样本由早到晚进行排序，再用模型根据样本时间依次进行预测。在模型更新的时间点上，模型需要增量学习更新时间点前的测试样本，更新后继续进行后续的评估</li><li></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240701-114509.png" alt="image-20240701114507612"></p><h2 id="A-B测试">A/B测试</h2><p>A/B 测试又称为“分流测试”或“分桶测试”，是一个随机实验，通常被分为实验组和对照组。在利用控制变量法保持单一变量的前提下，将A、B两组数据进行对比，得出实验结</p><ul><li><p>谷歌关于其实验平台的论文Overlapping Experiment Infrastructure：More，Better，Faster Experimentation[2]详细地介绍了实验流量分层和分流的机制，它保证了宝贵的线上测试流量的高可用性。</p></li><li><p>A/B测试分层和分流的机制</p><blockquote><p>(1)层与层之间的流量“正交”。<br>层与层之间的流量“正交”的具体含义为：层与层之间的独立实验的流量是正交的，即实验中每组的流量穿越该层后，都会被再次随机打散，且均匀地分布在下层实验的每个实验组中</p><p>(2)同层之间的流量“互斥”</p></blockquote></li><li><p>线上A/B测试的评估指标</p></li></ul><h2 id="快速线上评估方法——Interleaving">快速线上评估方法——Interleaving</h2><p>2013</p><p>矛盾——算法工程师日益增长的A/B测试需求和线上A/B测试资源严重不足之间的矛盾。</p><ul><li><p>这种不区分A/B组，而是把不同的被测对象同时提供给受试者，最后根据受试者喜好得出评估结果的方法就是Interleaving方法。</p><blockquote><p>而在Interleaving 方法中，只有一组订阅用户，这些订阅用户会收到通过混合算法A和B的排名生成的交替排名。这就使得用户可以在一行里同时看到算法A 和B的推荐结果（用户无法区分一个物品是由算法A推荐的还是由算法B推荐的），进而通过计算观看时长等指标来衡量到底是算法A的效果好还是算法B的效果好</p></blockquote></li><li></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240701-163114.png" alt="image-20240701163113014"></p><h1 id="深度学习推荐系统——前沿实践">深度学习推荐系统——前沿实践</h1><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td><strong>Facebook</strong></td><td></td><td></td><td></td></tr><tr><td>2014</td><td>GBDT+LR</td><td></td><td></td><td></td></tr><tr><td>2019</td><td>DLRM(Deep Learning Recommender Model)</td><td>DLRM 融合使用了模型并行和数据并行的方法Embedding部分采用模型并行, MLP 部分采用数据并行</td><td></td><td></td></tr><tr><td></td><td><strong>Google</strong></td><td></td><td></td><td></td></tr><tr><td>2017</td><td>DCN</td><td></td><td></td><td></td></tr><tr><td></td><td><strong>Airbnb</strong></td><td></td><td></td><td></td></tr><tr><td>2018</td><td>Real-time Personalization using Embeddings for Search Ranking at Airbnb(KDD2018 best paper)</td><td>session内短期兴趣embedding，和长期兴趣embedding</td><td></td><td></td></tr><tr><td></td><td><strong>YouTube</strong></td><td></td><td></td><td></td></tr><tr><td>2016</td><td>Deep Neural Networks for YouTube Recommenders</td><td>召回+排序</td><td></td><td></td></tr><tr><td></td><td>阿里巴巴</td><td></td><td></td><td></td></tr><tr><td>2017</td><td>LS-PLM</td><td></td><td></td><td></td></tr><tr><td>2018</td><td>DIN</td><td>利用注意力机制替换基础模型的Sum Pooling操作，根据候选广告和用户历史行为之间的关系确定每个历史行为的权重</td><td>基于经典的Embedding+MLP 深度学习模型架构，将用户行为历史的Embedding简单地通过加和池化操作叠加，再与其他用户特征、广告特征、场景特征连接后输入上层神经网络进行训练</td><td></td></tr><tr><td>2018</td><td>多目标优化模型ESMM(Entire Space Multi-task Model)</td><td></td><td></td><td></td></tr><tr><td>2019.7</td><td>DIEN</td><td>在DIN的基础上，进一步改进对用户行为历史的建模，使用序列模型在用户行为历史之上抽取用户兴趣并模拟用户兴趣的演化过程</td><td></td><td></td></tr><tr><td>2019</td><td>Multi-channel user Interest Memory Network，MIMN</td><td>在DIEN的基础上，将用户的兴趣细分为不同兴趣通道，进一步模拟用户在不同兴趣通道上的演化过程，生成不同兴趣通道的记忆向量，再利用注意力机制作用于多层神经网络</td><td></td><td></td></tr></tbody></table><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240702-095325.png" alt="image-20240702095323565"></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240702-095705.png" alt="image-20240702095705251"></p><h1 id="推荐系统知识框架">推荐系统知识框架</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240702-100702.png" alt="image-20240702100701612"></p><ul><li></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240702-102700.png" alt="image-20240702102659849"></p><ul><li>《图计算与推荐系统》——刘宇</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/07/20240708-172036.png" alt="image-20240708172034905"></p><h1 id="reference">reference</h1><ol><li>《深度学习推荐系统》——王喆</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐系统 </tag>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>似然函数</title>
      <link href="/posts/20240418163545-fbf175a6.html"/>
      <url>/posts/20240418163545-fbf175a6.html</url>
      
        <content type="html"><![CDATA[<h1 id="似然函数">似然函数</h1><p>似然函数是<strong>一种在统计推断中用于参数估计的函数</strong>，它表示在给定参数下观测数据出现的概率。</p><p>似然函数通常定义为<strong>给定参数θ时观测数据x出现的概率</strong>，即L(θ|x) = P(X=x|θ)。在统计学中，似然函数是关于统计模型参数的函数，它可以帮助我们了解在特定参数值下观测到当前数据集的可能性。似然函数的具体定义取决于随机变量的性质：</p><ul><li><strong>离散型随机变量</strong>：如果研究的随机变量是离散型的，那么似然函数就是所有观测值概率的乘积。例如，如果我们有一个离散型随机变量Y的样本y₁， y₂， …, yₙ，那么似然函数L(θ|y₁， y₂， …, yₙ)就是这些观测值各自概率的乘积。</li><li><strong>连续型随机变量</strong>：对于连续型随机变量，似然函数是所有观测值概率密度函数的乘积的积分。在实际计算中，由于连续型随机变量的概率密度函数可能很复杂，我们通常使用对数似然函数来简化计算过程。</li></ul><p>总之，似然函数是统计学中一个非常重要的概念，它为基于数据进行参数估计提供了一种理论基础。通过最大化似然函数，可以得到参数的估计值，这种方法被称为最大似然估计（MLE）。最大似然估计是一种常用的参数估计方法，它在许多统计应用中都非常有用。</p><p>在机器学习中我们有损失函数的概念，其衡量的是模型预测错误的程度。如果取整个数据集上的平均对数似然损失，我们可以得到:</p><p>即在逻辑回归模型中，我们最大化似然函数和最小化损失函数实际上是等价的</p><h1 id="似然函数与正则化">似然函数与正则化</h1><h2 id="L1-正则化">L1 正则化</h2><p>LASSO 回归，相当于为模型添加了这样一个先验知识：w 服从零均值拉普拉斯分布。 首先看看拉普拉斯分布长什么样子：</p><p>拉普拉斯分布的概率密度函数如下：</p><p>，因此 L1 正则的本质其实是为模型增加了“模型参数服从零均值拉普拉斯分布”这一先验知识。</p><h2 id="L2-正则化">L2 正则化</h2><p>Ridge 回归，相当于为模型添加了这样一个先验知识：w 服从零均值正态分布。</p><p>首先看看正态分布长什么样子：</p><p>等价于原始的损失函数后面加上了 L2 正则，因此 L2 正则的本质其实是为模型增加了“模型参数服从零均值正态分布”这一先验知识。</p><h1 id="reference">reference</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/74874291">【机器学习】逻辑回归（非常详细） - 知乎 (zhihu.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数学 </category>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论,似然函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧几里得空间和非欧空间</title>
      <link href="/posts/20240407102038-1662adf6.html"/>
      <url>/posts/20240407102038-1662adf6.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2024/04/20240407-131526.png" alt="Alt text"></p><h1 id="欧几里得空间">欧几里得空间</h1><ul><li>欧几里得空间就是在对现实空间的规则抽象和推广（从n&lt;=3推广到有限n维空间）。</li><li>欧几里得几何就是中学学的平面几何、立体几何，在欧几里得几何中，平行线任何位置的间距相等。而中学学的几何空间一般是2维，3维（所以，我们讨论余弦值、点间的距离、内积都是在低纬空间总结的），如果将这些低维空间所总结的规律推广到有限的n维空间，那这些符合定义的空间则被统称为欧几里得空间（欧式空间，Euclidean Space）。<br>而欧几里得空间主要是定义了内积、距离、角（没错，就是初中的那些定义），理解了这些再去理解数学定义就很明确了。</li></ul><h1 id="非欧几里得空间">非欧几里得空间</h1><blockquote><p>关于非欧式空间：非欧几何，爱因斯坦曾经形象地说明过：假定存在一种二维扁平智能生物，但它们不是生活在绝对的平面上，而是生活在一个球面上，那么，当它们在小范围研究圆周率的时候，会跟我们一样发现圆周率是3.14159……可是，如果它们画一个很大的圆，去测量圆的周长和半径，就会发现周长小于2πr，圆越大，周长比2πr小得越多，为了能够适用于大范围的研究，它们就必须修正它们的几何方法。如果空间有四维，而我们生活在三维空间中，而这个三维空间在空间的第四个维度中发生了弯曲，我们的几何就会象那个球面上的扁平智能生物一样，感受不到第四维的存在，但我们的几何必须进行修正，这就是非欧几何。在非欧几何中，平行的直线只在局部平行，就象地球的经线只在赤道上平行。闵可夫斯基空间属于欧几里得几何的扩展，它是把时间也作为一个维度进行量化，再添加光速系数，跟洛伦兹变换一样，使得不同惯性系中的运动问题计算得以简化。</p></blockquote><ul><li>引用出自：<a href="https://link.zhihu.com/?target=http%3A//tieba.baidu.com/p/5419557672">哪位能用通俗方式解释一下什么是欧几里得空间</a></li></ul><h1 id="欧几里得数据与非欧几里得数据"><a href="https://www.zhihu.com/question/27903807">欧几里得数据与非欧几里得数据</a></h1><h2 id="欧几里得数据">欧几里得数据</h2><p>特点：“排列整齐”，是一类具有很好的平移不变性的数据。</p><blockquote><p>图像中的平移不变性：即不管图像中的目标被移动到图片的哪个位置，得到的结果（标签）应该相同的。<br>对于这类数据以其中一个像素为中心点，其邻居节点的数量相同。可以很好的定义一个全局共享的卷积核来提取图像中相同的结构。常见这类数据有图像、文本、语言。</p></blockquote><ul><li><p>图像：图像是一种  2D的网格类型数据，通常用矩阵进行存储。</p></li><li><p>文本：文本是一种  1D  的网格类型数据，通常可以用向量进行存储。对于文本，我们通常做法是去停用词、以及高频词（DIFT），最后嵌入到一个一维的向量空间</p></li></ul><h2 id="非欧几里得数据">非欧几里得数据</h2><p>它是一类不具有平移不变性的数据。这类数据以其中的一个为节点，其邻居节点的数量可能不同。常见这类数据有知识图谱、社交网络、化学分子结构等等。</p><ul><li>非欧几里德结构的样本总得来说有两大类型，分别是图(Graph)数据和流形数据( manifolds)</li></ul><p>这两类数据有个特点就是，排列不整齐，比较的随意。</p><blockquote><p>具体体现在：对于数据中的某个点，难以定义出其邻居节点出来，或者是不同节点的邻居节点的数量是不同的，这个其实是一个特别麻烦的问题，因为这样就意味着难以在这类型的数据上定义出和图像等数据上相同的卷积操作出来，而且因为每个样本的节点排列可能都不同，比如在生物医学中的分子筛选中，显然这个是一个Graph数据的应用，但是我们都明白，不同的分子结构的原子连接数量，方式可能都是不同的，因此难以定义出其欧几里德距离出来，这个是和我们的欧几里德结构数据明显不同的。因此这类型的数据不能看成是在欧几里德样本空间中的一个样本点了，而是要想办法将其嵌入(embed)到合适的欧几里德空间后再进行度量。而我们现在流行的  Graph Neural Network  便可以进行这类型的操作。这就是我们的后话了。</p></blockquote><ul><li>另外，欧几里德结构数据所谓的“排列整齐”也可以视为是一种特殊的非欧几里德结构数据，比如说是一种特殊的Graph数</li></ul><h1 id="reference">reference</h1><ol><li><a href="https://www.cnblogs.com/BlairGrowing/p/15802921.html">https://www.cnblogs.com/BlairGrowing/p/15802921.html</a></li><li><a href="https://www.zhihu.com/question/27903807">https://www.zhihu.com/question/27903807</a></li><li><a href="https://zhuanlan.zhihu.com/p/684643954">https://zhuanlan.zhihu.com/p/684643954</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 欧几里得空间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux添加只读用户读取log</title>
      <link href="/posts/20240227154337-a926c24b.html"/>
      <url>/posts/20240227154337-a926c24b.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux添加只读用户读取log">linux添加只读用户读取log</h1><h2 id="root用户下执行">root用户下执行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.创建用户和登录shell</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">useradd -s /bin/bash readlog</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.修改用户密码  logread123</span></span><br><span class="line">passwd readlog</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.创建用户shell执行命令目录（允许用户使用的命令保存在该目录下）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> /home/readlog/.bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#4.root修改用户的shell配置文件（只能root用户修改该文件）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chown</span> root. /home/readlog/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> 755 /home/readlog/.bash_profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#5.修改.bash_profile配置文件，主要是指定PATH的读取</span></span><br><span class="line">vi /home/readlog/.bash_profile</span><br><span class="line"></span><br><span class="line">PATH=<span class="variable">$HOME</span>/.bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#6.将允许执行的命令链接到$HOME/.bin目录(添加用户可执行的命令)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/wc /home/readlog/.bin/wc</span><br><span class="line"><span class="built_in">ln</span> -s /usr/bin/tail /home/readlog/.bin/tail</span><br><span class="line"><span class="built_in">ln</span> -s /bin/more /home/readlog/.bin/more</span><br><span class="line"><span class="built_in">ln</span> -s /bin/cat /home/readlog/.bin/cat</span><br><span class="line"><span class="built_in">ln</span> -s /bin/grep /home/readlog/.bin/grep</span><br><span class="line"><span class="built_in">ln</span> -s /bin/find /home/readlog/.bin/find</span><br><span class="line"><span class="built_in">ln</span> -s /bin/pwd /home/readlog/.bin/pwd</span><br><span class="line"><span class="built_in">ln</span> -s /bin/ls /home/readlog/.bin/ls</span><br><span class="line"><span class="built_in">ln</span> -s /bin/less /home/readlog/.bin/less</span><br><span class="line"><span class="built_in">ln</span> -s /bin/tar /home/readlog/.bin/tar</span><br><span class="line"><span class="built_in">ln</span> -s /bin/clear /home/readlog/.bin/clear</span><br><span class="line"><span class="built_in">ln</span> -s /bin/cd /home/readlog/.bin/cd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="切换到只读账号使环境变量生效">切换到只读账号使环境变量生效</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su - readlog</span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /home/readlog/.bash_profile</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="设置readlog用户可读的目录">设置readlog用户可读的目录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  单独依次设置每个目录的权限</span></span><br><span class="line">setfacl -m u:readlog:rx /home/iprobe</span><br><span class="line">setfacl -m u:readlog:rx /home/iprobe/test</span><br><span class="line">setfacl -m u:readlog:rx /home/iprobe/test/prod-project</span><br><span class="line">setfacl -m u:readlog:rx /home/iprobe/test/prod-project/logs</span><br><span class="line">setfacl -m u:readlog:r /home/iprobe/test/prod-project/logs/stdout.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看权限</span></span><br><span class="line">getfacl /home/iprobe/test/prod-project/logs/stdout.log</span><br><span class="line"></span><br><span class="line"><span class="comment">## 不要使用  -R， 下述命令，会导致目录权限被修改，特别是 .ssh目录,会导致ssh登录失败</span></span><br><span class="line">setfacl -R -m u:readlog:rx /home/iprobe</span><br></pre></td></tr></table></figure><p>如果通过 <code>setfacl</code> 设置的 ACL 权限不生效，有几个可能的原因需要检查：</p><ol><li><p>确保文件系统挂载时启用了 ACL 功能。您可以通过执行 <code>mount</code> 命令来查看文件系统的挂载选项，确认是否包含了 <code>acl</code> 选项。</p></li><li><p>检查文件所在目录的权限设置。即使文件本身具有 ACL 权限，如果其所在的目录没有相应的访问权限，也会导致访问被拒绝。</p></li><li><p>确保 <code>readlog</code> 用户对文件路径中的每个目录都具有执行权限。在 Linux 中，要对一个文件进行读取操作，用户需要对该文件所在的每个目录都具有执行权限。</p></li><li><p>如果您的系统使用了 SELinux（安全增强型 Linux），还需要确保 SELinux 的安全策略不会阻止 <code>readlog</code> 用户对该文件的访问。</p></li></ol><p>请检查上述可能的原因，特别是目录权限和文件系统挂载选项，确保 ACL 权限能够生效。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux切换用户</title>
      <link href="/posts/20240222154337-e9d79e5.html"/>
      <url>/posts/20240222154337-e9d79e5.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux切换用户">linux切换用户</h1><h2 id="su">su</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - username</span><br></pre></td></tr></table></figure><p>会切换到username用户，同时切换到username用户的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su username</span><br></pre></td></tr></table></figure><p>会切换到username用户，但是不会切换到username用户的环境变量<br>使用 ssh username@ip 也可以切换到username用户,同时会切换到username用户的环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><p>不带参数，会切换到root用户,但是不会切换到root用户的环境变量，会导致环境变量不一致</p><ul><li>如何切换到root用户的环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br></pre></td></tr></table></figure><h2 id="sudo">sudo</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -u username command</span><br></pre></td></tr></table></figure><p>会以username用户的身份执行command命令，不会切换到username用户的环境变量</p><h2 id="su和sudo的区别">su和sudo的区别</h2><p>区别主要在于权限和环境变量的切换</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本</title>
      <link href="/posts/20231227174236-d0a69eae.html"/>
      <url>/posts/20231227174236-d0a69eae.html</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本">shell脚本</h1><p>经验几大原则：</p><ol><li><p>脚本里执行任务，一定cd到任务目录，</p><blockquote><p>防止任务内读取文件，使用相对路径</p><p>例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;conf/conf.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    config = json.load(f)</span><br></pre></td></tr></table></figure></blockquote></li><li></li></ol><h1 id="end">end</h1>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级操作系统-do_page_fault</title>
      <link href="/posts/20231213113939-8506dd65.html"/>
      <url>/posts/20231213113939-8506dd65.html</url>
      
        <content type="html"><![CDATA[<p>高级操作系统-do_page_fault</p><p>\linux-3.18\arch\目录下，每个支持的处理器<a href="http://lib.csdn.net/base/architecture">架构</a>都在它相应的文件夹中，如<code>arm64</code>、<code>arm32、``x86</code>、<code>mips</code>等</p><p>文件在\linux-3.18\arch\x86\mm\fault.c；这里针对x86架构下的内存管理模块</p><p>阅读代码，分析do_page_fault()函数</p><ul><li>写一份代码分析和注释报告，包括流程图等</li></ul><h1 id="函数调用流程图">函数调用流程图</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> graph LR</span><br><span class="line"></span><br><span class="line"> do_page_fault --&gt; exception_enter;</span><br><span class="line">  do_page_fault --&gt; __do_page_fault;</span><br><span class="line">do_page_fault --&gt; exception_exit;</span><br><span class="line">__do_page_fault --&gt; 基本设置+mmio_fault;</span><br><span class="line">__do_page_fault --&gt; 处理内核态缺页异常;</span><br><span class="line">__do_page_fault --&gt; 处理用户态缺页异常;</span><br><span class="line">__do_page_fault --&gt; check_v8086_mode;</span><br><span class="line"></span><br><span class="line">处理内核态缺页异常 --&gt; 位于vmalloc区 --&gt; vmalloc_fault;</span><br><span class="line">处理内核态缺页异常 --&gt; 假缺页 --&gt;TLB延迟Flush;</span><br><span class="line">假缺页 --&gt; Kprobe引起;</span><br><span class="line">处理内核态缺页异常 --&gt; 非位于vmalloc区 --&gt; bad_area_nosemaphore;</span><br><span class="line"></span><br><span class="line">处理用户态缺页异常 --&gt; SMAP --&gt; bad_area_nosemaphore;</span><br><span class="line">处理用户态缺页异常 --&gt; 中断没有用户上下文或者处于临界区 --&gt; bad_area_nosemaphore;</span><br><span class="line">处理用户态缺页异常 --&gt; 内核中的其他错误导致mmap_sem死锁 --&gt; bad_area_nosemaphore;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">处理用户态缺页异常 --&gt; 在当前进程的地址空间中查找发生异常的地址对应vma;</span><br><span class="line">在当前进程的地址空间中查找发生异常的地址对应vma --&gt; 未找到 --&gt; bad_area;</span><br><span class="line">在当前进程的地址空间中查找发生异常的地址对应vma --&gt; 不在有效地址 --&gt; bad_area;</span><br><span class="line">在当前进程的地址空间中查找发生异常的地址对应vma --&gt; 地址与栈顶距离越界 --&gt; bad_area;</span><br><span class="line">在当前进程的地址空间中查找发生异常的地址对应vma --&gt; 正常地址 --&gt; bad_area_access_error</span><br><span class="line"> 正常地址 --&gt; mm_fault_error</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="do-page-fault-struct-pt-regs-regs-unsigned-long-error-code">do_page_fault(struct pt_regs *regs, unsigned long error_code)</h1><p>其函数为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 两个个参数</span></span><br><span class="line"><span class="comment">1. regs：在堆栈中保存异常发生时的现场寄存器信息</span></span><br><span class="line"><span class="comment">2. error_code：表示异常发生的类型</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">dotraplinkage <span class="type">void</span> notrace</span><br><span class="line"><span class="title function_">do_page_fault</span><span class="params">(<span class="keyword">struct</span> pt_regs *regs, <span class="type">unsigned</span> <span class="type">long</span> error_code)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// CR2是页故障线性地址寄存器，保存最后一次出现页故障的全32位线性地址。</span></span><br><span class="line">  <span class="comment">//这里读取寄存器CR2  </span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> address = read_cr2(); </span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ctx_state</span> <span class="title">prev_state</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//  这里是进入异常处理状态，维护上下文</span></span><br><span class="line">prev_state = exception_enter();</span><br><span class="line">  <span class="comment">//  调用缺页处理函数，并传参</span></span><br><span class="line">__do_page_fault(regs, error_code, address);</span><br><span class="line">  <span class="comment">// 退出改异常处理状态</span></span><br><span class="line">exception_exit(prev_state);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="do-page-fault-regs-error-code-address">__do_page_fault(regs, error_code, address);</h1><p>该函数为缺页处理的实际函数，完整代码如下</p><p>并将代码分析注释添加在下述代码中</p><h2 id="1、mmio-fault">1、mmio_fault</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 三个参数</span></span><br><span class="line"><span class="comment">1. regs：在堆栈中保存异常发生时的现场寄存器信息</span></span><br><span class="line"><span class="comment">2. error_code：表示异常发生的类型</span></span><br><span class="line"><span class="comment">3. address: 最后一次出现页故障的全32位线性地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> noinline <span class="type">void</span></span><br><span class="line">__do_page_fault(<span class="keyword">struct</span> pt_regs *regs, <span class="type">unsigned</span> <span class="type">long</span> regs,</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> address)</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//   下述定义  虚拟内存描述；进程描述符；进程中的内存描述符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">vm_area_struct</span> *<span class="title">vma</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> *<span class="title">tsk</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span></span><br><span class="line"><span class="type">int</span> fault;</span><br><span class="line">  <span class="comment">// 设置允许重试标志和可杀死进程标志</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  获取当前进程描述符和当前进程中的内存描述符</span></span><br><span class="line">tsk = current;</span><br><span class="line">mm = tsk-&gt;mm;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  这里判断内存也是否存在present 标记 （页表项PTE中的P位（Present标志）），存在的话，则会调用 kmemcheck_hide函数  清除该标记，重置为0</span></span><br><span class="line">  <span class="comment">//   用处是  ，present 置为0，使得，再对该页的访问  触发缺页异常</span></span><br><span class="line"><span class="keyword">if</span> (kmemcheck_active(regs))</span><br><span class="line">kmemcheck_hide(regs);</span><br><span class="line">  <span class="comment">//   获取内存的读写信号量</span></span><br><span class="line">prefetchw(&amp;mm-&gt;mmap_sem);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// unlikely 关键字，该分支的条件更不可能被满足</span></span><br><span class="line">  <span class="comment">// kmmio_fault 函数，mmio发生缺页的概率较低，如果发生不在这个函数里进行处理</span></span><br><span class="line"><span class="keyword">if</span> ( unlikely(kmmio_fault(regs, address)))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  ………………</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、处理内核态缺页">2、处理内核态缺页</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 三个参数</span></span><br><span class="line"><span class="comment">1. regs：在堆栈中保存异常发生时的现场寄存器信息</span></span><br><span class="line"><span class="comment">2. error_code：表示异常发生的类型</span></span><br><span class="line"><span class="comment">3. address: 最后一次出现页故障的全32位线性地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> noinline <span class="type">void</span></span><br><span class="line">__do_page_fault(<span class="keyword">struct</span> pt_regs *regs, <span class="type">unsigned</span> <span class="type">long</span> regs,</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> address)</span><br><span class="line">&#123;</span><br><span class="line">  ………………</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 判断缺页地址是不是在内核地址空间</span></span><br><span class="line">  <span class="comment">//  有若干种类型，分别进行处理</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(fault_in_kernel_space(address))) &#123;</span><br><span class="line">    <span class="comment">//   检查标志位确定访问发生在&quot;内核态&quot;</span></span><br><span class="line"><span class="keyword">if</span> (!(error_code &amp; (PF_RSVD | PF_USER | PF_PROT))) &#123;</span><br><span class="line">      <span class="comment">//  这里是对于发生在内核空间里的错误 (error_code &amp; 4) == 0</span></span><br><span class="line">      <span class="comment">//  且 错误是非保护型错误   (error_code &amp; 9) == 0</span></span><br><span class="line"><span class="keyword">if</span> (vmalloc_fault(address) &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (kmemcheck_fault(regs, address, error_code))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查是否是旧的TLB（页表缓存）导致的假的缺页异常</span></span><br><span class="line">    <span class="comment">//（TLB延迟flush导致的，因为提前flush会有比较大的性能代价）</span></span><br><span class="line"><span class="keyword">if</span> (spurious_fault(error_code, address))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否kprobes引起的虚假错误</span></span><br><span class="line"><span class="keyword">if</span> (kprobes_fault(regs))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 异常位于内核态，触发内核异常，但是位于vmalloc的缺页异常前面已经处理过了，</span></span><br><span class="line">    <span class="comment">// 所以如果不是缺页导致的，那就是内核有其他异常了，需要处理返回</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据异常的原因和类型，选择适当的处理方法</span></span><br><span class="line">bad_area_nosemaphore(regs, error_code, address);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125; </span><br><span class="line">  ………………</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、用户态缺页">3、用户态缺页</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 三个参数</span></span><br><span class="line"><span class="comment">1. regs：在堆栈中保存异常发生时的现场寄存器信息</span></span><br><span class="line"><span class="comment">2. error_code：表示异常发生的类型</span></span><br><span class="line"><span class="comment">3. address: 最后一次出现页故障的全32位线性地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">static</span> noinline <span class="type">void</span></span><br><span class="line">__do_page_fault(<span class="keyword">struct</span> pt_regs *regs, <span class="type">unsigned</span> <span class="type">long</span> regs,</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> address)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// mmio_fault</span></span><br><span class="line">    ………………</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 内核态</span></span><br><span class="line">  ………………</span><br><span class="line"></span><br><span class="line"><span class="comment">//   从这里往下处理的是用户态的缺页异常</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//  还是判断是否kprobes引起的虚假错误</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(kprobes_fault(regs)))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// /*使用了保留位*/ </span></span><br><span class="line">  <span class="comment">/* pgtable_bad函数  ： CPU寄存器和内核态堆栈的全部转储打印到控制台， 以及页表的相关信息，</span></span><br><span class="line"><span class="comment">  并输出到一个系统消息缓冲 区，然后调用函数do_exit()杀死当前进程*/</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(error_code &amp; PF_RSVD))</span><br><span class="line">pgtable_bad(regs, error_code, address);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// smap的保护特性，阻止了访问内核态虚拟地址</span></span><br><span class="line">  <span class="comment">// SMAP（Supervisor Mode Access Prevention）是一种硬件特性，</span></span><br><span class="line">  <span class="comment">// 主要用于阻止处理器在内核态下访问用户态的地址空间</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(smap_violation(error_code, regs))) &#123;</span><br><span class="line">bad_area_nosemaphore(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果此在在一个中断中，没有用户上下文或者 运行在临界区中</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(in_atomic() || !mm)) &#123;</span><br><span class="line">    <span class="comment">// 根据异常的原因和类型，选择适当的处理方法</span></span><br><span class="line">bad_area_nosemaphore(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//传参的address  即是CR2寄存器的值，且vmalloc fault 被处理，所以可以激活irq</span></span><br><span class="line">  <span class="comment">// 现在说明不在中断中，所以开中断，  可以缩短因缺页异常导致的关中断时长</span></span><br><span class="line"><span class="keyword">if</span> (user_mode_vm(regs)) &#123;</span><br><span class="line">local_irq_enable();</span><br><span class="line">error_code |= PF_USER;</span><br><span class="line">flags |= FAULT_FLAG_USER;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (regs-&gt;flags &amp; X86_EFLAGS_IF)</span><br><span class="line">local_irq_enable();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//  读写信号量</span></span><br><span class="line">perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, <span class="number">1</span>, regs, address);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error_code &amp; PF_WRITE)</span><br><span class="line">flags |= FAULT_FLAG_WRITE;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当在内核中运行时，我们预计故障只会发生在用户空间中的地址上。所有其他故障都表示内核中的错误，并且应该生成OOPS。不幸的是，如果在已经包含mmap_sem的代码路径中发生错误故障，我们将在尝试根据地址空间验证故障时死锁。幸运的是，内核只有效地引用了定义良好的代码区域中的用户空间，这些代码区域列在异常表中。 由于绝大多数故障都是有效的，我们只会在可能出现死锁的情况下执行源引用检查。尝试锁定地址空间，如果不能，则验证源。如果这是无效的，我们可以跳过地址空间检查，从而避免死锁：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//   避免内核中的其他错误导致mmap_sem死锁</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(!down_read_trylock(&amp;mm-&gt;mmap_sem))) &#123;</span><br><span class="line"><span class="keyword">if</span> ((error_code &amp; PF_USER) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">    !search_exception_tables(regs-&gt;ip)) &#123;</span><br><span class="line">bad_area_nosemaphore(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">retry:</span><br><span class="line">down_read(&amp;mm-&gt;mmap_sem);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * The above down_read_trylock() might have succeeded in</span></span><br><span class="line"><span class="comment"> * which case we&#x27;ll have missed the might_sleep() from</span></span><br><span class="line"><span class="comment"> * down_read():</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">might_sleep();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在当前进程的地址空间中查找发生异常的地址对应的vma</span></span><br><span class="line">vma = find_vma(mm, address);</span><br><span class="line"><span class="keyword">if</span> (unlikely(!vma)) &#123;</span><br><span class="line">    <span class="comment">//如果找不到，则释放锁并且返回</span></span><br><span class="line">bad_area(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//如果找到了，而且虚拟地址位于vma有效范围，则为正常的缺页异常，请求分配内存</span></span><br><span class="line"><span class="keyword">if</span> (likely(vma-&gt;vm_start &lt;= address))</span><br><span class="line"><span class="keyword">goto</span> good_area;</span><br><span class="line"><span class="keyword">if</span> (unlikely(!(vma-&gt;vm_flags &amp; VM_GROWSDOWN))) &#123;</span><br><span class="line">    <span class="comment">//虚拟地址不在vma有效范围，则是进程访问了非法地址，需要处理后返回</span></span><br><span class="line">bad_area(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (error_code &amp; PF_USER) &#123;</span><br><span class="line">    <span class="comment">//压栈操作时，操作的地址最大的偏移为65536+32*sizeof(unsigned long), </span></span><br><span class="line">    <span class="comment">//该操作由pusha命令触发(老版本中，pusha命令最大只能操作32字节，即  同时压栈8个寄存器)。</span></span><br><span class="line">    <span class="comment">//如果访问的地址距栈顶的距离超过了，则肯定是非法 * 地址访问了。</span></span><br><span class="line">    <span class="comment">//如果虚拟地址位于堆栈区附近</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(address + <span class="number">65536</span> + <span class="number">32</span> * <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>) &lt; regs-&gt;sp)) &#123;</span><br><span class="line">bad_area(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//扩展堆栈区，堆栈区的虚拟地址是动态分配的，不是固定的</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (unlikely(expand_stack(vma, address))) &#123;</span><br><span class="line">    <span class="comment">//扩展失败，处理后返回</span></span><br><span class="line">bad_area(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Ok, we have a good vm_area for this memory access, so</span></span><br><span class="line"><span class="comment"> * we can handle it..</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">good_area:</span><br><span class="line">  <span class="comment">//正常的缺页异常处理，进行请求调页，分配物理内存</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(access_error(error_code, vma))) &#123;</span><br><span class="line">bad_area_access_error(regs, error_code, address);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   这个是所有处理器共用的部分，专门处理用户空间的缺页异常</span></span><br><span class="line">fault = handle_mm_fault(mm, vma, address, flags);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  <span class="comment">//  retry时，先处理在等待的重要信号，</span></span><br><span class="line"><span class="keyword">if</span> (unlikely((fault &amp; VM_FAULT_RETRY) &amp;&amp; fatal_signal_pending(current)))</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//   执行  mm_fault_error  缺页处理</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(fault &amp; VM_FAULT_ERROR)) &#123;</span><br><span class="line">mm_fault_error(regs, error_code, address, fault);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主要/次要页面错误核算仅在初次尝试时完成。如果我们进行重试，那么很可能会在页面缓存中找到该页面。</span></span><br><span class="line">  <span class="comment">//   前面已经设置允许重试</span></span><br><span class="line"><span class="keyword">if</span> (flags &amp; FAULT_FLAG_ALLOW_RETRY) &#123;</span><br><span class="line"><span class="keyword">if</span> (fault &amp; VM_FAULT_MAJOR) &#123;</span><br><span class="line">tsk-&gt;maj_flt++;</span><br><span class="line">perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MAJ, <span class="number">1</span>,</span><br><span class="line">      regs, address);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">tsk-&gt;min_flt++;</span><br><span class="line">perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MIN, <span class="number">1</span>,</span><br><span class="line">      regs, address);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (fault &amp; VM_FAULT_RETRY) &#123;</span><br><span class="line"> <span class="comment">//  去除可重试标识；设置已经重试标识</span></span><br><span class="line">flags &amp;= ~FAULT_FLAG_ALLOW_RETRY;</span><br><span class="line">flags |= FAULT_FLAG_TRIED;</span><br><span class="line"><span class="keyword">goto</span> retry;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// VM86模式(兼容老环境)相关检查</span></span><br><span class="line">check_v8086_mode(regs, address, tsk);</span><br><span class="line"></span><br><span class="line">up_read(&amp;mm-&gt;mmap_sem);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="reference">reference</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/579482414#fromHistory">linux内核内存管理-缺页异常 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/Rong_Toa/article/details/115395812">Linux内核内存管理（3）：kmemcheck介绍-CSDN博客</a></li><li><a href="https://blog.csdn.net/shipinsky/article/details/78389559">LINUX内存管理之页式管理之页表项标记位的理解_页表标记位-CSDN博客</a></li><li><a href="https://en.wikipedia.org/wiki/Supervisor_Mode_Access_Prevention">Supervisor Mode Access Prevention - Wikipedia</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> os </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机启动-围绕内存的所有操作</title>
      <link href="/posts/20231129214044-734bc566.html"/>
      <url>/posts/20231129214044-734bc566.html</url>
      
        <content type="html"><![CDATA[<p>计算机启动-围绕内存的所有操作</p><h1 id="计算机-启动过程">计算机 启动过程</h1><p>每次加电后，CPU总是到内存（其实是只读存储器）里面预设的位置拿第一条指令、并从这个位置开始，一条条执行后面的一整块代码。</p><p>这段指令是主板上固件程序的一部分，这个固件程序负责检查核心硬件（内存、显卡等）是否正常；</p><p>在机器加电的时候，首先会进行CPU的初始化，reset一些寄存器。在i8086架构中，cs(code segment register, 代码段寄存器)会被初始化成<code>0xf000</code>, pc(program counter, 程序计数寄存器)会被初始化为<code>0xfff0</code>, 也就是说CPU的第一条指令实在cs:pc处取指的。这条指令会跳转到BIOS程序执行入口，BIOS程序进行初始化和自检工作后，加载位于主引导扇区中的bootloader, 再把控制权交给bootloader , bootloader又通过一定的规则，同时完成从实模式到保护模式的转换，加载位于磁盘上的操作系统内核，最后把控制权交给操作系统内核，完成加载工作。</p><blockquote><p>注：cs:pc在i8086实模式下对应的物理地址是<code>(cs &lt;&lt; 4) + pc = 0xf0000 + 0xfff0 = 0xffff0</code></p></blockquote><p>可以分为以下几个步骤：</p><ol><li><p>加电自检（Power-On Self-Test，POST）：当计算机通电时，硬件设备会进行自检，包括检查内存、处理器、硬盘等是否正常工作。这个过程通常只需要几秒钟。</p></li><li><p>启动引导加载程序（Bootloader）：计算机会加载引导加载程序，例如GRUB（GRand Unified Bootloader）或LILO（Linux Loader）。这些引导加载程序位于硬盘的引导扇区，它们负责加载操作系统内核。</p></li><li><p>加载内核（Kernel）：引导加载程序会加载Linux内核，将其加载到内存中。内核是操作系统的核心部分，负责管理硬件设备、内存、文件系统等。</p></li><li><p>初始化（Initialization）：内核加载后，会执行一系列初始化任务。这些任务包括初始化设备驱动程序、创建进程、设置系统参数等。</p></li><li><p>运行init进程：在初始化完成后，内核会启动init进程，它是用户空间的第一个进程。init进程会读取配置文件（如/etc/inittab或/etc/init.d/）并启动其他系统进程和服务。</p></li><li><p>启动系统服务：init进程会根据配置文件启动各种系统服务，如网络服务、登录管理器、时间同步等。</p></li><li><p>用户登录：一旦系统服务启动完成，用户可以通过登录界面或命令行登录系统。</p></li></ol><p>总结起来，Linux启动过程包括硬件自检、引导加载程序加载内核、内核初始化、启动init进程、启动系统服务和用户登录。这个过程通常在几秒钟到几分钟之间，具体时间取决于硬件配置和系统设置。</p><h1 id="所有和内存相关的操作">所有和内存相关的操作</h1><h2 id="1-加电自检阶段的内存检测">1. 加电自检阶段的内存检测</h2><p>加电自检（POST）阶段的内存检测主要包括以下几个部分：</p><ol><li><p>初始化内存控制器：在开始内存检测之前，计算机会对内存控制器进行初始化，以确保它能够正确地与内存模块进行通信。</p></li><li><p>写入和读取测试模式：计算机会向内存中写入特定的测试模式和数据序列，然后再读取并验证这些数据。这可以帮助检测内存模块是否能够正确地接收和存储数据。</p></li><li><p>内存地址线测试：计算机会逐个测试内存地址线，确保每根地址线都能够正确地传输地址信息。这可以帮助检测内存地址线是否存在连接问题或者其他故障。</p></li><li><p>数据线测试：计算机会逐个测试内存数据线，确保每根数据线都能够正确地传输数据。这可以帮助检测内存数据线是否存在连接问题或者其他故障。</p></li><li><p>内存模块大小和类型检测：计算机会检测安装的内存模块的大小和类型，并与系统配置进行匹配。这可以帮助确保内存模块的兼容性和一致性。</p></li></ol><p>具体的内存检测过程可能会因计算机硬件和固件的不同而有所差异。一般来说，计算机会在启动时进行这些检测，并将结果显示在屏幕上或通过声音信号进行通知。如果检测过程中发现内存问题，计算机可能会停止启动并提示用户采取进一步的措施，如更换或重新插拔内存模块。</p><h2 id="2-bios把引导加载程序放入内存">2. bios把引导加载程序放入内存</h2><ol><li><p>BIOS找到第一个可引导的设备、读取该设备的引导扇区（boot sector），一般位于硬盘的第一个物理扇区，是一个512字节大小的区域，其中包含了引导加载程序的代码。</p></li><li><p>BIOS将引导设备的第一个扇区加载到内存中的特定位置是内存地址0x7C00处。<br>这个位置是一个固定的位置，被用作引导加载程序的入口点。一旦引导扇区被加载到这个内存位置，CPU就会开始执行这个代码，从而启动操作系统的引导过程。</p></li><li><p>为什么是 内存地址0x7C00处？<br>参考<a href="https://www.glamenv-septzen.net/en/view/6">为什么 BIOS 将 MBR 加载到 x0 中的 7x00C86 中？- Glamenv-Septzen.net（zh）</a></p><blockquote><p>0x7c00这个地址来自Intel的第一代个人电脑芯片8088，之后的CPU为了保持兼容就一直使用这个地址。</p><p>1981年8月，IBM公司最早的个人电脑 IBM PC 5150 上市，就用了这个芯片。当时搭配的操作系统是86-DOS.这个操作需要的内存最少是32KB。内存地址从0x0000开始编号，32KB的内存就是 0x0000~0x7FFF。</p><p>8088芯片本身需要占用 0x0000~0x03FF，用来保存各种中断处理程序的储存位置。（主引导记录本身就是中断信号INT 19h的处理程序）。所以，内存只剩下 0x0400~0x7FFF可以使用。</p><p>为了把尽量多的连续内存留给操作系统，主引导记录就被放到了内存地址的尾部。由于一个扇区是512 字节，主引导扇区本身也会产生数据，需要另外留出512字节保存。所以，它的预留位置就变成了：</p><p>0x7FFF - 512 - 512 + 1 = 0x7c00，也即 32KB - 1KB。</p><p>所以0x7c00 就是这样来的。</p></blockquote></li></ol><h2 id="3-引导加载程序对内存进行一些初始化操作">3. 引导加载程序对内存进行一些初始化操作</h2><p>引导加载程序在控制权转交给操作系统之前，需要对内存进行基本的初始化。下面是一些常见的内存初始化操作：</p><ol><li><p>设置堆栈（Stack Setup）：堆栈是用于存储函数调用和局部变量等临时数据的一种数据结构。引导加载程序需要设置堆栈指针，以确保在后续的代码执行过程中能够正确地使用堆栈。</p><blockquote><p>具体来说，堆栈指的是一块内存区域，用于存储函数调用时的返回地址、局部变量等信息。堆栈的设置包括两个步骤：</p><ol><li>确定堆栈的起始地址；</li><li>将堆栈指针（Stack Pointer）初始化为堆栈的起始地址。</li></ol><p>在启动时，处理器会将堆栈指针（SP，Stack Pointer）初始化为一个特定的值，通常是内存末端的地址。<br>然后，引导加载程序会根据系统的需要，设置一个新的堆栈指针，以便可用于进一步的操作。<br>具体的做法是将新的堆栈指针值存储到处理器的堆栈指针寄存器（SP register）中，这样处理器在执行指令或调用函数时，就会使用新的堆栈指针。这个过程通常被称为 “堆栈初始化” 或 “堆栈设置”。</p></blockquote></li><li><p>清零寄存器（Zero Registers）：为了确保在运行操作系统之前，所有寄存器中的值都是可控的，引导加载程序会将所有寄存器清零，这样可以避免旧数据的干扰。</p></li><li><p>建立内存映射表（Memory Mapping）：引导加载程序需要建立内存映射表，将物理内存地址映射到虚拟内存地址。这样操作系统在运行时就能够正确访问和管理内存。</p><blockquote><p>在引导加载程序初始化内存时，通常会执行以下步骤以建立内存映射表（Memory Mapping）：</p><ol><li><p>设置段寄存器：引导加载程序使用实模式来操作系统启动的早期阶段。在实模式下，内存被分为段（Segment）和偏移量（Offset）。程序需要设置段寄存器，以正确访问内存。</p></li><li><p>初始化全局描述符表（Global Descriptor Table，GDT）：GDT是一个数据结构，用于定义不同的内存段的属性和位置。引导加载程序需要初始化GDT，以便操作系统能够正确使用内存。</p></li><li><p>启用分页机制（Paging）：分页机制是一种将物理内存映射到虚拟内存的技术。引导加载程序需要启用分页机制，以便操作系统可以使用虚拟内存管理和地址转换。</p></li><li><p>设置页表和页目录：页表和页目录是分页机制中的关键数据结构，用于映射虚拟地址到物理地址。引导加载程序需要创建并初始化页表和页目录，以建立正确的内存映射关系。</p></li><li><p>启用内存保护：引导加载程序可能会设置内存保护功能，例如开启写保护，以防止对关键内存区域的非法写操作。</p></li></ol><p>这些步骤可以确保内存的基本初始化和正确映射，为操作系统的正常运行提供必要的环境。具体的实现方式可能因操作系统和硬件平台而有所不同。</p></blockquote></li><li><p>加载中断向量表（Interrupt Vector Table）：中断向量表存储了各种硬件和软件中断的入口点，引导加载程序需要加载和设置正确的中断向量表，以确保操作系统能够正确响应中断。<br>这里加载的 初级的中断向量表，还有一些高级中断向量表由操作系统负负责加载</p><blockquote><p>对内存进行基本的初始化，包括加载中断向量表（Interrupt Vector Table），可以通过以下步骤来完成：</p><ol><li><p>确定中断向量表的位置：中断向量表是一个存储中断处理程序入口地址的数据结构。它通常位于内存的固定位置，例如0x0000:0x0000处（实模式下）或0x00000000处（保护模式下）。</p></li><li><p>加载中断向量表：将中断向量表的内容加载到确定的位置。这可能涉及将中断处理程序的入口地址写入适当的内存位置。在实模式下，中断向量表是一个简单的数组；在保护模式下，中断向量表是一个数据结构，包含每个中断的处理程序地址。</p></li><li><p>设置中断描述符表（Interrupt Descriptor Table，IDT）：在保护模式下，中断向量表实际上是IDT的一部分。引导加载程序需要初始化IDT，并将其指向中断向量表的位置。</p></li><li><p>启用中断：在初始化完中断向量表和IDT后，引导加载程序需要启用中断，以便操作系统可以正确处理各种中断事件。</p></li></ol><p>这些步骤将确保中断向量表被正确加载到内存，并为操作系统提供中断处理的基本框架。具体的实现方式可能因操作系统和硬件平台而有所不同。</p></blockquote></li></ol><h2 id="4-加载内核">4. 加载内核</h2><p>引导加载程序加内核，并移交控制权</p><p>详细步骤：</p><ol><li>内核文件被成功加载到内存中，引导加载程序会传递一些启动参数给内核，比如根文件系统的位置、内存分配信息等。接着，引导加载程序会将控制权转交给内核。此时，内核接管了对计算机硬件的控制，并开始执行自己的初始化过程。</li><li>内核首先会解压自身，因为内核文件通常是经过压缩的，所以在加载到内存后需要进行解压操作。</li><li>内核会初始化系统的核心部分，包括进程管理、内存管理、设备驱动、文件系统等。</li><li>内核会识别和配置计算机的硬件设备，如CPU、内存、外部设备等，并建立相应的数据结构以便系统能够与这些硬件设备进行交互。</li><li>接下来，内核会初始化虚拟文件系统、网络子系统和其他子系统，为用户空间程序的运行做准备。</li><li>内核还会启动第一个用户空间进程——init进程。这个进程是所有其他用户空间进程的祖先进程，负责系统的初始化和进程的管理。</li><li>一旦init进程被启动，内核的加载阶段就结束了，系统已经切换到用户空间，并开始执行用户空间的初始化和服务启动。</li></ol><p>总的来说，加载内核是Linux启动过程中非常重要的一步，它标志着系统内核开始接管对硬件的控制，并进行系统内核的初始化工作。成功加载内核后，系统将进入用户空间，并开始执行用户空间的初始化进程，为用户提供各种服务和功能。</p><h1 id="关键数据结构及初始化">关键数据结构及初始化</h1><ol><li>段描述符表（Global Descriptor Table，GDT）</li><li>中断描述符表（Interrupt Descriptor Table，IDT）</li><li>页目录表（Page Directory Table，PDT）</li></ol><ul><li>Linux0.11内核：内核会将所有页的页描述符struct page 放到全局数组mem_map[]中</li><li>节点使用 struct pglist_data 结构来描述。<br>内存管理区是使用 struct zone 结构来描述的。<br>页框是使用 struct page 结构来表示的。所有页描述符都保存在全局数组 mem_map[]</li></ul><h2 id="1-mem-init-main-memory-start-memory-end-函数-设置PDT">1.   mem_init(main_memory_start, memory_end)函数 设置PDT</h2><p>内核执行该函数，初始化 全局数组mem_map[]。分为内核源码区，缓冲区，主内存区</p><p><strong>mem_map</strong> 数组的各个位置上赋值，而且显示全部赋值为 USED 也就是 100，然后对其中一部分又赋值为了 0。</p><p>赋值为 100 的部分就是 USED，也就表示内存被占用，</p><h2 id="2-trap-init-函数-设置IDT">2. trap_init();函数 设置IDT</h2><p>set_trap_gate(0,&amp;divide_error);</p><p>设置中断处理程序到IDT中</p><h2 id="3-进程调度初始化，shed-init">3. 进程调度初始化，shed_init()</h2><p>初始化了下 TSS和 LDT;</p><p>TSS 叫<strong>任务状态段</strong>，就是<strong>保存和恢复进程的上下文的</strong></p><p>LDT 叫<strong>局部描述符表</strong>，是与 GDT 全局描述符表相对应的，内核态的代码用 GDT 里的数据段和代码段，而用户进程的代码用每个用户进程自己的 LDT 里得数据段和代码段</p><h2 id="4-buffer-init-long-buffer-end">4. buffer_init(long buffer_end)</h2><p>初始化缓冲区</p><h2 id="5。hd-init-硬盘初始化">5。hd_init(); 硬盘初始化</h2><p>设置<strong>blk_dev[]</strong> 来进行管理，每一个索引表示一个块设备。</p><ul><li>下述为计算机启动的初始步骤</li></ul><h1 id="加电自检（Power-On-Self-Test，POST）">加电自检（Power-On Self-Test，POST）</h1><p>加电自检是Linux启动过程的第一步，也是计算机硬件初始化的过程。在这个阶段，计算机会对硬件进行自我检测，以确保硬件正常运行。</p><p>具体来说，加电自检包括以下几个主要的步骤：</p><ol><li><p>供电检测：计算机加电后，电源单元会向主板和其他硬件组件提供电源。在此过程中，计算机会检测电源是否正常工作，以确保稳定的供电。</p></li><li><p>主板检测：计算机主板是各种硬件组件的连接中心。加电自检会对主板进行检测，包括检查主板上的电容、晶振、芯片组等是否正常。</p></li><li><p>CPU初始化：加电自检会初始化CPU，包括设置CPU的工作模式、时钟频率等。此外，还会检查CPU的缓存、指令集等功能是否正常。</p></li><li><p>内存检测：计算机会对安装在主板上的内存模块进行检测。它会读取内存的配置信息，如容量、频率等，并检查内存是否正常工作。</p></li><li><p>显卡检测：加电自检还会检测计算机中的显卡。它会读取显卡的信息，并确保显卡能够正常工作。</p></li><li><p>储存设备检测：计算机会检测硬盘、光驱等储存设备是否连接正常。它会读取设备的信息，并确保它们能够被正确识别和访问。</p></li><li><p>外部设备检测：加电自检还会检测计算机外部设备，如键盘、鼠标、打印机等。它会确保这些设备能够被正确识别和操作。</p></li><li><p>自检结果显示：自检过程中，计算机会将检测结果显示在屏幕上。通常会显示各个硬件组件的信息、状态和错误提示，以便用户或技术人员进行故障排除。</p></li></ol><p>加电自检是Linux启动过程中非常重要的一步，它确保了计算机硬件的正常工作。如果在自检过程中发现硬件故障或异常，计算机会通过声音提示或屏幕显示错误信息，以便用户采取相应的措施修复问题。只有当加电自检通过并确认硬件正常后，计算机才能继续进行后续的启动步骤。</p><h1 id="启动引导加载程序（Bootloader）">启动引导加载程序（Bootloader）</h1><p>启动引导加载程序是Linux启动过程的第二步，它的主要任务是在计算机启动时加载操作系统内核。在这个阶段，计算机会读取硬盘中的引导扇区，并将引导加载程序加载到内存中进行执行。</p><p>下面是启动引导加载程序的详细步骤：</p><ol><li><p>开机自检完成后，计算机会通过主板上的BIOS（基本输入/输出系统）开始引导过程。BIOS是固化在主板上的一组软件，负责初始化硬件并提供基本的输入输出功能。</p></li><li><p>BIOS会根据预设的引导设备顺序（如硬盘、光盘、USB等）找到第一个可引导的设备。</p></li><li><p>BIOS会读取该设备的引导扇区（boot sector），引导扇区位于硬盘的第一个物理扇区。引导扇区是一个512字节大小的区域，其中包含了引导加载程序的代码。</p></li><li><p>引导加载程序可以是GRUB（GRand Unified Bootloader）或LILO（LInux LOader）等。这些引导加载程序通常已经被安装在硬盘的引导扇区上。</p></li><li><p>引导加载程序会将自己的代码加载到计算机的内存中，并在控制权转交给它之前对内存进行一些基本的初始化。</p><blockquote><h3 id="引导加载程序对内存进行一些初始化操作">引导加载程序对内存进行一些初始化操作</h3><p>引导加载程序在控制权转交给操作系统之前，需要对内存进行基本的初始化。下面是一些常见的内存初始化操作：</p><ol><li><p>设置堆栈（Stack Setup）：堆栈是用于存储函数调用和局部变量等临时数据的一种数据结构。引导加载程序需要设置堆栈指针，以确保在后续的代码执行过程中能够正确地使用堆栈。</p></li><li><p>清零寄存器（Zero Registers）：为了确保在运行操作系统之前，所有寄存器中的值都是可控的，引导加载程序会将所有寄存器清零，这样可以避免旧数据的干扰。</p></li><li><p>建立内存映射表（Memory Mapping）：引导加载程序需要建立内存映射表，将物理内存地址映射到虚拟内存地址。这样操作系统在运行时就能够正确访问和管理内存。</p></li><li><p>加载中断向量表（Interrupt Vector Table）：中断向量表存储了各种硬件和软件中断的入口点，引导加载程序需要加载和设置正确的中断向量表，以确保操作系统能够正确响应中断。</p></li><li><p>设置保护模式（Enable Protected Mode）：引导加载程序可能会将计算机从实模式切换到保护模式。在保护模式下，操作系统可以更好地管理内存和处理器资源。</p></li><li><p>加载其他必要数据结构：引导加载程序可能会加载一些其他必要的数据结构，例如页表、段描述符等，以便操作系统能够正确地访问和管理内存。</p></li></ol><p>这些内存初始化操作是为了确保操作系统能够在一个干净、可控的环境中运行。具体实现这些操作的方法会根据操作系统和硬件平台的不同而有所差异。引导加载程序会根据特定的规范和约定来执行这些操作，以确保内存被正确初始化，并为操作系统的正常运行做好准备。</p></blockquote></li><li><p>引导加载程序会在内存中查找配置文件，如GRUB的配置文件是grub.cfg。配置文件包含了操作系统内核的位置、启动参数等信息。</p></li><li><p>引导加载程序根据配置文件的指示，定位并加载操作系统内核。内核文件通常位于硬盘的某个分区上，如/boot目录。</p></li><li><p>引导加载程序将内核加载到内存中的指定位置，并将控制权转交给内核，使其开始执行。</p></li></ol><p>启动引导加载程序是Linux启动过程中非常关键的一步，它负责从硬盘中读取引导扇区和引导加载程序的代码，并将内核加载到内存中，为后续的初始化和运行init进程做准备。通过引导加载程序，用户可以选择不同的操作系统或不同的内核进行启动，提供了灵活性和可定制性。</p><h1 id="加载内核（Kernel）">加载内核（Kernel）</h1><p>加载内核（Kernel）是Linux启动过程中的重要步骤，它涉及将操作系统内核加载到内存并启动内核以进行系统初始化。以下是加载内核的详细步骤：</p><ol><li><p>引导加载程序（如GRUB）在加载后，会尝试找到并加载操作系统内核。它会根据配置文件中指定的内核位置和启动参数来执行这一步骤。</p></li><li><p>引导加载程序会将内核文件（通常名为vmlinuz）从硬盘的指定位置加载到计算机内存中。内核文件通常位于/boot目录下的一个特定位置。</p></li><li><p>一旦内核文件被成功加载到内存中，引导加载程序会传递一些启动参数给内核，比如根文件系统的位置、内存分配信息等。</p></li><li><p>接着，引导加载程序会将控制权转交给内核。此时，内核接管了对计算机硬件的控制，并开始执行自己的初始化过程。</p></li><li><p>内核首先会解压自身，因为内核文件通常是经过压缩的，所以在加载到内存后需要进行解压操作。</p></li><li><p>内核会初始化系统的核心部分，包括进程管理、内存管理、设备驱动、文件系统等。</p></li><li><p>内核会识别和配置计算机的硬件设备，如CPU、内存、外部设备等，并建立相应的数据结构以便系统能够与这些硬件设备进行交互。</p></li><li><p>接下来，内核会初始化虚拟文件系统、网络子系统和其他子系统，为用户空间程序的运行做准备。</p></li><li><p>内核还会启动第一个用户空间进程——init进程。这个进程是所有其他用户空间进程的祖先进程，负责系统的初始化和进程的管理。</p></li><li><p>一旦init进程被启动，内核的加载阶段就结束了，系统已经切换到用户空间，并开始执行用户空间的初始化和服务启动。</p></li></ol><p>总的来说，加载内核是Linux启动过程中非常重要的一步，它标志着系统内核开始接管对硬件的控制，并进行系统内核的初始化工作。成功加载内核后，系统将进入用户空间，并开始执行用户空间的初始化进程，为用户提供各种服务和功能。</p><h1 id="reference">reference</h1><ol><li><a href="https://www.glamenv-septzen.net/en/view/6">为什么 BIOS 将 MBR 加载到 x0 中的 7x00C86 中？- Glamenv-Septzen.net（zh）</a></li><li><a href="https://www.ithome.com/0/644/055.htm">Linux 0.11 第一回 | 最开始的两行代码 - IT之家 (ithome.com)</a></li><li><a href="https://www.ithome.com/0/644/371.htm">Linux 0.11 第 2 回 | 从 0x7c00 到 0x9000 - IT之家 (ithome.com)</a></li><li><a href="https://github.com/dibingfa/flash-linux0.11-talk">dibingfa/flash-linux0.11-talk: 你管这破玩意叫操作系统源码 — 像小说一样品读 Linux 0.11 核心代码 (github.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-8-并发同步</title>
      <link href="/posts/20231129100234-5ccaa8ed.html"/>
      <url>/posts/20231129100234-5ccaa8ed.html</url>
      
        <content type="html"><![CDATA[<p>系统性能量化分析-8-并发同步</p><h2 id="操作系统提供的同步总结">操作系统提供的同步总结</h2><h2 id="锁分类">锁分类</h2><h3 id="按锁行为划分">按锁行为划分</h3><ol><li>自旋锁<br>忙等待</li><li>条件变量</li></ol><h3 id="按同步场景划分">按同步场景划分</h3><p><code>将不需要做并发保护的情况挖掘出来，提升并发度</code></p><ol><li>无差别并发场景<br>并发进程、线程不做区分，默认两两互斥</li><li>生产者-消费者场景</li><li>读者-写者场景</li></ol><h3 id="进一步细分的读写锁">进一步细分的读写锁</h3><ol><li><p>Rwlock( reader-writer-lock)</p><blockquote><p>读写互斥，写不能阻止读；写存在饥饿</p></blockquote></li><li><p>Seqlock(sequential-lock)<br>适合场景：gettimeofday()</p><blockquote><ul><li>解除了读写互斥、依旧写写互斥</li><li>维护一个递增值seq，写操作进入和离开临界区均自增一次</li><li>读操作前，读seq，奇数说明正在写，等待</li><li>读seq为偶数，进入临界区，出来，再读一次seq，seq不变；结束；seq变了，再读一次</li></ul></blockquote></li><li><p>RCU (read-copy-update)</p><blockquote><p>2002年加入Linux内核主线</p><p>RCU三个基础原理</p><ol><li>发布-订阅机制</li><li>等待先前存在的read结束（RCU宽限期）<br>如何判断宽限期结束<br>1、简单实现（非抢占式环境，关闭中断<br>2、</li><li></li></ol></blockquote></li></ol><h2 id="Peterson-算法-（软件实现并发同步）">Peterson 算法  （软件实现并发同步）</h2><p>证明</p><p>反证法</p><p>实际执行可能会出现 同时进入临界区</p><p>原因</p><ul><li><p>现代处理器，指令重新排序：违反了顺序一致性<br>例如load，store顺序</p><ul><li>所以需要做  内存屏障：可以恢复顺序一致性</li></ul></li><li><p>防止编译器优化</p><ul><li>设置编译器屏栏</li></ul></li></ul><h2 id="并发带来很多问题">并发带来很多问题</h2><ol><li><p>并发bug （2009）</p><ul><li><p>死锁</p></li><li><p>非死锁   并发bug占比70%</p><blockquote><p>原子性破坏</p><p>顺序一致性破坏</p></blockquote></li></ul></li><li><p>Locks  are broken</p><blockquote><p>借助数据库领域中的概念</p><ul><li>事务</li><li></li></ul><p>悲观锁</p><p>乐观锁</p></blockquote></li></ol><h2 id="分布式系统中的并发问题">分布式系统中的并发问题</h2><p>CAP理论</p><p>CAP理论是分布式系统设计中的一个基本原则，它由计算机科学家Eric Brewer提出。CAP是指一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三个特性。</p><ul><li>一致性（Consistency）指的是系统中的所有节点在同一时间点看到的数据是一致的。换句话说，当一个节点更新了数据后，其他节点应该能够立即看到这个更新。</li><li>可用性（Availability）指的是系统在任何时候都能够正常响应用户的请求，即系统不会因为某个节点的故障而导致整个系统不可用。</li><li>分区容错性（Partition tolerance）指的是系统能够在网络分区的情况下继续正常运行。网络分区是指系统中的节点之间由于网络故障或其他原因无法相互通信。</li></ul><p>根据CAP理论，一个分布式系统无法同时满足一致性、可用性和分区容错性这三个特性，只能在其中选择两个。这是因为在网络分区的情况下，要保证一致性和可用性是相互冲突的。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231129-113123.png" alt="CAP理论_cap理论案例-CSDN博客"></p><p>在实际应用中，根据具体的需求和场景，可以根据CAP理论来选择合适的系统设计策略。如果数据的一致性对系统非常重要，可以选择保证一致性和分区容错性，但可能会牺牲一部分可用性。如果系统需要高可用性，可以选择保证可用性和分区容错性，但可能会导致数据的一致性稍有延迟。</p><p>总之，CAP理论提供了一个思考和权衡分布式系统设计的框架，帮助我们在设计和实现分布式系统时做出合适的决策。</p><h3 id="设计考虑">设计考虑</h3><ol><li>为可用性牺牲一致性</li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rust入门</title>
      <link href="/posts/20231128115144-94fe59ce.html"/>
      <url>/posts/20231128115144-94fe59ce.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://course.rs/about-book.html">关于本书 - Rust语言圣经(Rust Course)</a></p><p>参考这本开源教程</p><p>这里仅仅列出学习感受</p>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端shell使用-instance_learning</title>
      <link href="/posts/20231121214507-53383f30.html"/>
      <url>/posts/20231121214507-53383f30.html</url>
      
        <content type="html"><![CDATA[<h2 id="awk">awk</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(base) [iprobe@node118 202311]$ cat access1-20231116.log.* | grep &quot;tj=&quot; | awk &#x27;&#123;if($6~&quot;tj=&quot; )print $0&#125;&#x27; | awk &#x27;&#123;print $6&quot; &quot;$(NF-2)&#125;&#x27; | awk -F &quot;\&quot;&quot; &#x27;&#123;print $1$2&#125;&#x27; | awk &#x27;BEGIN&#123;sum=0 ;count=0&#125; &#123;sum +=$2; count++;&#125;  END &#123;print &quot; sum=&quot;sum&quot; count=&quot;count &quot; avg=&quot;sum/count&#125;&#x27; sum=3312.68 count=59274 avg=0.0558875</span><br></pre></td></tr></table></figure><p>另一条命令：</p><ol><li><p><code>cat access1-20231116.log.*</code>: 查看以 <code>access1-20231116.log.</code> 开头的所有文件。</p></li><li><p><code>grep &quot;tj=&quot;</code>: 过滤出包含 “tj=” 的行。</p></li><li><p><code>awk '&#123;if($6~&quot;tj=&quot; )print $0&#125;'</code>: 如果第 6 列包含 “tj=”，则输出整行数据。</p></li><li><p><code>awk '&#123;print $6&quot; &quot;$(NF-2)&#125;'</code>: 提取第 6 列和倒数第二列，并打印在一起。</p></li><li><p><code>awk -F &quot;\&quot;&quot; '&#123;print $1$2&#125;'</code>: 去掉双引号。</p></li><li><p><code>awk 'BEGIN&#123;sum=0 ;count=0&#125; &#123;sum +=$2; count++;&#125;  END &#123;print &quot; sum=&quot;sum&quot; count=&quot;count &quot; avg=&quot;sum/count&#125;'</code>: 对第二列数据进行求和、计数和平均值操作，最后输出结果。</p></li></ol><p>以上命令的意义是查找符合条件的行，提取第 6 列和倒数第二列的数据，去掉双引号，对第二列数据进行统计分析，并输出结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">less test.log |grep &quot;GET http /api/algo/allocation?&quot;|awk &#x27;</span><br><span class="line">BEGIN &#123; FS=&quot; &quot;; OFS=&quot;,&quot; &#125;</span><br><span class="line">&#123;</span><br><span class="line">    # 提取时间部分和延迟值</span><br><span class="line">    time=$1 &quot; &quot; $2; </span><br><span class="line">    delay=$7; </span><br><span class="line">    gsub(/[^0-9]/, &quot;&quot;, delay); </span><br><span class="line"></span><br><span class="line">    # 格式化时间为每分钟</span><br><span class="line">    minute=substr(time, 1, 19);</span><br><span class="line"></span><br><span class="line">    # 统计每分钟的请求数量和总延迟</span><br><span class="line">    count[minute]++;</span><br><span class="line">    sum[minute]+=delay;</span><br><span class="line">&#125;</span><br><span class="line">END &#123;</span><br><span class="line">    print &quot;Minute,Requests,Average Delay (ms)&quot;;</span><br><span class="line">    for (m in count) &#123;</span><br><span class="line">        avg=sum[m]/count[m];</span><br><span class="line">        print m &quot;,&quot; count[m] &quot;,&quot; avg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;  | column -t -s &quot;,&quot; |sort -k1 &gt;ttlog.2</span><br></pre></td></tr></table></figure><h2 id="sort">sort</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">less stdout |grep &quot;search&quot; |awk -F &#x27;/&#x27; &#x27;&#123;print $3 $4&#125;&#x27; |awk -F &#x27;?&#x27; &#x27;&#123;print $1&#125;&#x27; |sort -k 1|uniq -c |sort -nk 1</span><br><span class="line"></span><br><span class="line">sort -t &#x27;,&#x27; 指定 &#x27;,&#x27;分隔</span><br><span class="line">sort -r  从大到小</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是一个Linux命令行管道，用于对标准输出进行过滤、提取和排序。下面是每个命令的解释：</p><ol><li><code>less stdout</code>: 将标准输出传递给<code>less</code>命令，以便以分页方式查看内容。</li><li><code>grep &quot;search&quot;</code>: 在输入中搜索包含&quot;search&quot;关键字的行。</li><li><code>awk -F '/' '&#123;print $3 $4&#125;'</code>: 使用&quot;/&quot;作为字段分隔符，提取第三个和第四个字段，并将它们打印出来。</li><li><code>awk -F '?' '&#123;print $1&#125;'</code>: 使用&quot;?&quot;作为字段分隔符，提取第一个字段，并将其打印出来。</li><li><code>sort -k 1</code>: 以第一个字段为键进行排序。</li><li><code>uniq -c</code>: 统计相邻的重复行，并显示每个行重复出现的次数。</li><li><code>sort -nk 1</code>: 按照第一个字段的数值排序（以数字方式进行排序）。</li></ol><p>请注意，这只是一个示例命令，具体的使用场景和输入数据可能需要进行调整。less stdout |grep “search” |awk -F ‘/’ ‘{print $3 $4}’ |awk -F ‘?’ ‘{print $1}’ |sort -k 1|uniq -c |sort -nk 1</p><h2 id="sed">sed</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">不加参数i就只看到结果，没写入a.txt文件</span><br><span class="line"></span><br><span class="line">1，删除首行</span><br><span class="line">sed -i &#x27;1d&#x27; a.txt</span><br><span class="line"></span><br><span class="line">2，删除前100行</span><br><span class="line"></span><br><span class="line">sed -i &#x27;1,100d&#x27; a.txt</span><br><span class="line"></span><br><span class="line">3，删除尾行</span><br><span class="line">sed -i &#x27;$d&#x27; a.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="grep">grep</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat access1-20240320.log.wapp* | grep &quot;GET /tj_sy_access.htm?&quot; | grep -v &quot;list=2&quot;  |grep -oP &#x27;(?&lt;=proId=)[^&amp;]+&#x27; |sed &#x27;s/%2C/,/g&#x27; | tr &#x27;,&#x27; &#x27;\n&#x27; |grep -Fwf ../AdProduct |wc -l</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>逐步解释每个部分的作用：</p><ol><li><p><code>cat access1-20240320.log.wapp*</code>：这个命令使用<code>cat</code>命令将所有以<code>access1-20240320.log.wapp</code>开头的文件内容连接起来。</p></li><li><p><code>grep &quot;GET /tj_sy_access.htm?&quot;</code>：这个命令使用<code>grep</code>命令过滤出包含<code>GET /tj_sy_access.htm?</code>的行，即匹配特定URL的访问记录。</p></li><li><p><code>grep -v &quot;list=2&quot;</code>：这个命令使用<code>grep</code>命令过滤掉包含<code>list=2</code>的行，即排除特定参数的访问记录。</p></li><li><p><code>grep -oP '(?&lt;=proId=)[^&amp;]+'</code>：这个命令使用<code>grep</code>命令和正则表达式，提取出<code>proId</code>参数的值。<code>(?&lt;=proId=)</code>是一个正则表达式的lookbehind断言，用于匹配<code>proId=</code>前面的内容，<code>[^&amp;]+</code>表示匹配一个或多个非<code>&amp;</code>字符。<br>这里的<code>-o</code>参数表示只输出匹配到的内容，<code>-P</code>参数表示使用Perl兼容的正则表达式。</p></li><li><p><code>sed 's/%2C/,/g'</code>：这个命令使用<code>sed</code>命令将<code>%2C</code>替换为逗号<code>,</code>，因为<code>%2C</code>是URL编码中的逗号。</p></li><li><p><code>tr ',' '\n'</code>：这个命令使用<code>tr</code>命令将逗号<code>,</code>替换为换行符<code>\n</code>，以便每个<code>proId</code>值占一行。</p></li><li><p><code>grep -Fwf ../AdProduct</code>：这个命令使用<code>grep</code>命令从文件<code>../AdProduct</code>中匹配<code>proId</code>值。  <code>-F</code>表示按照固定字符串进行匹配，<code>-w</code>表示匹配整个单词，<code>-f</code>表示从文件中读取模式。<br>通俗来讲，就是从<code>../AdProduct</code>文件中匹配<code>proId</code>值，如果匹配成功，则输出该行。</p></li><li><p><code>wc -l</code>：这个命令使用<code>wc</code>命令统计匹配到的行数，即特定<code>proId</code>值的访问次数。</p></li></ol><p>总结起来，这个命令的作用是统计日志文件中特定URL的访问次数，其中排除了特定参数的访问记录，并且只统计匹配到的<code>proId</code>值在<code>../AdProduct</code>文件中存在的次数。</p><h1 id="reference">reference</h1><ol><li><a href="https://www.cnblogs.com/along21/p/10366886.html">Linux文本三剑客超详细教程—grep、sed、awk - alonghub - 博客园 (cnblogs.com)</a></li><li><a href="https://www.linuxcool.com/">Linux命令大全(手册) – 真正好用的Linux命令在线查询网站 (linuxcool.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-7-性能分析工具</title>
      <link href="/posts/20231121183241-8e391c63.html"/>
      <url>/posts/20231121183241-8e391c63.html</url>
      
        <content type="html"><![CDATA[<p>系统性能量化分析-7-性能分析工具</p><p>系统分析的层次</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231122-152824.png" alt="image-20231122152648114"></p><h1 id="工具总结">工具总结</h1><h2 id="静态分析工具-命令">静态分析工具/命令</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231122-153129.png" alt="img"></p><h2 id="性能分析工具-命令">性能分析工具/命令</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231122-153217.png" alt="img"></p><h2 id="微基准">微基准</h2><p>不同组件的压力测试</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231122-153239.png" alt="img"></p><h2 id="调优工具">调优工具</h2><p>调优、优化设置配置</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231122-153309.png" alt="img"></p><h1 id="基本分析工具-命令">基本分析工具/命令</h1><ol><li>uptime<br>统计1, 5 and 15 分钟的Load平均值。如果Load值大于Core的数量，意味 CPU饱和 (100% utilized</li><li>ps<br>进状态</li><li>top<br>系统状态</li><li>htop<br>top的进阶命令</li><li>mpstat<br>CPU 状态</li><li>iostat：<br>Disk I/O状态</li><li>vmsat<br>虚拟内存</li><li>free<br>内存使用</li><li>ping</li><li>nicstat<br>查看网卡利用率和吞吐量</li><li>dstat</li></ol><h1 id="进阶分析工具-命令">进阶分析工具/命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sar</span><br><span class="line">netstat</span><br><span class="line">pidstat</span><br><span class="line">strace</span><br><span class="line">tcpdump</span><br><span class="line">blktrace</span><br><span class="line">iotop</span><br><span class="line">sysctl: 内核参数信息</span><br><span class="line">/proc</span><br></pre></td></tr></table></figure><h2 id="1-sar">1. sar</h2><blockquote><p>监控工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">(base) [iprobe@node118 ~]$ sar -h</span><br><span class="line">Usage: sar [ options ] [ &lt;interval&gt; [ &lt;count&gt; ] ]</span><br><span class="line">Main options and reports:</span><br><span class="line">        -b      I/O and transfer rate statistics</span><br><span class="line">        -B      Paging statistics</span><br><span class="line">        -d      Block device statistics</span><br><span class="line">        -F [ MOUNT ]</span><br><span class="line">                Filesystems statistics</span><br><span class="line">        -H      Hugepages utilization statistics</span><br><span class="line">        -I &#123; &lt;int&gt; | SUM | ALL | XALL &#125;</span><br><span class="line">                Interrupts statistics</span><br><span class="line">        -m &#123; &lt;keyword&gt; [,...] | ALL &#125;</span><br><span class="line">                Power management statistics</span><br><span class="line">                Keywords are:</span><br><span class="line">                CPU     CPU instantaneous clock frequency</span><br><span class="line">                FAN     Fans speed</span><br><span class="line">                FREQ    CPU average clock frequency</span><br><span class="line">                IN      Voltage inputs</span><br><span class="line">                TEMP    Devices temperature</span><br><span class="line">                USB     USB devices plugged into the system</span><br><span class="line">        -n &#123; &lt;keyword&gt; [,...] | ALL &#125;</span><br><span class="line">                Network statistics</span><br><span class="line">                Keywords are:</span><br><span class="line">                DEV     Network interfaces</span><br><span class="line">                EDEV    Network interfaces (errors)</span><br><span class="line">                NFS     NFS client</span><br><span class="line">                NFSD    NFS server</span><br><span class="line">                SOCK    Sockets (v4)</span><br><span class="line">                IP      IP traffic      (v4)</span><br><span class="line">                EIP     IP traffic      (v4) (errors)</span><br><span class="line">                ICMP    ICMP traffic    (v4)</span><br><span class="line">                EICMP   ICMP traffic    (v4) (errors)</span><br><span class="line">                TCP     TCP traffic     (v4)</span><br><span class="line">                ETCP    TCP traffic     (v4) (errors)</span><br><span class="line">                UDP     UDP traffic     (v4)</span><br><span class="line">                SOCK6   Sockets (v6)</span><br><span class="line">                IP6     IP traffic      (v6)</span><br><span class="line">                EIP6    IP traffic      (v6) (errors)</span><br><span class="line">                ICMP6   ICMP traffic    (v6)</span><br><span class="line">                EICMP6  ICMP traffic    (v6) (errors)</span><br><span class="line">                UDP6    UDP traffic     (v6)</span><br><span class="line">        -q      Queue length and load average statistics</span><br><span class="line">        -r      Memory utilization statistics</span><br><span class="line">        -R      Memory statistics</span><br><span class="line">        -S      Swap space utilization statistics</span><br><span class="line">        -u [ ALL ]</span><br><span class="line">                CPU utilization statistics</span><br><span class="line">        -v      Kernel table statistics</span><br><span class="line">        -w      Task creation and system switching statistics</span><br><span class="line">        -W      Swapping statistics</span><br><span class="line">        -y      TTY device statistics</span><br></pre></td></tr></table></figure></blockquote><h3 id="u">-u</h3><p><code>-u</code>选项用于显示CPU使用情况的统计信息。下面是<code>-u</code>选项中各指标的具体含义：</p><ul><li><code>%user</code>：用户态CPU使用百分比，表示在用户进程中花费的CPU时间百分比。</li><li><code>%nice</code>：NICE优先级用户态CPU使用百分比，表示在NICE优先级较高的用户进程中花费的CPU时间百分比。</li><li><code>%system</code>：系统态CPU使用百分比，表示在内核进程中花费的CPU时间百分比。</li><li><code>%iowait</code>：IO等待时间百分比，表示CPU因为等待I/O操作完成而空闲的时间百分比。</li><li><code>%steal</code>：虚拟化环境中发生的处理器偷取时间百分比，表示由于其他虚拟机或主机线程需要而导致的CPU时间被偷取的百分比。</li><li><code>%idle</code>：CPU空闲时间百分比，表示CPU处于空闲状态的时间百分比。</li></ul><h3 id="b">-b</h3><p><code>-b</code>选项用于显示磁盘I/O统计信息。下面是<code>-b</code>选项中各指标的具体含义：</p><ul><li><code>tps</code>：每秒传输的I/O请求数，表示每秒处理的独立I/O请求的数量。</li><li><code>rtps</code>：每秒读取的块设备I/O请求数，表示每秒从块设备读取数据的请求数量。</li><li><code>wtps</code>：每秒写入的块设备I/O请求数，表示每秒向块设备写入数据的请求数量。</li><li><code>bread/s</code>：每秒读取的块设备数据量，表示每秒从块设备读取的字节数。</li><li><code>bwrtn/s</code>：每秒写入的块设备数据量，表示每秒向块设备写入的字节数。</li></ul><p>这些指标反映了磁盘I/O的使用情况，可以帮助我们了解系统的磁盘读写负载情况和性能瓶颈</p><h3 id="d">-d</h3><p><code>-d</code>选项用于显示磁盘活动统计信息。下面是<code>-d</code>选项中各指标的具体含义：</p><ul><li><code>tps</code>：每秒传输的I/O请求数，表示每秒处理的独立I/O请求的数量。</li><li><code>rd_sec/s</code>：每秒从磁盘读取的数据量，以字节为单位。</li><li><code>wr_sec/s</code>：每秒写入磁盘的数据量，以字节为单位。</li><li><code>avgrq-sz</code>：平均每次I/O请求的数据大小，以扇区为单位。</li><li><code>avgqu-sz</code>：平均I/O队列长度，表示平均每个设备的I/O请求队列中的请求数。</li><li><code>await</code>：平均I/O等待时间，表示I/O请求从提交到完成所花费的平均时间，以毫秒为单位。</li><li><code>svctm</code>：平均I/O请求的服务时间，表示处理单个I/O请求所花费的平均时间，以毫秒为单位。</li><li><code>%util</code>：磁盘利用率，表示在采样间隔内部分或全部时间内，设备处于活动状态的百分比。</li></ul><p>这些指标反映了磁盘的读写活动情况，可以帮助我们了解系统的磁盘负载情况、性能瓶颈以及磁盘的利用率情况。</p><h2 id="linux-proc">linux  /proc</h2><p>linux的 /proc文件系统</p><h1 id="高级工具">高级工具</h1><ol><li>Perf<br>Perf Event 是一款随 Linux 内核代码一同发布和维护的性能诊断工具，由内核社区维护和发展</li><li>Dtrace<br>DTrace（全称Dynamic Tracing)，是由 Sun™ 开发的一个用来在生产和试验性生产系统上找出系统瓶颈的工具，可以对内核(kernel)和用户 应用程序(user application)动态跟踪</li><li>Systemtap<br>SystemTap 是监控和跟踪运行中的Linux 内核的操作</li></ol><h2 id="Perf">Perf</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231122-153820.png" alt="img"></p><ol><li>perf top</li><li>perf stat</li><li>perf list</li><li>perf flame</li><li></li></ol><h2 id="DTrace">DTrace</h2><p>Ext4延迟分析：DTrace</p><p>Sysstemtap</p><h1 id="top-down-分析">top-down  分析</h1><p>Top-down分析是一种全面的、从整体到部分的分析策略，通常用于性能分析和调试代码。在计算机领域中，尤其是在性能分析领域，Top-down方法学由Intel提出，并已经成为服务器、桌面机领域进行软件性能分析的标准方法之一。</p><p>具体来说，我们可以通过使用perf、ebpf这样的工具来获取一些数据，比如了解这台机器上到底发生了多少次cache-miss。这种从整体到部分的分析方式可以帮助我们更好地理解代码的执行过程，进而优化代码的性能。</p><h2 id="top-down-微软架构分析-TMA">top-down 微软架构分析  TMA</h2><h1 id="reference">reference</h1><ol><li><a href="https://www.brendangregg.com/linuxperf.html">https://www.brendangregg.com/linuxperf.html</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能量化 </tag>
            
            <tag> 性能分析工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习经典数据集</title>
      <link href="/posts/20231118153859-b3f25ef5.html"/>
      <url>/posts/20231118153859-b3f25ef5.html</url>
      
        <content type="html"><![CDATA[<p>深度学习经典数据集</p><h1 id="图像识别领域">图像识别领域</h1><h2 id="1-MNIST-1998">1. MNIST (1998)</h2><p><a href="http://yann.lecun.com/exdb/mnist/">MNIST</a></p><ul><li>数据集出处：MNIST数据集由Yann LeCun、Corinna Cortes和Christopher J.C. Burges创建，并由美国国家标准与技术研究所（NIST）提供。</li><li>简介：MNIST是一个手写数字图像数据集，包含了6万个训练样本和1万个测试样本。</li><li>学术评价：该数据集被广泛用于机器学习和深度学习算法的入门和基准测试，用于手写数字识别任务。</li></ul><h2 id="2-CIFAR-10-2009">2. CIFAR-10 (2009)</h2><p><a href="https://www.cs.toronto.edu/~kriz/cifar.html">CIFAR-10</a></p><ul><li>数据集出处：CIFAR-10数据集由Alex Krizhevsky、Vinod Nair和Geoffrey Hinton创建。</li><li>简介：CIFAR-10是一个10类图像数据集，包含10个不同的标签，每个标签有6000张32x32彩色图像，总共有60000张图像。数据集分为50000张训练图像和10000张测试图像。</li><li>学术评价：CIFAR-10是一个广泛用于计算机视觉和深度学习算法的图像数据集，用于图像识别和分类任务。</li></ul><h2 id="3-ImageNet-2011">3. ImageNet (2011)</h2><p><a href="http://www.image-net.org/">ImageNet</a></p><ul><li>数据集出处：ImageNet数据集由李飞飞和普林斯顿视觉机器学习中心创建。</li><li>简介：ImageNet是一个大规模的图像分类数据集，包含14.2万个训练样本和5.4万个测试样本，总共有1000个不同的类别。每张图像都被标记为其中一个类别。</li><li>学术评价：ImageNet是计算机视觉和深度学习领域最著名的数据集之一，用于图像分类、对象检测和识别等任务。该数据集的挑战推动了深度学习算法的快速发展和创新。</li></ul><h2 id="4-Pascal-VOC-2009-2012">4. Pascal VOC (2009 - 2012)</h2><p><a href="http://host.robots.ox.ac.uk/pascal/VOC/">Pascal VOC</a></p><ul><li>数据集出处：Pascal VOC数据集由Visual Object Classes Challenge组织提供。</li><li>简介：Pascal VOC是一个用于对象检测和图像分割的挑战赛数据集，包含约9千个带有标签的图像和视频帧。该数据集包含20个不同的对象类别。</li><li>学术评价：Pascal VOC是计算机视觉领域的重要挑战赛之一，推动了对象检测和图像分割技术的进步。该数据集也常用于评估和比较不同算法的性能。</li></ul><h2 id="5-COCO-2014-2017">5. COCO (2014 - 2017)</h2><p><a href="http://cocodataset.org/#home">COCO</a></p><ul><li>数据集出处：COCO数据集由Microsoft和研究机构共同创建。</li><li>简介：COCO是一个大规模的目标检测、分割和关键点检测数据集，包含超过20万个图像和超过50万个注释。该数据集包含80个不同的对象类别。</li><li>学术评价：COCO是计算机视觉领域最全面、最具有挑战性的数据集之一，推动了目标检测、分割和关键点检测技术的快速发展和创新。该数据集也被广泛应用于医学图像分析和自然语言处理领域。</li></ul><h2 id="6-ILSVRC-2012-2017">6. ILSVRC (2012 - 2017)</h2><p><a href="http://www.image-net.org/challenges/LSVRC/">ILSVRC</a></p><ul><li>数据集出处：ILSVRC数据集由ImageNet组织提供。</li><li>简介：ILSVRC是ImageNet挑战赛的一部分，用于图像分类任务。该挑战赛吸引了众多研究者和企业参加，评估算法的准确率和性能。ILSVRC包含约14万张训练图像和5万张测试图像。</li><li>学术评价：ILSVRC挑战赛推动了深度学习和计算机视觉领域的快速发展和创新，成为评估图像分类算法性能的重要基准之一。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h2 id="7-Places-2014-2017">7. Places (2014 - 2017)</h2><p><a href="http://places2.csail.mit.edu/">Places</a></p><ul><li><p>数据集出处：Places数据集由麻省理工学院人工智能实验室创建。</p></li><li><p>简介：Places是一个大规模的场景分类数据集，包含超过36万张高质量图像，涵盖了365个不同的场景类别。该数据集旨在促进对图像场景分类的研究。</p></li><li><p>学术评价：Places数据集是计算机视觉领域的重要数据集之一，用于评估图像场景分类算法的性能。该数据集推动了场景分类技术的创新和发展，成为评估算法性能的重要基准之一。</p></li></ul><h1 id="目标检测领域">目标检测领域</h1><h2 id="1-PASCAL-VOC-Challenge-2005-2012">1. PASCAL VOC Challenge (2005 - 2012)</h2><p><a href="http://host.robots.ox.ac.uk/pascal/VOC/index.html">PASCAL VOC</a></p><ul><li>数据集出处：PASCAL VOC挑战赛由Visual Object Classes Challenge组织提供。</li><li>简介：PASCAL VOC挑战赛是一个目标检测和物体识别的挑战赛，评估算法在识别和定位图像中物体的能力。该挑战赛的数据集包含约10万个图像和20个不同的对象类别。</li><li>学术评价：PASCAL VOC挑战赛推动了目标检测和物体识别技术的快速发展和创新，成为评估算法性能的重要基准之一。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h2 id="2-ImageNet-ILSVRC-2012-2017">2. ImageNet ILSVRC (2012 - 2017)</h2><p><a href="http://www.image-net.org/challenges/LSVRC/">ImageNet ILSVRC</a></p><ul><li>数据集出处：ImageNet ILSVRC数据集由ImageNet组织提供。</li><li>简介：ImageNet ILSVRC是ImageNet挑战赛的一部分，用于目标检测任务。该挑战赛吸引了众多研究者和企业参加，评估算法的准确率和性能。ILSVRC包含约1.3万个类别的130万张图像。</li><li>学术评价：ImageNet ILSVRC挑战赛推动了深度学习和计算机视觉领域的快速发展和创新，成为评估目标检测算法性能的重要基准之一。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h2 id="3-COCO-2014-2017">3. COCO (2014 - 2017)</h2><p><a href="http://cocodataset.org/#home">COCO</a></p><ul><li>数据集出处：COCO数据集由Microsoft和研究机构共同创建。</li><li>简介：COCO是一个大规模的目标检测、分割和关键点检测数据集，包含超过20万个图像和超过50万个注释。该数据集包含80个不同的对象类别。</li><li>学术评价：COCO是计算机视觉领域最全面、最具有挑战性的数据集之一，推动了目标检测、分割和关键点检测技术的快速发展和创新。该数据集也被广泛应用于医学图像分析和自然语言处理领域。</li></ul><h2 id="4-YOLO-You-Only-Look-Once-Challenge-2016">4. YOLO (You Only Look Once) Challenge (2016)</h2><p><a href="https://www.kaggle.com/c/yolo-challenge">YOLO Challenge</a></p><ul><li>数据集出处：YOLO Challenge由Kaggle平台提供。</li><li>简介：YOLO Challenge是一个目标检测挑战赛，评估算法在实时目标检测任务上的性能。该挑战赛的数据集包含约15万个图像，涵盖了多个不同的对象类别。</li><li>学术评价：YOLO Challenge推动了实时目标检测技术的快速发展和创新，为相关领域的研究提供了重要的参考依据。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h2 id="5-SSD-Single-Shot-MultiBox-Detector-Challenge-2016">5. SSD (Single Shot MultiBox Detector) Challenge (2016)</h2><p><a href="https://www.kaggle.com/c/ssd-challenge">SSD Challenge</a></p><ul><li>数据集出处：SSD Challenge由Kaggle平台提供。</li><li>简介：SSD Challenge是一个目标检测挑战赛，评估算法在单次射击多框检测任务上的性能。该挑战赛的数据集包含约6万个图像，涵盖了多个不同的对象类别。</li><li>学术评价：SSD Challenge推动了单次射击多框检测技术的快速发展和创新，为相关领域的研究提供了重要的参考依据。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h2 id="6-RetinaNet-Challenge-2017">6. RetinaNet Challenge (2017)</h2><p><a href="https://www.kaggle.com/c/retinanet-challenge">RetinaNet Challenge</a></p><ul><li>数据集出处：RetinaNet Challenge由Kaggle平台提供。</li><li>简介：RetinaNet Challenge是一个目标检测挑战赛，评估算法在解决倾斜和遮挡问题上的性能。该挑战赛的数据集包含约3万个图像，涵盖了多个不同的对象类别。</li><li>学术评价：RetinaNet Challenge推动了解决倾斜和遮挡问题的技术的快速发展和创新，为相关领域的研究提供了重要的参考依据。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h2 id="7-Faster-R-CNN-Challenge-2017">7. Faster R-CNN Challenge (2017)</h2><p><a href="https://www.kaggle.com/c/fasterrcnn-challenge">Faster R-CNN Challenge</a></p><ul><li>数据集出处：Faster R-CNN Challenge由Kaggle平台提供。</li><li>简介：Faster R-CNN Challenge是一个目标检测挑战赛，评估算法在快速区域卷积神经网络上的性能。该挑战赛的数据集包含约2万个图像，涵盖了多个不同的对象类别。</li><li>学术评价：Faster R-CNN Challenge推动了快速区域卷积神经网络技术的快速发展和创新，为相关领域的研究提供了重要的参考依据。该挑战赛也促进了不同算法之间的竞争和发展。</li></ul><h1 id="推荐算法领域">推荐算法领域</h1><p>合集：<a href="https://recbole.io/cn/dataset_list.html">https://recbole.io/cn/dataset_list.html</a></p><h2 id="1-Netflix-2006">1. Netflix (2006)</h2><p><a href="https://www.netflix.com/">Netflix</a></p><ul><li>数据集出处：Netflix是一家在线电影租赁公司，其数据集由用户对电影的评分和电影元数据组成。</li><li>简介：Netflix数据集包含了超过4万个电影和1亿个用户评分，每个用户对每个电影都有一个评分值，范围从1到5分。</li><li>学术评价：该数据集被广泛用于推荐算法研究和基准测试，用于电影推荐任务。</li></ul><h2 id="2-Movielens-2007">2. Movielens (2007)</h2><p><a href="https://grouplens.org/datasets/movielens/">MovieLens | GroupLens</a><br><a href="http://www.movielens.org/">Movielens</a></p><ul><li>数据集出处：Movielens是一个在线电影推荐系统，其数据集由用户对电影的评分和电影元数据组成。</li><li>简介：Movielens数据集包含了超过20万用户对超过1万部电影的评分，每个用户对每个电影都有一个评分值，范围从1到5分。</li><li>学术评价：该数据集被广泛用于推荐算法研究和基准测试，用于电影推荐任务。</li></ul><h2 id="3-Yahoo-Music-2008">3. Yahoo! Music (2008)</h2><p><a href="https://www.ysearchblog.com/2008/12/15/introducing-the-yahoo-music-dataset/">Yahoo! Music</a></p><ul><li>数据集出处：Yahoo! Music是一个音乐流媒体平台，其数据集由用户对歌曲的播放记录和歌曲元数据组成。</li><li>简介：Yahoo! Music数据集包含了超过30万首歌曲和超过100万用户的播放记录，每个用户对每个歌曲都有一个播放次数。</li><li>学术评价：该数据集被广泛用于音乐推荐算法研究和基准测试，用于歌曲推荐任务。</li></ul><h2 id="4-Amazon-2014">4. Amazon(2014)</h2><p><a href="https://jmcauley.ucsd.edu/data/amazon/links.html">https://jmcauley.ucsd.edu/data/amazon/links.html</a></p><ul><li>数据集出处：Amazon是一个在线购物平台，其数据集由用户对商品的评分和商品元数据组成。包括电子产品、图书、服装、食品等多个类别。</li><li>简介：Amazon数据集包含了超过1亿个商品评分和超过1万个商品的信息。</li><li>学术评价：该数据集被广泛用于商品推荐算法研究和基准测试，用于商品推荐任务。</li></ul><h2 id="5-Foursquare-2014">5. Foursquare (2014)</h2><p><a href="https://foursquare.com/">Foursquare</a></p><ul><li>数据集出处：Foursquare是一家基于位置服务的社交网络公司，其数据集由用户的位置签到信息和地点元数据组成。</li><li>简介：Foursquare数据集包含了超过10亿个地点签到记录和超过50万个地点的信息。</li><li>学术评价：该数据集被广泛用于位置推荐算法研究和基准测试，用于地点推荐任务。</li></ul><h2 id="6-Yelp-2014">6. Yelp (2014)</h2><p><a href="https://www.yelp.com/">Yelp</a></p><ul><li>数据集出处：Yelp是一家基于位置的在线评论平台，其数据集由用户的评论信息和地点元数据组成。</li><li>简介：Yelp数据集包含了超过370万个商家评论和超过3万商家的信息。</li><li>学术评价：该数据集被广泛用于位置推荐算法研究和基准测试，用于地点推荐任务。</li></ul><h2 id="7-IMDB-2015">7. IMDB (2015)</h2><p><a href="https://www.imdb.com/">IMDB</a></p><ul><li>数据集出处：IMDB是一个在线电影数据库，其数据集由用户对电影的评分和电影元数据组成。</li><li>简介：IMDB数据集包含了超过4万部电影的评分信息，每个用户对每个电影都有一个评分值，范围从1到10分。</li><li>学术评价：该数据集被广泛用于电影推荐算法研究和基准测试，用于电影推荐任务。</li></ul><h1 id="自然语言处理领域">自然语言处理领域</h1><h2 id="1-Brown-Corpus-1961">1. Brown Corpus (1961)</h2><p><a href="https://www.ldc.upenn.edu/collections/collocations">Brown Corpus</a></p><ul><li>数据集出处：Brown Corpus是由美国布朗大学开发的大型英语语料库，是自然语言处理领域最早的公开语料库之一。</li><li>简介：Brown Corpus包含了超过1百万个单词，涵盖了多个主题和文体的文本。</li><li>学术评价：该数据集被广泛用于语言学和自然语言处理研究，为研究者提供了大量的真实语言数据。</li></ul><h2 id="2-Wall-Street-Journal-1987">2. Wall Street Journal (1987)</h2><p><a href="https://www.ldc.upenn.edu/collections/sbd-%E8%9F%A0%E8%99%A5">Wall Street Journal</a></p><ul><li>数据集出处：Wall Street Journal是一个美国著名的财经报纸，其数据集由该报纸的新闻文章组成。</li><li>简介：Wall Street Journal数据集包含了超过20万篇新闻文章，涵盖了多个主题和事件。</li><li>学术评价：该数据集被广泛用于自然语言处理和文本挖掘研究，为研究者提供了大量的真实新闻文章数据。</li></ul><h2 id="3-Switchboard-Dialog-Act-Corpus-1997">3. Switchboard Dialog Act Corpus (1997)</h2><p><a href="https://catalog.ldc.upenn.edu/LDC97S1">Switchboard Dialog Act Corpus</a></p><ul><li>数据集出处：Switchboard Dialog Act Corpus是一个英语对话语料库，由美国国家标准技术研究院（NIST）开发。</li><li>简介：Switchboard Dialog Act Corpus包含了超过3千小时的电话对话录音，涵盖了多个主题和场景。</li><li>学术评价：该数据集被广泛用于对话系统研究和自然语言处理应用开发，为研究者提供了真实的对话数据。</li></ul><h2 id="4-Movie-Dialogues-2007">4. Movie Dialogues (2007)</h2><p><a href="https://www.imdb.com/chart/top">Movie Dialogues</a></p><ul><li>数据集出处：Movie Dialogues是一个英语对话语料库，由IMDb网站提供。</li><li>简介：Movie Dialogues包含了超过10万部电影的对话信息，涵盖了多个主题和场景。</li><li>学术评价：该数据集被广泛用于对话系统研究和自然语言处理应用开发，为研究者提供了真实的对话数据。</li></ul><h2 id="5-Web-Crawl-2008">5. Web Crawl (2008)</h2><p><a href="https://www.commoncrawl.org/">Web Crawl</a></p><ul><li>数据集出处：Web Crawl是由Common Crawl网站定期发布的网页爬取数据集。</li><li>简介：Web Crawl包含了从互联网上抓取的大量网页信息，涵盖了多个主题和网站。</li><li>学术评价：该数据集被广泛用于自然语言处理和信息检索研究，为研究者提供了大量的真实网页数据。</li></ul><h2 id="6-Stack-Exchange-2010">6. Stack Exchange (2010)</h2><p><a href="https://stackexchange.com/">Stack Exchange</a></p><ul><li>数据集出处：Stack Exchange是一个问答网站，其数据集由用户提问和回答组成。</li><li>简介：Stack Exchange包含了超过3千万个问题和答案，涵盖了多个主题和技术领域。</li><li>学术评价：该数据集被广泛用于自然语言处理和问答系统研究，为研究者提供了大量的真实问题和答案数据。</li></ul><h2 id="7-English-Web-Texts-2016">7. English Web Texts (2016)</h2><p><a href="https://www.dropbox.com/s/m8pmpjehq4x777g/EWT.zip?dl=0">English Web Texts</a></p><ul><li>数据集出处：English Web Texts是一个大规模的英语文本语料库，由Google公司提供。</li><li>简介：English Web Texts包含了超过万亿个单词的文本数据，涵盖了多个主题和领域。</li><li>学术评价：该数据集被广泛用于自然语言处理和文本挖掘研究，为研究者提供了大量的真实英语文本数据。</li></ul><h1 id="reference">reference</h1>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了解几大AI社区</title>
      <link href="/posts/20231115232139-35d7981b.html"/>
      <url>/posts/20231115232139-35d7981b.html</url>
      
        <content type="html"><![CDATA[<p>了解几大AI社区</p><p>主要有</p><ul><li>机器之心</li><li>hugging face</li><li>智源社区</li><li>aws开源的面向CV的</li></ul><p>当然，我很了解这些AI社区。以下是关于它们的简要介绍：</p><ol><li><p>机器之心（Synced）</p><ul><li>机器之心是一家专注于人工智能和科技的媒体和社区平台，总部位于加拿大多伦多和中国上海，是全球中文人工智能领域最大的媒体平台之一。他们提供人工智能领域的新闻、评论、研究报告等内容，并且组织了许多人工智能相关的活动和会议。</li></ul></li><li><p>Hugging Face</p><ul><li>Hugging Face 是一个以自然语言处理（NLP）为主题的社区平台，致力于提供开源的NLP模型、工具和数据集。他们以Transformer模型为基础，开发了许多流行的NLP工具，比如transformers库。Hugging Face社区也在分享和推广最新的NLP研究成果方面发挥着重要作用。</li></ul></li><li><p>智源社区</p><ul><li>智源社区是一个面向人工智能领域的在线社区平台，致力于构建人工智能从业者的学习、交流和合作平台。该社区提供了丰富的人工智能学习资源、技术文章和行业动态，同时也促进了人工智能领域的开源项目和技术创新。</li></ul><p>当提到提供AI新闻的媒体社区平台时，以下几个社区可能会符合你的需求：</p><ol><li><p><strong>Synced</strong></p><ul><li>机器之心（Synced）是一家专注于人工智能和科技的媒体和社区平台，总部位于加拿大多伦多和中国上海。他们覆盖人工智能领域的新闻、评论、研究报告等内容，并且组织了许多人工智能相关的活动和会议。</li></ul></li><li><p><strong>Towards Data Science</strong></p><ul><li>Towards Data Science 是一个以数据科学和机器学习为主题的社区平台，提供广泛的关于数据科学、机器学习和人工智能的文章、教程和最新动态。</li></ul></li><li><p><strong>KDnuggets</strong></p><ul><li>KDnuggets 是一个知名的数据科学和人工智能门户网站，提供有关数据科学、机器学习、人工智能、大数据和分析的新闻、软件、教程、课程和数据集信息。</li></ul></li><li><p><strong>AI Trends</strong></p><ul><li>AI Trends 是一个专注于人工智能领域的新闻和分析平台，提供关于AI技术、应用和行业动态的报道和评论。</li></ul></li><li><p><strong>Analytics Vidhya</strong></p><ul><li>Analytics Vidhya 是一个数据科学和机器学习社区平台，提供关于数据科学、机器学习和人工智能的教程、文章和竞赛。</li></ul></li><li><p><strong>AI Weekly</strong></p><ul><li>AI Weekly 是一个每周发布AI领域相关新闻和文章的电子邮件通讯，涵盖了人工智能的各个方面，包括技术进展、应用案例和行业趋势。</li></ul></li></ol><p>对于领域内 state of art 模型的对比，以下几个社区可能会符合你的需求：</p><ol><li><p><strong>Hugging Face</strong></p><ul><li>Hugging Face 是一个以自然语言处理（NLP）为主题的社区平台，致力于提供开源的NLP模型、工具和数据集。在 Hugging Face 社区，你可以找到各种 NLP 模型的对比和评估，以及相关的最新动态。</li></ul></li><li><p><strong>Papers with Code</strong></p><ul><li>Papers with Code 是一个专注于提供最新研究论文和相应开源代码的平台。他们致力于将研究成果和代码相结合，帮助研究者更好地理解和复现最新的 state of the art 模型。</li></ul></li><li><p><a href="https://sota.jiqizhixin.com/">机器之心SOTA！模型 (jiqizhixin.com)</a></p><blockquote></blockquote></li><li><p><strong>OpenReview</strong></p><ul><li>OpenReview 是一个提供学术会议论文评审和讨论的开放式在线平台。在这里你可以找到各种领域内的最新研究论文，以及模型的对比和评价信息。</li></ul></li><li><p><strong>Model Zoo</strong></p><ul><li>Model Zoo 是一个开源模型仓库，收集了各种领域内的最新模型和其对应的开源代码，方便研究者和开发者进行模型对比和使用。</li></ul></li><li><p><strong>State of the Art AI</strong></p><ul><li>State of the Art AI 是一个提供各种领域内最新模型和技术的综述和评估的平台，帮助用户了解当前的技术前沿和选择适合的模型。</li></ul></li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="center" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msubsup><mi mathvariant="bold">e</mi><mi>u</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup><mo>=</mo><mi>σ</mi><mo fence="true" stretchy="true" minsize="2.4em" maxsize="2.4em">(</mo><msub><mi mathvariant="bold">W</mi><mn>1</mn></msub><msubsup><mi mathvariant="bold">e</mi><mi>u</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>+</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><msub><mi mathvariant="script">N</mi><mi>u</mi></msub></mrow></munder><mfrac><mn>1</mn><msqrt><mrow><mi mathvariant="normal">∣</mi><msub><mi>N</mi><mi>u</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mi>N</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow></msqrt></mfrac><mo stretchy="false">(</mo><msub><mi mathvariant="bold">W</mi><mn>1</mn></msub><msubsup><mi mathvariant="bold">e</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>+</mo><msub><mi mathvariant="bold">W</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msubsup><mi mathvariant="bold">e</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>⊙</mo><msubsup><mi mathvariant="bold">e</mi><mi>u</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo fence="true" stretchy="true" minsize="2.4em" maxsize="2.4em">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><msubsup><mi mathvariant="bold">e</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msubsup><mo>=</mo><mi>σ</mi><mo fence="true" stretchy="true" minsize="1.8em" maxsize="1.8em">(</mo><msub><mi mathvariant="bold">W</mi><mn>1</mn></msub><msubsup><mi mathvariant="bold">e</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>+</mo><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><msub><mi mathvariant="script">N</mi><mi>i</mi></msub></mrow></munder><mfrac><mn>1</mn><msqrt><mrow><mi mathvariant="normal">∣</mi><msub><mi>N</mi><mi>u</mi></msub><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><msub><mi>N</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi></mrow></msqrt></mfrac><mo stretchy="false">(</mo><msub><mi mathvariant="bold">W</mi><mn>1</mn></msub><msubsup><mi mathvariant="bold">e</mi><mi>u</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>+</mo><msub><mi mathvariant="bold">W</mi><mn>2</mn></msub><mo stretchy="false">(</mo><msubsup><mi mathvariant="bold">e</mi><mi>u</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo>⊙</mo><msubsup><mi mathvariant="bold">e</mi><mi>i</mi><mrow><mo stretchy="false">(</mo><mi>k</mi><mo stretchy="false">)</mo></mrow></msubsup><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo fence="true" stretchy="true" minsize="1.8em" maxsize="1.8em">)</mo><mo separator="true">,</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{gathered}\mathbf{e}_{u}^{(k+1)} =\sigma\biggl(\mathbf{W}_{1}\mathbf{e}_{u}^{(k)}+\sum_{i\in\mathcal{N}_{u}}\frac{1}{\sqrt{|N_{u}||N_{i}|}}(\mathbf{W}_{1}\mathbf{e}_{i}^{(k)}+\mathbf{W}_{2}(\mathbf{e}_{i}^{(k)}\odot\mathbf{e}_{u}^{(k)}))\biggr), \\\mathbf{e}_{i}^{(k+1)} =\sigma\Bigl(\mathbf{W}_{1}\mathbf{e}_{i}^{(k)}+\sum_{u\in{\mathcal N}_{i}}\frac{1}{\sqrt{|N_{u}||N_{i}|}}(\mathbf{W}_{1}\mathbf{e}_{u}^{(k)}+\mathbf{W}_{2}(\mathbf{e}_{u}^{(k)}\odot\mathbf{e}_{i}^{(k)}))\Bigr), \end{gathered}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.1603em;vertical-align:-2.8302em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.3302em;"><span style="top:-5.3302em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathcal mtight" style="margin-right:0.14736em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.1474em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.175em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span><span style="top:-2.895em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mclose"><span class="delimsizing size3">)</span></span><span class="mpunct">,</span></span></span><span style="top:-2.3143em;"><span class="pstrut" style="height:3.45em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8557em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mtight"><span class="mord mathcal mtight" style="margin-right:0.14736em;">N</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3944em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.175em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.935em;"><span class="svg-align" style="top:-3.2em;"><span class="pstrut" style="height:3.2em;"></span><span class="mord" style="padding-left:1em;"><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span></span><span style="top:-2.895em;"><span class="pstrut" style="height:3.2em;"></span><span class="hide-tail" style="min-width:1.02em;height:1.28em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.28em' viewBox='0 0 400000 1296' preserveAspectRatio='xMinYMin slice'><path d='M263,681c0.7,0,18,39.7,52,119c34,79.3,68.167,158.7,102.5,238c34.3,79.3,51.8,119.3,52.5,120c340,-704.7,510.7,-1060.3,512,-1067l0 -0c4.7,-7.3,11,-11,19,-11H40000v40H1012.3s-271.3,567,-271.3,567c-38.7,80.7,-84,175,-136,283c-52,108,-89.167,185.3,-111.5,232c-22.3,46.7,-33.8,70.3,-34.5,71c-4.7,4.7,-12.3,7,-23,7s-12,-1,-12,-1s-109,-253,-109,-253c-72.7,-168,-109.3,-252,-110,-252c-10.7,8,-22,16.7,-34,26c-22,17.3,-33.3,26,-34,26s-26,-26,-26,-26s76,-59,76,-59s76,-60,76,-60zM1001 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.305em;"><span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.13em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf" style="margin-right:0.01597em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.016em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⊙</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathbf">e</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0448em;"><span style="top:-2.4231em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.2198em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2769em;"><span></span></span></span></span></span></span><span class="mclose">))</span><span class="mclose"><span class="delimsizing size2">)</span></span><span class="mpunct">,</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.8302em;"><span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-6-课堂分享-Spark性能评估</title>
      <link href="/posts/20231113215541-9ff1ac5c.html"/>
      <url>/posts/20231113215541-9ff1ac5c.html</url>
      
        <content type="html"><![CDATA[<p>系统性能量化分析-6-课堂分享-Spark性能评估</p><p><a href="https://journalofbigdata.springeropen.com/articles/10.1186/s40537-021-00499-7">https://journalofbigdata.springeropen.com/articles/10.1186/s40537-021-00499-7</a></p><p>用于 Hadoop 集群上 Spark 大数据作业性能表征的并行化模型</p><h1 id="Amdahl’s-Law">Amdahl’s Law</h1><p>衡量：提升一个系统的一个部分的性能对整个系统有多大影响？</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-105741.png" alt="image-20231117105740479"></p><ul><li><p>对于多内核系统或者分布式系统系统<br>nexec 是处理器（或执行器）的数量， f 是串行作业百分比</p></li><li><p>加速比上限：  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3262em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-105811.png" alt="image-20231117105810624"></p><p>考虑到单个处理器运行某个工作负载需要时间 t，在多个处理器上运行的预测运行时为</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-105847.png" alt="image-20231117105846630"></p><p>加速比上限      <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>f</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac1{f}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.3262em;vertical-align:-0.4811em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>处理时间下限是 ft, 由串行部分决定</p><p>运行时间 会随着executors的增加而急剧减少，</p><p>到达一定程度，再增加并行节点数的性价比</p><p>就会很低</p><p>也即大规模并行化，似乎是不可行的 ？？</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-105925.png" alt="image-20231117105925180"></p><h1 id="Gustafson’s-law">Gustafson’s law</h1><p>[1] GUSTAFSON J L. <strong>Reevaluating Amdahl’s law</strong>[J/OL]. Communications of the ACM, 1988, 31(5): 532-533. DOI:<a href="https://doi.org/10.1145/42411.42415">10.1145/42411.42415</a>.</p><ul><li><p>阿姆达定律：在问题确定的情况下，如何做性能加速，</p></li><li><p>工程实践中：更多的是通过性能优化使得一个系统在问题规模可变的情况下，使得运行时间相对固定</p></li><li><p>假设：<br>程序的并行部分会随着问题规模的增加而增加。<br>程序加载、串行瓶颈和 I/O 等构成运行 串行s 部分的时间不会随着问题规模的增大而增加。</p></li></ul><p>这篇论文认为   阿姆达尔加速公式会给对大规模并行化 带来&quot;心理障碍&quot;；加速的衡量标准应该是问题与处理器数量的比例，而不是固定的问题大小。</p><p>所以提出了  <strong>古斯塔夫森定律</strong></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110012.png" alt="image-20231117110012026"></p><p>N 是处理器的数量，<br>s 是串行处理时间，<br>p 是花在程序可并行部分上的时间</p><p>s+p = 1</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110023.png" alt="image-20231117110022776"></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110207.png" alt="image-20231117110207057"></p><p>这里加速比S单调递增，当然实际是不可能，</p><p><strong>问题在于前提假设中，程序的串行部分，也是会随着问题规模，和并行节点数量的变化而变化</strong></p><h1 id="用于-Hadoop-集群上-Spark-大数据作业性能表征的并行化模型">用于 Hadoop 集群上 Spark 大数据作业性能表征的并行化模型</h1><p><a href="https://journalofbigdata.springeropen.com/articles/10.1186/s40537-021-00499-7">https://journalofbigdata.springeropen.com/articles/10.1186/s40537-021-00499-7</a></p><p>用于 Hadoop 集群上 Spark 大数据作业性能表征的并行化模型</p><blockquote><p>Spark 由主节点和工作节点组成<br>有很多可调控的参数:工作节点数，核数，分配内存数，缓存大小等等<br>这里主要考虑并行优化，考虑节点数</p></blockquote><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110308.png" alt="image-20231117110308295"></p><h2 id="现有性能模型不能解释">现有性能模型不能解释</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110336.png" alt="image-20231117110335332"></p><p>从这里可以看到不同负载，</p><p>左边还可以用 阿姆达定律和古斯塔夫森定律解释，右边这个就没法解释了</p><p>区别在于工作负载的不同</p><p>PageRank 不同执行节点之间的通信和IO需求比 wordCount要多</p><h2 id="构建新的评估模型">构建新的评估模型</h2><blockquote><p>t 是在单个执行器中运行应用程序的时间，(可并行部分)<br>nexec 是执行器的数量，<br>t_serial 是在执行节点之间 I/O 、通信所需的额外时间.</p></blockquote><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110436.png" alt="image-20231117110435451"></p><p>公式关键是 tserial。在不了解应用程序内部算法实现的情况下，很难对其进行正确建模。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110504.png" alt="image-20231117110503589"></p><h2 id="公式简化分析">公式简化分析</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110524.png" alt="image-20231117110524136"></p><p>实际，</p><p>a=f(N) ，表示并行部分执行时间，类似于问题算法的时间复杂度</p><p>b=g(N)，决定任务使用多个执行节点时，不同规模数据通信需求的增长情况</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110538.png" alt="image-20231117110537298"></p><h2 id="负载实验">负载实验</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110634.png" alt="image-20231117110634192"></p><h3 id="1-模型拟合较好">1. 模型拟合较好</h3><p>这三个负载</p><p>wordcount, Nweight， SVM</p><p>在 SVM 的情况下（图 16），模型的拟合效果很好，它显示出性能在执行器数量达到一定数量时达到峰值。这正是模型所能解释的情况</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110649.png" alt="image-20231117110648525"></p><h3 id="模型拟合较差">模型拟合较差</h3><p>对于 Pagerank 和 Kmeans 这两种工作负载，模型的拟合效果并不理想（图 17 和 18）。当规模太小、运行时间相对较短时就会出现这种情况</p><p>在前面的工作中，边界的增长速度与 nexec 的平方根成正比。然后，我们将该函数调整为不同的指数，使其成为：</p><p>公式 9 是公式 11 的特例，其中 c = 0.5</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110727.png" alt="image-20231117110726851"></p><p>在通过 Gnuplot [35] 对公式 11 进行拟合后，我们发现当 c = 0.14 时，图 17 中使用的数据拟合得更为精确</p><p>这表明指数函数可以解释我们在这项工作中所针对的 建模并行节点数跟运行时关系</p><p>即运行时间在执行器达到一定数量时达到性能峰值，然后运行时间不断增长，即使增加更多执行器来运行作业，性能也会下降</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110813.png" alt="image-20231117110812350"></p><h3 id="问题规模对模型参数的影响">问题规模对模型参数的影响</h3><p>对于更大的问题规模，Pagerank 与原始公式 非常吻合（图 20）。</p><p>Kmeans 也显示出与公式  更好的拟合（图 21）。这表明，串行部分与问题规模之间的关系也会发生变化。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110907.png" alt="image-20231117110906353"></p><p>就 Pagerank 和 Kmeans 而言，常数 c 会随着问题规模的变化而变化。这是因为，当问题规模太小、作业运行时间只有几秒钟时，不可预测的开销可能会掩盖运行时间的模式。而较长的作业则更为稳定，更容易发现边界（串行部分）的增长模式。其他工作负载需要做更多工作</p><h2 id="comparison-with-Amdahl’s-and-Gustafson’s-laws">comparison with Amdahl’s and Gustafson’s laws</h2><ul><li><p>在运行时间随执行器增加而下降再上升的负载中，我们的模型比 Amdahl 模型或 Gustafson 模型更有效。</p></li><li><p>对于运行时间持续下降直到收敛到一个固定值的情况，三种模型都可能有效</p></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-110926.png" alt="image-20231117110925561"></p><h2 id="总结">总结</h2><ul><li>针对在 Hadoop 集群上运行的 Spark 大数据应用程序的不同工作负载提出了一种新的并行化模型。所提出的模型可以预测通用工作负载的运行时间与执行器数量的函数关系，而无需知道算法是如何实现的，只需通过相对较少的实验来确定模型方程的参数。</li><li>进一步，在通过实验来确定模型方程参数的时候，可以考虑 同时考虑节点数和负载特征</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-111001.png" alt="image-20231117111001056"></p><h1 id="reference">reference</h1><p>[1] GUSTAFSON J L. Reevaluating Amdahl’s law[J/OL]. Communications of the ACM, 1988, 31(5): 532-533. DOI:<a href="https://doi.org/10.1145/42411.42415">10.1145/42411.42415</a>.</p><p>[2] AHMED N, BARCZAK A L C, RASHID M A, 等. A parallelization model for performance characterization of Spark Big Data jobs on Hadoop clusters[J/OL]. Journal of Big Data, 2021, 8(1): 107. DOI:<a href="https://doi.org/10.1186/s40537-021-00499-7">10.1186/s40537-021-00499-7</a>.</p><p>[3] DEB D. Gnuplot Helper – a new Utility for gnuplot Graph Plotting Software[R/OL]. In Review, 2021[2023-11-14]. <a href="https://www.researchsquare.com/article/rs-548261/v1">https://www.researchsquare.com/article/rs-548261/v1</a>. DOI:<a href="https://doi.org/10.21203/rs.3.rs-548261/v1">10.21203/rs.3.rs-548261/v1</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化分析 </tag>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交叉熵</title>
      <link href="/posts/20231103104535-ea101373.html"/>
      <url>/posts/20231103104535-ea101373.html</url>
      
        <content type="html"><![CDATA[<p>交叉熵的一些理解、疑问</p><h1 id="概念">概念</h1><p>交叉熵损失函数是一种常用于分类问题的损失函数，其公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>CrossEntropy</mtext><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo separator="true">,</mo><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo>^</mo></mover><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><msub><mi>y</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mover accent="true"><msub><mi>y</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mo>^</mo></mover><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\text{CrossEntropy}(y_i, \hat{y_i}) = - \sum_{k=1}^K y_{i,k} \log(\hat{y_{i,k}})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">CrossEntropy</span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.1304em;vertical-align:-1.3021em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8479em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">y_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>代表样本<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>的真实标签，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><msub><mi>y</mi><mi>i</mi></msub><mo>^</mo></mover></mrow><annotation encoding="application/x-tex">\hat{y_i}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.25em;"><span class="mord">^</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1944em;"><span></span></span></span></span></span></span></span></span>代表样本<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span>属于每个类别的概率分布，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>是类别数。交叉熵函数可以通过比较真实标签和模型预测标签的差异来衡量模型的错误程度。当模型的输出与真实标签完全匹配时，交叉熵为0；当模型的输出与真实标签不匹配时，交叉熵会增加。在机器学习中，我们通常通过最小化交叉熵损失函数来训练分类模型。</p><h1 id="原理">原理</h1><p>交叉熵损失函数的含义可以从信息论的角度来解释。在信息论中，熵是衡量信息量的一个指标，表示随机变量不确定性的度量。对于一个离散型随机变量<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>，其熵的计算公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>X</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(X) = - \sum_{i=1}^n p(x_i) \log p(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>表示<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>X</mi></mrow><annotation encoding="application/x-tex">X</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">X</span></span></span></span>取值<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">x_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的概率。</p><p>当我们将交叉熵应用于分类问题时，我们可以将真实标签看作一个分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>，将模型预测标签看作一个分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>。假设有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>个类，那么真实标签和模型预测标签都是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>K</mi></mrow><annotation encoding="application/x-tex">K</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span>维的概率向量，每一维表示该样本属于该类别的概率。交叉熵可以用来衡量真实标签<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi></mrow><annotation encoding="application/x-tex">p</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span></span></span></span>和模型预测标签<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi></mrow><annotation encoding="application/x-tex">q</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span></span></span></span>之间的距离，其具体计算公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mtext>CrossEntropy</mtext><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><msub><mi>p</mi><mi>i</mi></msub><mi>log</mi><mo>⁡</mo><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\text{CrossEntropy}(p, q) = - \sum_{i=1}^K p_i \log q_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord">CrossEntropy</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>交叉熵越小，表示模型的输出和真实标签越接近，即模型的预测越准确。在训练神经网络时，我们希望最小化交叉熵损失函数来调整网络参数，使得模型能够更好地预测样本的类别。</p><h1 id="pytorch中实现">pytorch中实现</h1><p>torch.nn.CrossEntropyLoss相当于softmax + log + nllloss</p><p>使用nll loss时，可以这样操作</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nllloss = nn.NLLLoss()</span><br><span class="line">predict = torch.Tensor([[2, 3, 1],</span><br><span class="line">                        [3, 7, 9]])</span><br><span class="line">predict = torch.log(torch.softmax(predict, dim=-1))</span><br><span class="line">label = torch.tensor([1, 2])</span><br><span class="line">nllloss(predict, label)</span><br><span class="line"># output: tensor(0.2684)</span><br></pre></td></tr></table></figure><p>而使用torch.nn.CrossEntropyLoss可以省去softmax + log</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cross_loss = nn.CrossEntropyLoss()</span><br><span class="line"></span><br><span class="line">predict = torch.Tensor([[2, 3, 1],</span><br><span class="line">                        [3, 7, 9]])</span><br><span class="line">label = torch.tensor([1, 2])</span><br><span class="line">cross_loss(predict, label)</span><br><span class="line"># output: tensor(0.2684)</span><br></pre></td></tr></table></figure><h1 id="疑问">疑问</h1><h2 id="1-为什么样本分布和真实分布越接近，交叉熵就会越小，且二者完全一致时，交叉熵最小，且等于真实分布的熵">1. 为什么样本分布和真实分布越接近，交叉熵就会越小，且二者完全一致时，交叉熵最小，且等于真实分布的熵</h2><h3 id="使用分解KL散度证明-连续概率分布">使用分解KL散度证明: 连续概率分布</h3><p>在机器学习中，交叉熵（Cross Entropy）是一种衡量两个概率分布之间差异的指标。当样本分布和真实分布越接近时，它们的交叉熵就越小。</p><p>首先，我们定义样本分布为p(x)，真实分布为q(x)，其中x表示概率分布的变量。交叉熵可以用以下公式表示：</p><p>H(p, q) = -Σp(x) * log(q(x))</p><p>现在我们来推导为什么样本分布和真实分布越接近，交叉熵越小。</p><p>根据交叉熵的定义，我们可以将其展开为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">[</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo stretchy="false">]</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>+</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mo>−</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">[</mo><mtext> </mtext><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">]</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">[</mo><mtext> </mtext><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>−</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext> </mtext><mo stretchy="false">]</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo><mo>+</mo><mi>H</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{align*}H(p, q) &amp;= -\sum_x p(x)\log(q(x)) \\&amp;= -\sum_x p(x)[\log(q(x)) - \log(p(x)) + \log(p(x))] \\&amp;= -\sum_x p(x)\log(q(x)) + \sum_x p(x)\log(p(x)) -\sum_x p(x)\log(p(x))\\&amp;= -\sum_x p(x)[\space   \log(q(x)) -log(p(x)) \space ] + H(p) \\&amp;= \sum_x p(x)[\space   \log(p(x)) -log(q(x)) \space ] + H(p) \\&amp;= D_{KL}(p||q) + H(p) \end{align*}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:14.5001em;vertical-align:-7em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.5em;"><span style="top:-9.5em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span><span style="top:-6.9em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"></span></span><span style="top:-1.7em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"></span></span><span style="top:0.9em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"></span></span><span style="top:3.29em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:7.5em;"><span style="top:-9.5em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span><span style="top:-6.9em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">[</span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))]</span></span></span><span style="top:-4.3em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span><span style="top:-1.7em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">[</span><span class="mspace"> </span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace"> </span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span><span style="top:0.9em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mopen">[</span><span class="mspace"> </span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace"> </span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span><span style="top:3.29em;"><span class="pstrut" style="height:3.05em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:7em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">H(p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>表示真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的熵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{KL}(p||q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>表示真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>相对于样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的KL散度。</p><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA)">熵 (信息论) - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p><a href="https://zh.wikipedia.org/wiki/%E7%9B%B8%E5%AF%B9%E7%86%B5">(KL散度)相对熵 - 维基百科，自由的百科全书 (wikipedia.org)</a></p><p>KL散度的公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">D_{KL}(p||q) = \sum_x p(x) \log \left(\frac{p(x)}{q(x)}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.7em;vertical-align:-1.25em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>分别表示真实分布和样本分布在样本点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">x</span></span></span></span>处的概率。<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{KL}(p||q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>表示真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>相对于样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的KL散度，用来衡量两个分布之间的差异。</p><p>KL散度是一个非对称的度量，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo><mo mathvariant="normal">≠</mo><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>q</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{KL}(p||q) \neq D_{KL}(q||p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel"><span class="mrel"><span class="mord vbox"><span class="thinbox"><span class="rlap"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="inner"><span class="mord"><span class="mrel"></span></span></span><span class="fix"></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mord">∣∣</span><span class="mord mathnormal">p</span><span class="mclose">)</span></span></span></span>。这意味着交换真实分布和样本分布的位置会得到不同的结果。因此，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{KL}(p||q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>表示当使用样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>来近似真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>时，产生的信息损失量。</p><p>需要注意的是，KL散度始终大于等于0，当且仅当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x) = q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>时，KL散度才为0。当样本分布和真实分布越接近时，KL散度逐渐减小，达到最小值0表示两个分布完全一致。</p><p>可以看出，当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p(x) &gt; 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>且<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">q(x)=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">\log\left(\frac{p(x)}{q(x)}\right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8em;vertical-align:-0.65em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">q</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.52em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span>会趋近于负无穷，从而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">D_{KL}(p||q)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span>也会趋近于正无穷。这意味着，当样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>在真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的非零概率处取值为0时，真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>相对于样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>的KL散度就会变成无穷大。</p><p>此外，KL散度还有一个重要性质，即KL散度具有非负性，即<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>D</mi><mrow><mi>K</mi><mi>L</mi></mrow></msub><mo stretchy="false">(</mo><mi>p</mi><mi mathvariant="normal">∣</mi><mi mathvariant="normal">∣</mi><mi>q</mi><mo stretchy="false">)</mo><mo>≥</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">D_{KL}(p||q) \geq 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span><span class="mord mathnormal mtight">L</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mord">∣∣</span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≥</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>。</p><p>这是由于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">log(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>是一个凸函数，因此根据Jensen不等式，</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo fence="true">)</mo></mrow><mo>⩾</mo><mi>log</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><munder><mo>∑</mo><mi>x</mi></munder><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mfrac><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_xp(x)\log\left(\frac{p(x)}{q(x)}\right) \geqslant \log\left(\sum_xp(x)\frac{p(x)}{q(x)}\right) = \log(1) = 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.7em;vertical-align:-1.25em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">(</span></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.9em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size4">)</span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p></blockquote><p><strong>由于KL散度始终大于等于0，当真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>和样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>完全一致时，KL散度为0，因此交叉熵达到最小值。</strong></p><p>而当样本分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>q</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">q(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>与真实分布<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">p(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">p</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>不同步时，KL散度大于0，导致交叉熵也大于0。当样本分布和真实分布越接近时，KL散度逐渐减小，从而交叉熵也逐渐减小。</p><p>举个例子来说明。假设我们有一个二分类问题，样本分布为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0.7</mn><mo separator="true">,</mo><mn>0.3</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0.7, 0.3]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0.7</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.3</span><span class="mclose">]</span></span></span></span>，真实分布为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mn>0.8</mn><mo separator="true">,</mo><mn>0.2</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[0.8, 0.2]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">0.8</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0.2</span><span class="mclose">]</span></span></span></span>，表示两个类别的概率分布。计算它们之间的交叉熵如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>H</mi><mo stretchy="false">(</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo stretchy="false">)</mo><mo>=</mo><mo>−</mo><mo stretchy="false">[</mo><mn>0.7</mn><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0.8</mn><mo stretchy="false">)</mo><mo>+</mo><mn>0.3</mn><mi>log</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>0.2</mn><mo stretchy="false">)</mo><mo stretchy="false">]</mo><mo>≈</mo><mn>0.3567</mn></mrow><annotation encoding="application/x-tex">H(p, q) = -[0.7 \log(0.8) + 0.3 \log(0.2)] \approx 0.3567</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mopen">(</span><span class="mord mathnormal">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">−</span><span class="mopen">[</span><span class="mord">0.7</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">0.8</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0.3</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord">0.2</span><span class="mclose">)]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0.3567</span></span></span></span></span></p><p>可以看到，交叉熵是一个正值，表示样本分布和真实分布之间的差异程度。如果样本分布和真实分布完全一致，交叉熵将为0，表示两个分布完全相同。</p><p>因此，当样本分布和真实分布越接近时，交叉熵越小，当两者完全一致时，交叉熵最小且等于真实分布的熵。</p><h1 id="Reference">Reference</h1><ol><li><a href="https://chat12.yqcloud.top/#/chat/1698236257902">AIchatOS (yqcloud.top)</a></li><li><a href="https://zh.wikipedia.org/zh-sg/%E7%B0%A1%E6%A3%AE%E4%B8%8D%E7%AD%89%E5%BC%8F">琴生不等式 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%86%B5_(%E4%BF%A1%E6%81%AF%E8%AE%BA)">熵 (信息论) - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%9B%B8%E5%AF%B9%E7%86%B5">(KL散度)相对熵 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://zhuanlan.zhihu.com/p/383044774">详解torch.nn.NLLLOSS - 知乎 (zhihu.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 熵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机牛人了解</title>
      <link href="/posts/20231102201527-cb88aeb5.html"/>
      <url>/posts/20231102201527-cb88aeb5.html</url>
      
        <content type="html"><![CDATA[<p>了解一些计算机的牛人</p><h2 id="AI">AI</h2><h3 id="李飞飞">李飞飞</h3><blockquote><p><strong>李飞飞</strong>（1976年7月3日—[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-NY_Times_2012-1">1]</a>），<a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%B8">斯坦福大学</a>首位红杉讲席<a href="https://zh.wikipedia.org/wiki/%E6%95%99%E6%8E%88">教授</a>，<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%B7%A5%E7%A8%8B%E9%99%A2">美国国家工程院</a>院士[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-2">2]</a>，<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E5%8C%BB%E5%AD%A6%E9%99%A2">美国国家医学院</a>院士[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-profile-3">3]</a>[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-CV-4">4]</a>， <a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9B%BD%E6%96%87%E7%90%86%E7%A7%91%E5%AD%A6%E9%99%A2">美国文理科学院</a>（美国艺术与科学院）院士[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-5">5]</a>。曾任职于斯坦福大学人工智能实验室（SAIL）[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-6">6]</a> 、斯坦福视觉实验室[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-7">7]</a>。现为<a href="https://zh.wikipedia.org/wiki/ImageNet">ImageNet</a>的首席科学家和首席研究员[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-8">8]</a>、斯坦福以人为本人工智能研究院（HAI）院长、AI4ALL联合创始人及主席。她的研究领域涉及<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89">计算机视觉</a>、<a href="https://zh.wikipedia.org/wiki/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">机器学习</a>、<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0">深度学习</a>、<a href="https://zh.wikipedia.org/wiki/%E8%AA%8D%E7%9F%A5%E7%A5%9E%E7%B6%93%E7%A7%91%E5%AD%B8">认知神经科学</a>等[<a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B#cite_note-profile-3">3]</a>。</p><h2 id="人物经历">人物经历</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231107-184905" alt="李飞飞"></p><p>1976年，李飞飞出生于北京，在四川成都成长，16岁随父母移居美国新泽西州。</p><p>1995年，从美国新泽西州帕西帕尼高中 [12] ，以全期班第六名的成绩毕业，并获得普林斯顿大学奖学金，进入普林斯顿大学学习。</p><p>1999年，从普林斯顿大学本科毕业，获得物理学学士，之后赴西藏研究一年藏药。</p><p>2000年，进入加州理工学院，开始研究生工作，她的研究生课程得到了<a href="https://baike.baidu.com/item/%E7%BE%8E%E5%9B%BD%E5%9B%BD%E5%AE%B6%E7%A7%91%E5%AD%A6%E5%9F%BA%E9%87%91%E4%BC%9A/3454642?fromModule=lemma_inlink">美国国家科学基金会</a>研究生研究奖学金和新美国人Paul &amp; Daisy Soros奖学金的支持，她的主要工作博士生导师是Pietro Perona，兼职主管Christof Koch。</p><p>2005年，从加州理工学院博士研究生毕业，获得电子工程博士学位。</p><p>2005年—2006年，担任伊利诺伊大学厄巴纳-香槟分校电机系助理教授。</p><p>2007年—2009年8月，担任普林斯顿大学计算机科学系助理教授 [13] 。</p><p>2009年，加入斯坦福大学，担任助理教授。</p><p>2012年，晋升为斯坦福大学终身职的副教授。</p><p>2012年—2016年，担任斯坦福大学W.M.凯克学院学者（W.M. Keck Faculty Scholar）。</p><p>2013年—2018年，担任斯坦福人工智能实验室主任 [5] 。</p><p>2017年1月—2018年9月，担任Google副总裁，并担任Google Cloud AI/ML首席科学家（属于斯坦福大学休假期间，仍是斯坦福大学教授、斯坦福大学人工智能实验室的主任，仍然指导博士生和博士后） [1] [6] 。</p><p>2019年，担任斯坦福大学人类中心人工智能研究所（HAI）联合主任。</p><p>2020年2月，当选为美国国家工程院院士 [3] ；5月，担任Twitter公司董事会新独立董事 [4] ；10月，当选为美国国家医学院院士 [9] 。</p><p>2021年4月22日，当选为美国艺术与科学院院士 [21] 。</p><p>2023年2月，加入加拿大风险投资机构Radical Ventures，担任科学合伙人。</p><h2 id="主要成就">主要成就</h2><p>李飞飞的工作包括括受认知启发的AI，机器学习，深度学习，计算机视觉和AI+医疗保健，尤其是用于医疗保健交付的环境智能系统。她还从事认知和计算神经科学方面的工作。她发明了ImageNet和ImageNet Challenge，其中ImageNet Challenge是一项重要的大规模数据集和基准测试工作 [9] 。</p></blockquote><h3 id="贾扬清">贾扬清</h3><blockquote><p>贾扬清，<a href="https://baike.baidu.com/item/%E6%B5%99%E6%B1%9F/154399?fromModule=lemma_inlink">浙江</a>绍兴人，本科和研究生阶段就读于<a href="https://baike.baidu.com/item/%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6/111764?fromModule=lemma_inlink">清华大学</a><a href="https://baike.baidu.com/item/%E8%87%AA%E5%8A%A8%E5%8C%96/24604235?fromModule=lemma_inlink">自动化</a>专业，后赴<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6/3298010?fromModule=lemma_inlink">加州大学</a>伯克利<a href="https://baike.baidu.com/item/%E5%88%86%E6%A0%A1/886154?fromModule=lemma_inlink">分校</a>攻读<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6/9132?fromModule=lemma_inlink">计算机科学</a>博士。他在博士期间创立并开源了如今业内耳熟能详的<a href="https://baike.baidu.com/item/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A1%86%E6%9E%B6/22718084?fromModule=lemma_inlink">深度学习框架</a><a href="https://baike.baidu.com/item/Caffe/16301044?fromModule=lemma_inlink">Caffe</a>，被<a href="https://baike.baidu.com/item/%E5%BE%AE%E8%BD%AF/124767?fromModule=lemma_inlink">微软</a>、<a href="https://baike.baidu.com/item/%E9%9B%85%E8%99%8E/108276?fromModule=lemma_inlink">雅虎</a>、<a href="https://baike.baidu.com/item/%E8%8B%B1%E4%BC%9F%E8%BE%BE/10194375?fromModule=lemma_inlink">英伟达</a>、<a href="https://baike.baidu.com/item/Adobe/211696?fromModule=lemma_inlink">Adobe</a>等公司采用。 [1-2]</p><p>14年在谷歌，16入Facebook，</p><p>2017年4月，<a href="https://zh.wikipedia.org/wiki/Facebook">Facebook</a>发布Caffe2[<a href="https://zh.wikipedia.org/zh-hans/Caffe#cite_note-12">12]</a>，加入了<a href="https://zh.wikipedia.org/wiki/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">循环神经网络</a>等新功能。2018年3月底，Caffe2并入<a href="https://zh.wikipedia.org/wiki/PyTorch">PyTorch</a>[<a href="https://zh.wikipedia.org/zh-hans/Caffe#cite_note-13">13]</a>。</p><p>2019年3月18日傍晚，<a href="https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E8%BE%BE%E6%91%A9%E9%99%A2/22159003?fromModule=lemma_inlink">阿里巴巴达摩院</a>通过<a href="https://baike.baidu.com/item/%E7%9F%A5%E4%B9%8E/4691322?fromModule=lemma_inlink">知乎</a>账号宣布，原<a href="https://baike.baidu.com/item/Facebook/7449587?fromModule=lemma_inlink">Facebook</a>（<a href="https://baike.baidu.com/item/%E8%84%B8%E4%B9%A6/3462463?fromModule=lemma_inlink">脸书</a>）人工智能科学家贾扬清已正式加入<a href="https://baike.baidu.com/item/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4/33?fromModule=lemma_inlink">阿里巴巴</a>，担任技术<a href="https://baike.baidu.com/item/%E5%89%AF%E6%80%BB%E8%A3%81/9087986?fromModule=lemma_inlink">副总裁</a>岗位，领导大数据<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E5%B9%B3%E5%8F%B0/4689449?fromModule=lemma_inlink">计算平台</a>的研发工作。 [1] 2023年3月，贾扬清在朋友圈发文告别阿里巴巴，表示将走向职业生涯的下一个挑战。</p><p>主要成就</p><p><a href="https://baike.baidu.com/item/caffe/16301044?fromModule=lemma_inlink">caffe</a></p><p>领导Caffe2和ONNX</p></blockquote><h3 id="何凯明">何凯明</h3><h3 id="何向南">何向南</h3><p><a href="https://hexiangnan.github.io/">个人主页</a></p><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">专家介绍 (ustc.edu.cn)</a></p><blockquote><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">何向南是中国科学技术大学信息科学技术学院和大数据学院的教授、博导，青年国家创新人才。他的研究领域包括信息检索、数据挖掘、机器学习、因果推理等</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a>.</p><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">他在CCF A类会议和期刊上发表了100多篇论文，如会议SIGIR、WWW、KDD、ACM Multimedia等和期刊IEEE TKDE、ACM TOIS等</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a>.</p><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">他的研究成果在多个商业公司的线上系统获得应用，取得积极效果</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a>.</p><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">他曾获得SIGIR 2021、WWW 2018、SIGIR 2016最佳论文提名奖等</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a>.</p><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">他主持了多项国家级项目，如基金委面上项目、重点项目，科技部重点研发计划课题等</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a>.</p><p><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">他的主要贡献之一是提出了神经协同过滤（Neural Collaborative Filtering）</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a><a href="https://blog.csdn.net/elephant_my/article/details/121056976">2</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">, 该方法在推荐系统中得到了广泛应用</a><a href="https://dsxt.ustc.edu.cn/zj_js.asp?zzid=6489">1</a>.</p><p>1、信息检索与数据挖掘</p><p>2、因果推理与机器学习</p><p>3、多媒体信息处理</p></blockquote><h3 id="Yann-LeCun">Yann LeCun</h3><h3 id="姚期智">姚期智</h3><blockquote><p>姚期智，1946年12月24日出生于中国上海，计算机科学专家，2000年<a href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%A5%96/324645?fromModule=lemma_inlink">图灵奖</a>获得者</p><p>姚期智1967年获得<a href="https://baike.baidu.com/item/%E5%8F%B0%E6%B9%BE%E5%A4%A7%E5%AD%A6/196378?fromModule=lemma_inlink">台湾大学</a>物理学士学位；1972年获得<a href="https://baike.baidu.com/item/%E5%93%88%E4%BD%9B%E5%A4%A7%E5%AD%A6/261536?fromModule=lemma_inlink">哈佛大学</a>物理博士学位；1975年获得伊利诺伊大学计算机科学博士学位，之后先后在美国<a href="https://baike.baidu.com/item/%E9%BA%BB%E7%9C%81%E7%90%86%E5%B7%A5%E5%AD%A6%E9%99%A2?fromModule=lemma_inlink">麻省理工学院</a>数学系、<a href="https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6/278716?fromModule=lemma_inlink">斯坦福大学</a>计算机系、<a href="https://baike.baidu.com/item/%E5%8A%A0%E5%B7%9E%E5%A4%A7%E5%AD%A6%E4%BC%AF%E5%85%8B%E5%88%A9%E5%88%86%E6%A0%A1/3755024?fromModule=lemma_inlink">加州大学伯克利分校</a>计算机系任助理教授、教授；1998年当选为美国国家科学院院士；2000年获得<a href="https://baike.baidu.com/item/%E5%9B%BE%E7%81%B5%E5%A5%96/324645?fromModule=lemma_inlink">图灵奖</a>，是唯一获得该奖的华人学者（截至2020年）；2004年起在清华大学任全职教授，同年当选为中国科学院外籍院士；2005年出任香港中文大学博文讲座教授；2011年担任清华大学交叉信息研究院院长 [3] ；2015年当选为香港科学院创院院士 [2] ；2016年放弃美国国籍成为中国公民 [5] ，正式转为中国科学院院士 [3] ；2021年获颁日本<a href="https://baike.baidu.com/item/%E4%BA%AC%E9%83%BD%E5%A5%96/7020017?fromModule=lemma_inlink">京都奖</a> [30] 。</p><p>姚期智的研究方向包括计算理论及其在密码学和量子计算中的应用，最先提出量子通信复杂性，提出分布式量子计算模式，后来成为分布式量子算法和量子通讯协议安全性的基础 [6] 。</p></blockquote><h3 id="饶毅">饶毅</h3><h3 id="吴恩达">吴恩达</h3><h3 id="李沐">李沐</h3><h2 id="具身智能">具身智能</h2><h3 id="卢策吾教授"><a href="https://link.zhihu.com/?target=https%3A//scholar.google.com.hk/citations%3Fhl%3Dzh-CN%26user%3DQZVQEWAAAAAJ%26view_op%3Dlist_works%26sortby%3Dpubdate">卢策吾教授</a></h3><blockquote><p>卢策吾，1982年10月出生。2006年毕业于重庆邮电大学通信工程本科专业。2009年在中国科学院电子学系获电子学硕士学位。 [5] <a href="https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E4%B8%AD%E6%96%87%E5%A4%A7%E5%AD%A6/233936?fromModule=lemma_inlink">香港中文大学</a>博士，<a href="https://baike.baidu.com/item/%E4%B8%8A%E6%B5%B7%E4%BA%A4%E9%80%9A%E5%A4%A7%E5%AD%A6%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E5%B7%A5%E7%A8%8B%E7%B3%BB/10562519?fromModule=lemma_inlink">上海交通大学计算机科学与工程系</a><a href="https://baike.baidu.com/item/%E6%95%99%E6%8E%88/18291?fromModule=lemma_inlink">教授</a> [2] ，2019年度<a href="https://baike.baidu.com/item/%E6%B1%82%E6%98%AF%E6%9D%B0%E5%87%BA%E9%9D%92%E5%B9%B4%E5%AD%A6%E8%80%85%E5%A5%96/19776743?fromModule=lemma_inlink">求是杰出青年学者奖</a>获得者 [3] 。卢策吾的研究兴趣为人工智能和深度学习。</p><h2 id="人物经历-2">人物经历</h2><p>2013年，卢策吾毕业于<a href="https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E4%B8%AD%E6%96%87%E5%A4%A7%E5%AD%A6/233936?fromModule=lemma_inlink">香港中文大学</a>计算机系，获工学<a href="https://baike.baidu.com/item/%E5%8D%9A%E5%A3%AB/2235592?fromModule=lemma_inlink">博士</a>学位，导师为<a href="https://baike.baidu.com/item/%E8%B4%BE%E4%BD%B3%E4%BA%9A/20802175?fromModule=lemma_inlink">贾佳亚</a>教授。</p><p>2013年9月至2015年2月，在<a href="https://baike.baidu.com/item/%E9%A6%99%E6%B8%AF%E7%A7%91%E6%8A%80%E5%A4%A7%E5%AD%A6/1670844?fromModule=lemma_inlink">香港科技大学</a>从事博士后研究工作，导师为邓智强教授。</p><p>2015年2月至2016年9月，赴<a href="https://baike.baidu.com/item/%E6%96%AF%E5%9D%A6%E7%A6%8F%E5%A4%A7%E5%AD%A6/278716?fromModule=lemma_inlink">斯坦福大学</a>人工智能实验室开展博士后研究，导师为<a href="https://baike.baidu.com/item/%E6%9D%8E%E9%A3%9E%E9%A3%9E/7448630?fromModule=lemma_inlink">李飞飞</a>教授和Leonidas J. Guibas教授（美国工程院院士）。</p><p>2016年9月，加入上海交通大学计算机系，任特别研究员，博士生导师。 [3]</p><h2 id="主要成就-2">主要成就</h2><p>卢策吾主要从事计算机视觉与智能机器人的研究，在图像主结构表征、视觉关系学习以及人体行为姿态理解等关键问题上取得多项突破，有诸多创新贡献。例如：原创提出了基于最小化L0-norm梯度的图像主结构提取算法，发表的相关论文“Image smoothing via L 0 gradient minimization”在1000多篇TOG文章中被引次数最高，TOG被引用次数最高。多项成果在智能安防、机器人、无人车等重要领域得到应用。在CVPR/ICCV/PAMI等顶会顶刊发表论文60多篇，根据google scholar申请人论文被引用近3000次；获得Symposium on Non-Photorealistic Animation and Rendering NPAR 2012最佳论文奖（为十年来第一个华人机构获奖）。 [3]</p></blockquote><blockquote><p>机器人、人工智能和计算机视觉</p><p>卢教授毕业于号称亚洲CV界<a href="https://www.zhihu.com/search?q=%E9%BB%84%E5%9F%94%E5%86%9B%E6%A0%A1&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A428315235%7D">黄埔军校</a>的<a href="https://www.zhihu.com/search?q=%E6%B8%AF%E4%B8%AD%E5%A4%A7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A428315235%7D">港中大</a>，又在Stanford的Feifei-Li组里做过博后。科研经历闪闪发光。从论文来看，近两年的研究方向主要在<a href="https://www.zhihu.com/search?q=%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A428315235%7D">目标检测</a>和强化学习</p><p>卢策吾，上海交通大学教授，博士生导师，主要从事计算机视觉、行为理解和智能机器人的研究。以第一或<a href="https://www.zhihu.com/search?q=%E9%80%9A%E8%AE%AF%E4%BD%9C%E8%80%85&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2651892436%7D">通讯作者</a>在《Nature》、《Nature Machine Intelligence》、TPAMI、CVPR等高水平期刊和会议发表论文 100 多篇。开源了一系列如AlphaPose（<a href="https://www.zhihu.com/search?q=%E4%BA%BA%E4%BD%93%E5%A7%BF%E6%80%81%E4%BC%B0%E8%AE%A1%E7%B3%BB%E7%BB%9F&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2651892436%7D">人体姿态估计系统</a>，GitHub Star 5000+），HAKE（人体行为引擎），GraspNet（高性能机器人抓取系统）等多项拥有国际先进水平的开源人工智能框架和数据集，多项成果在智能安防，机器人，无人车等重要领域得到应用。2016 年入选海外高层次青年引进人才，2018 年被《麻省理工科技评论》评为35 岁以下科技创新 35 人（MIT TR35），2019 年获求是杰出青年学者奖，2020 年获上海市科技进步特等奖（排名第三），被<a href="https://www.zhihu.com/search?q=%E7%88%B1%E6%80%9D%E5%94%AF%E5%B0%94&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A2651892436%7D">爱思唯尔</a>(Elsevier)评为 2021 年度中国高被引学者。担任NeurIPS2022高级领域主席 （Senior Area Chair），CVPR 2020/ICCV 2021/ECCV2022 领域主席，IROS2021/2022 编委（Associate Editor），AAAI 2020 高级程序委员会委员（Senior ProgramCommittee），PRCV 2022 出版主席，以及期刊《科学》同行评议审稿人。</p></blockquote><h1 id="Reference">Reference</h1><ol><li><a href="https://www.zhihu.com/question/280185960">(14 封私信 / 49 条消息) 如何评价上海交通大学计算机系最近引进的一批年轻研究员：卢策吾、张拳石、严骏驰、张伟楠等？ - 知乎 (zhihu.com)</a></li><li><a href="https://baike.baidu.com/item/%E5%8D%A2%E7%AD%96%E5%90%BE/23767508">卢策吾_百度百科 (baidu.com)</a></li><li><a href="https://zh.wikipedia.org/zh-sg/%E6%9D%8E%E9%A3%9B%E9%A3%9B">李飞飞 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://baike.baidu.com/item/%E6%9D%8E%E9%A3%9E%E9%A3%9E/7448630#%E4%BA%BA%E7%89%A9%E7%BB%8F%E5%8E%86">李飞飞（美国国家工程院院士、斯坦福大学教授）_百度百科 (baidu.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CS </tag>
            
            <tag> AI </tag>
            
            <tag> 牛人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的一些概念、关键词</title>
      <link href="/posts/20231102151415-dc78571c.html"/>
      <url>/posts/20231102151415-dc78571c.html</url>
      
        <content type="html"><![CDATA[<p>Python中的一些概念、关键词</p><h1 id="关键字">关键字</h1><h2 id="yield">yield</h2><p><a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856">python中yield的用法详解——最简单，最清晰的解释_python yield-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/268605982">如何理解Python中的yield用法? - 知乎 (zhihu.com)</a></p><p>有<code>yield</code>的函数则返回一个可迭代的 generator（生成器）对象，你可以使用for循环或者调用next()方法遍历生成器对象来提取结果。</p><p>在调用生成器函数的过程中，每次遇到 <code>yield</code> 时函数会暂停并保存当前所有的运行信息（<u><strong>保留局部变量。而一般 return 的函数  会销毁局部变量</strong></u>），返回<code>yield</code>的值, 并在下一次执行<code>next()</code>方法时从当前位置继续运行，直到生成器被全部遍历完。</p><p>yield和生成器主要就是**<u>节省内存</u>**</p><p>生成器存储的是一种规则或者说方法，普通集合存储的是数据，数据量大的话，内存消耗大，但是规则几乎不占内存</p><p>生成器函数有两种用途。</p><ul><li>一是调用它创建一个生成器对象，也就是生成器迭代器，然后用迭代器驱动生成器函数分部运行，产生你想要的数据；</li><li>二是当协程函数用，控制程序流</li></ul><h2 id="zip">zip</h2><p>在Python中，zip函数是一个内置函数，它可以将多个序列按照索引位置一一对应起来，生成一个新的元组序列。zip函数的语法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">zip</span>(iterable1, iterable2,...)</span><br></pre></td></tr></table></figure><p>其中，iterable1、iterable2等参数可以是任何可迭代对象，如列表、元组、字符串等。</p><p>zip函数返回一个zip对象，通过list()函数可以将其转换为元组列表。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">zip</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># [(1, 4), (2, 5), (3, 6)]</span></span><br></pre></td></tr></table></figure><p>zip函数将列表a和列表b中的每个元素依次一一对应起来，生成了一个新的元组序列[(1, 4), (2, 5), (3, 6)]。</p><p>当参数的长度不同时，zip函数会以最短长度的对象为准，将其他对象中多余的元素忽略掉。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">c = <span class="built_in">list</span>(<span class="built_in">zip</span>(a, b))</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># [(1, 4), (2, 5)]</span></span><br></pre></td></tr></table></figure><p>zip函数将列表a和列表b中的前两个元素一一对应起来，生成了一个新的元组序列[(1, 4), (2, 5)]。由于列表b只包含两个元素，所以列表a中的第三个元素被忽略掉了。</p><p>除了zip函数之外，Python还提供了zip_longest函数，它可以将多个序列按照最长长度对应起来。如果某个序列中的元素不足，则用指定的填充值来补齐。zip_longest函数的语法如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line">zip_longest(iterable1, iterable2,..., fillvalue=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><p>其中，fillvalue参数表示用于填充不足元素的值，默认为None。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> zip_longest</span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">b = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">c = <span class="built_in">list</span>(zip_longest(a, b, fillvalue=<span class="number">0</span>))</span><br><span class="line"><span class="built_in">print</span>(c)  <span class="comment"># [(1, 4), (2, 5), (3, 0)]</span></span><br></pre></td></tr></table></figure><p>zip_longest函数将列表a和列表b中的所有元素一一对应起来，其中列表b中的第三个元素被用指定的填充值0来补齐，生成了一个新的元组序列[(1, 4), (2, 5), (3, 0)]。</p><p>总之，zip函数是一个非常实用的函数，它可以将多个序列按照索引位置一一对应起来，方便地进行批量处理和数据分析。</p><h2 id="get-items-等等">_<em>get_items()等等</em></h2><p>在Python中，<code>__getitem__()</code>是一个特殊方法（也称为魔术方法或双下划线方法），用于实现对象的索引操作。当我们使用索引操作符 <code>[]</code> 获取对象的元素时，Python会自动调用该对象的<code>__getitem__()</code>方法来执行相应的操作。</p><p><code>__getitem__()</code>方法允许对象以类似序列或映射的方式进行索引，并返回对应的元素或值。它接受一个参数，即索引值，可以是整数、切片等类型。</p><p>下面是一个简单的示例，展示了如何在自定义类中实现<code>__getitem__()</code>方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">return</span> self.data[index]</span><br><span class="line"></span><br><span class="line">my_list = MyList([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(my_list[<span class="number">2</span>])  <span class="comment"># 输出: 3</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，<code>MyList</code>类定义了<code>__getitem__()</code>方法，它接受一个索引值 <code>index</code>，并返回<code>data</code>列表中对应索引位置的元素。通过执行<code>my_list[2]</code>操作，Python会调用<code>__getitem__()</code>方法并将索引值 <code>2</code> 作为参数传递给它，最终返回<code>data[2]</code>，即<code>3</code>。</p><p>需要注意的是，除了<code>__getitem__()</code>方法外，还有其他一些特殊方法可以实现不同的操作，例如<code>__setitem__()</code>用于设置元素值，<code>__delitem__()</code>用于删除元素等。这些特殊方法的使用可以让我们自定义的类更像内置的序列或映射类型，从而提供更灵活和自定义化的功能。</p><h2 id="解包">解包</h2><p>解包在英文里叫做 Unpacking，就是将容器里面的元素逐个取出来放在其它地方，好比你父母去菜市场买了一袋苹果回来分别发给家里的每个成员，这个过程就是解包。Python 中的解包是自动完成的；</p><ul><li>任何可迭代对象都支持解包，可迭代对象包括元组、字典、集合、字符串、生成器等实现了__next__方法的一切对象</li></ul><h3 id="元组解包">元组解包</h3><ul><li><h4 id="第一种：赋值给多个变量的元组解">第一种：赋值给多个变量的元组解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">temp = (<span class="string">&quot;hi&quot;</span>,<span class="string">&quot;yuan&quot;</span>,<span class="string">&quot;wai&quot;</span>)</span><br><span class="line"> </span><br><span class="line">first,second,third = temp</span><br><span class="line">等同于</span><br><span class="line">first = temp[<span class="number">0</span>]</span><br><span class="line"> </span><br><span class="line">second = temp[<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">third = temp[<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p>第二种：元组的每个元素作为位置参数的元组解包</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">temp = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">first,second,third</span>):</span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line">    <span class="built_in">print</span>(third)</span><br></pre></td></tr></table></figure><p><code>hello(*temp)</code>   等同于  <code>hello(1,2,3)</code></p></li><li><h4 id="第三种：遍历的元素为元组对象时，同时赋值给对应的变量，自动完成元素解包">第三种：遍历的元素为元组对象时，同时赋值给对应的变量，自动完成元素解包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">temp_list = [</span><br><span class="line">            (<span class="string">&#x27;测试人员&#x27;</span>, self.tester),</span><br><span class="line">            (<span class="string">&#x27;开始时间&#x27;</span>, start_time),</span><br><span class="line">            (<span class="string">&#x27;合计耗时&#x27;</span>, duration),</span><br><span class="line">            (<span class="string">&#x27;测试结果&#x27;</span>, status + <span class="string">&quot;，通过率= &quot;</span> + self.pass_rate)]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> first, second <span class="keyword">in</span> temp_list:</span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"><span class="comment"># temp_list是一个list，每个元素为tuple，遍历temp_list时，将每次的获取到tuple对象，自动解包到2个变量first和second</span></span><br></pre></td></tr></table></figure><h3 id="字典解包">字典解包</h3><p>python中*vars代表解包元组，**vars代表解包字典，通过这种语法可以传递不定参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linear</span>(<span class="params">x, k, b=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">return</span> k * x + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = &#123;<span class="string">&#x27;x&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;k&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(linear(**a))  <span class="comment"># 相当于 print(linear(x=2, k=3))</span></span><br><span class="line"><span class="comment"># 6</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="python中的广播">python中的广播</h2><p>广播是指在不同形状的数组之间进行算术运算的方式，它在很多场景下都非常有用。例如，我们可以简单地将一个标量（可以认为是零维数组）与一个数组相加。在这个例子中，标量会被广播到数组的每一个元素上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">3</span>)</span><br><span class="line">b = <span class="number">1</span></span><br><span class="line">a + b</span><br><span class="line"><span class="comment"># array([1, 2, 3])</span></span><br></pre></td></tr></table></figure><h1 id="Reference">Reference</h1><ol><li><a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856">python中yield的用法详解——最简单，最清晰的解释_python yield-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/268605982">如何理解Python中的yield用法? - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/cadi2011/article/details/90513993">Python之元组解包的3种用法_python 解包元组中的值-CSDN博客</a></li><li><a href="https://blog.csdn.net/lly1122334/article/details/106994678">Python解包参数列表*或**-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLearn</title>
      <link href="/posts/20231101190921-a70a1639.html"/>
      <url>/posts/20231101190921-a70a1639.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git - 变基 (git-scm.com)</a></p><p>GitLearn</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231101-194034.png" alt="git"></p><p>基本流程</p><ol><li><p>使用git命令将远程仓库上的文件克隆到本地仓库中</p></li><li><p>从本地仓库中检出文件到工作区(一般都自动完成)</p></li><li><p>将新创建的文件添加到暂存区</p></li><li><p>将暂存区中的内容提交到本地仓库</p></li><li><p>将本地仓库中的内容推送到远程仓库上</p></li></ol><h2 id="Git-远程分支，远程跟踪分支，跟踪分支的区别">Git-远程分支，远程跟踪分支，跟踪分支的区别</h2><h3 id="远程分支">远程分支</h3><p>远程分支对应的英文为remote branch，其就是在远程仓库的普通分支，比如远程仓库上的master，自己在远程仓库创建的分支，以及自己推送到远程仓库上去的在远程仓库上的分支。当运行git push （仓库名） 分支名 的命令时，便会在远程仓库创建远程分支。</p><h3 id="远程跟踪分支">远程跟踪分支</h3><p>远程跟踪分支对应的英文名称为remote-tracking branch，虽然仅仅多了tracking这个词，但是其作用与性质却与远程分支有很大的不同，远程跟踪分支是本地仓库对远程仓库中的某个远程分支的状态的记录，它们以 <code>“(远程仓库名)/(分支名)”</code> 形式命名。 例如，如果你想要看你最后一次与远程仓库 <code>origin</code> 通信时<code>master</code> 分支的状态，你可以查看 <code>origin/master</code> 分支。远程跟踪分支的作用是告诉用户其所跟踪的远程分支的状态（即指向哪一个commit），因而它在本地是只读的，用户是无法自行修改它的指向。其指向将在用户与远程仓库通信时自动改变，这里的通信是指执行诸如git fetch等从远程仓库获取数据的操作</p><h3 id="跟踪分支">跟踪分支</h3><p>跟踪分支的英文名称为tracking branch，从一个远程跟踪分支产生出的一个本地分支便是跟踪分支，该本地分支对应的远程跟踪分支称为上游分支。跟踪分支是与远程分支有直接关系的本地分支，当克隆一个仓库时，它通常会自动地创建一个跟踪 <code>origin/master</code> 的 <code>master</code> 分支。创建跟踪分支可以使用git checkout -b [branch] [remotename]/[branch]，还可以使用–track快捷方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b serverfix origin/serverfix</span><br><span class="line">Branch serverfix set up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch &#x27;serverfix&#x27;</span><br><span class="line">$ git checkout --track origin/serverfix</span><br><span class="line">Branch serverfix set up to track remote branch serverfix from origin.</span><br><span class="line">Switched to a new branch &#x27;serverfix&#x27;</span><br></pre></td></tr></table></figure><p>更多创建方式可参见git pro 3.5节。</p><ul><li><h2 id="那么跟踪分支有什么作用呢？">那么跟踪分支有什么作用呢？</h2><p>跟踪分支为本地分支和远程分支之间建立了一种联系，方便了远程分支和本地分支的同步。 如果在一个跟踪分支上输入 <code>git pull</code>，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。同时，跟踪分支还能查看本地分支与对应的远程分支之间的超前落后情况，如使用git branch -vv语句</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -vv</span></span><br><span class="line">  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets</span><br><span class="line">  master    1ae2a45 [origin/master] deploying index fix</span><br><span class="line">* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it</span><br><span class="line">  testing   5ea463a trying something new</span><br></pre></td></tr></table></figure><p>这里可以看到 <code>iss53</code> 分支正在跟踪 <code>origin/iss53</code> 并且 “ahead” 是 2，意味着本地有两个提交还没有推送到服务器上。 也能看到 <code>master</code> 分支正在跟踪 <code>origin/master</code> 分支并且是最新的。 接下来可以看到 <code>serverfix</code> 分支正在跟踪 <code>teamone</code> 服务器上的 <code>server-fix-good</code> 分支并且领先 3 落后 1，意味着服务器上有一次提交还没有合并入同时本地有三次提交还没有推送。 最后看到 <code>testing</code> 分支并没有跟踪任何远程分支。</p><h3 id="小结">小结</h3><p>远程分支就是在远程仓库上的普通分支。远程跟踪分支是在本地的只读的记录远程分支状态的分支，其指向用户无法移动，当使用git fetch等指令时其指向会依照远程仓库自动移动。跟踪分支是从远程跟踪分支上生成的本地分支，跟踪分支提供了本地分支与远程分支更紧密的联系，可以看出本地分支与对应的远程分支的超前落后情况，也可以使用git pull 指令轻松的将远程分支拉取到对应的跟踪分支。</p><ol><li><h2 id="dev分支合并到master分支">dev分支合并到master分支</h2></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 切到master</span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment">#  dev分支的代码合并到master分支  ;  把参数分支((dev)合并到当前分支；并且移动当前分支到最新处</span></span><br><span class="line">git merge dev </span><br><span class="line"></span><br><span class="line">// 查看状态</span><br><span class="line">git status </span><br><span class="line"></span><br><span class="line">// 提交远程</span><br><span class="line">git push origin master </span><br></pre></td></tr></table></figure><h1 id="rebase-和merge">rebase 和merge</h1><p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git - 变基 (git-scm.com)</a></p><p>在 Git 中整合来自不同分支的修改主要有两种方法：<code>merge</code> 以及 <code>rebase</code></p><ol><li><p>merge方法是会生成一个新的快照</p></li><li><p>rebase</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git checkout experiment</span><br><span class="line"><span class="comment">##   把当前分支上的新的修改都 移动到 参数分支（master)上，（该分支和参数分支最近公告祖先之间的修改都不要了，直接重新提交到参数分支之后）; 并且移动当前分支指针到最新处，而参数分支（master）的指针，需要再checkout和merge 当前分支，最终两个指针在同一个位置</span></span><br><span class="line">git rebase master</span><br><span class="line">First, rewinding <span class="built_in">head</span> to replay your work on top of it...</span><br><span class="line">Applying: added staged <span class="built_in">command</span></span><br><span class="line">它的原理是</span><br><span class="line">首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master） 的最近共同祖先 C2，</span><br><span class="line">然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件， </span><br><span class="line">然后将当前分支指向目标基底 C3, </span><br><span class="line">最后以此将之前另存为临时文件的修改依序应用。 （译注：写明了 commit <span class="built_in">id</span>，以便理解，下同）</span><br></pre></td></tr></table></figure><p><strong>如果提交存在于你的仓库之外，而别人可能基于这些提交进行开发，那么不要执行变基。</strong></p><blockquote><p>变基操作的实质是丢弃一些现有的提交，然后相应地新建一些内容一样但实际上不同的提交。 如果你已经将提交推送至某个仓库，而其他人也已经从该仓库拉取提交并进行了后续工作，此时，如果你用 <code>git rebase</code> 命令重新整理了提交并再次推送，你的同伴因此将不得不再次将他们手头的工作与你的提交进行整合，如果接下来你还要拉取并整合他们修改过的提交，事情就会变得一团糟。</p></blockquote></li></ol><h3 id="变基-vs-合并">变基 vs. 合并</h3><p>至此，你已在实战中学习了变基和合并的用法，你一定会想问，到底哪种方式更好。 在回答这个问题之前，让我们退后一步，想讨论一下提交历史到底意味着什么。</p><p>有一种观点认为，仓库的提交历史即是 <strong>记录实际发生过什么</strong>。 它是针对历史的文档，本身就有价值，不能乱改。 从这个角度看来，改变提交历史是一种亵渎，你使用 <em>谎言</em> 掩盖了实际发生过的事情。 如果由合并产生的提交历史是一团糟怎么办？ 既然事实就是如此，那么这些痕迹就应该被保留下来，让后人能够查阅。</p><p>另一种观点则正好相反，他们认为提交历史是 <strong>项目过程中发生的事</strong>。 没人会出版一本书的第一版草稿，软件维护手册也是需要反复修订才能方便使用。 持这一观点的人会使用 <code>rebase</code> 及 <code>filter-branch</code> 等工具来编写故事，怎么方便后来的读者就怎么写。</p><p>现在，让我们回到之前的问题上来，到底合并还是变基好？希望你能明白，这并没有一个简单的答案。 Git 是一个非常强大的工具，它允许你对提交历史做许多事情，但每个团队、每个项目对此的需求并不相同。 既然你已经分别学习了两者的用法，相信你能够根据实际情况作出明智的选择。</p><p>总的原则是，<br>==只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作==，这样，你才能享受到两种方式带来的便利。</p><h1 id="branch，-tag">branch，  tag</h1><p>tag就是一个只读的branch，一般为每一个可发布的里程碑版本打一个tag</p><p>tag就像是一个里程碑一个标志一个点，branch是一个新的征程一条线；</p><p>tag是静态的，branch要向前走；</p><p>稳定版本备份用tag，新功能多人开发用branch（开发完成后merge到master）</p><h1 id="git查看各个branch之间的关系图">git查看各个branch之间的关系图</h1><ol><li>使用git log命令</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log <span class="attr">--graph</span> <span class="attr">--decorate</span> <span class="attr">--oneline</span> <span class="attr">--simplify-by-decoration</span> <span class="attr">--all</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>–decorate 标记会让<em>git log</em>显示每个<a href="https://so.csdn.net/so/search?q=commit&amp;spm=1001.2101.3001.7020">commit</a>的引用(如:分支、tag等)</p><p>–oneline 一行显示</p><p>–simplify-by-decoration 只显示被branch或tag引用的commit</p><p>–all 表示显示所有的branch，这里也可以选择，比如我指向显示分支ABC的关系，则将–all替换为branchA branchB branchC</p><ol start="2"><li>使用gitk工具</li></ol><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitk <span class="attr">--simplify-by-decoration</span> <span class="attr">--all</span></span><br></pre></td></tr></table></figure><h1 id="reference">reference</h1><ol><li><a href="https://blog.csdn.net/zhuyucheng123/article/details/55045339">Git-远程分支，远程跟踪分支，跟踪分支的区别_set as tracked branch-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_45586038/article/details/124199125">git 分支合并（dev合并到master分支）_git dev合并到master-CSDN博客</a></li><li><a href="https://blog.csdn.net/lmm0513/article/details/117417775">git常用命令及命令流程_git常用的命令有哪些(5分)?说一下你在开发过程中合并代码流程(5分)_明子～的博客-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/75499871">git merge和git rebase的区别, 切记：永远用rebase - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/37093558">浅谈github git命令 branch tag - 知乎 (zhihu.com)</a></li><li><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%8F%98%E5%9F%BA">Git - 变基 (git-scm.com)</a></li><li><a href="https://stackoverflow.com/questions/5298972/relationship-between-n-git-branches">https://stackoverflow.com/questions/5298972/relationship-between-n-git-branches</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的修饰器Decorators</title>
      <link href="/posts/20231031115836-971d8bc6.html"/>
      <url>/posts/20231031115836-971d8bc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="修饰器">修饰器</h1><p>装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。</p><p>装饰器让你在一个函数的前后去执行代码。</p><h2 id="python中的函数">python中的函数</h2><blockquote><ol><li><p>将函数赋值给一个变量，相当于是创建了一个新的函数，函数名为这个变量名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi &quot;</span> + name</span><br><span class="line"><span class="built_in">print</span>(hi())</span><br><span class="line"><span class="comment"># output: &#x27;hi yasoob&#x27;</span></span><br><span class="line"><span class="comment"># 我们甚至可以将一个函数赋值给一个变量，比如</span></span><br><span class="line">greet = hi</span><br><span class="line"><span class="comment"># 我们这里没有在使用小括号，因为我们并不是在调用hi函数</span></span><br><span class="line"><span class="comment"># 而是在将它放在greet变量里头。我们尝试运行下这个</span></span><br><span class="line"><span class="built_in">print</span>(greet())</span><br><span class="line"><span class="comment"># output: &#x27;hi yasoob&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果我们删掉旧的hi函数，看看会发生什么！</span></span><br><span class="line"><span class="keyword">del</span> hi</span><br><span class="line"><span class="built_in">print</span>(hi())</span><br><span class="line"><span class="comment">#outputs: NameError</span></span><br><span class="line"><span class="built_in">print</span>(greet())</span><br><span class="line"><span class="comment">#outputs: &#x27;hi yasoob&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>函数内定义函数</p></li><li><p>函数作为函数的返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>(<span class="params">name=<span class="string">&quot;yasoob&quot;</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">greet</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the greet() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">welcome</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;now you are in the welcome() function&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;yasoob&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> greet</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> welcome</span><br><span class="line"></span><br><span class="line">a = hi()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">#outputs: &lt;function greet at 0x7f2143c01500&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上面清晰地展示了`a`现在指向到hi()函数中的greet()函数</span></span><br><span class="line"><span class="comment">#现在试试这个</span></span><br><span class="line"><span class="built_in">print</span>(a())</span><br><span class="line"><span class="comment">#outputs: now you are in the greet() function</span></span><br></pre></td></tr></table></figure><p>再次看看这个代码。在 if/else 语句中我们返回 greet 和 welcome，而不是 greet() 和 welcome()。为什么那样？这是因为当你把一对小括号放在后面，这个函数就会执行；然而如果你不放括号在它后面，那它可以被到处传递，并且可以赋值给别的变量而不去执行它。 你明白了吗？让我再稍微多解释点细节。</p><p>当我们写下 <strong>a = hi()</strong>，hi() 会被执行，而由于 name 参数默认是 yasoob，所以函数 greet 被返回了。如果我们把语句改为 <strong>a = hi(name = “ali”)</strong>，那么 welcome 函数将被返回。我们还可以打印出 <strong>hi()()</strong>，这会输出 <strong>now you are in the greet() function</strong>。</p></li><li><h3 id="将函数作为参数传给另一个函数">将函数作为参数传给另一个函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hi</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi yasoob!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doSomethingBeforeHi</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing hi()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(func())</span><br><span class="line"></span><br><span class="line">doSomethingBeforeHi(hi)</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing hi()</span></span><br><span class="line"><span class="comment">#        hi yasoob!</span></span><br></pre></td></tr></table></figure></li><li></li></ol></blockquote><h2 id="装饰器让你在一个函数的前后去执行代码。">装饰器让你在一个函数的前后去执行代码。</h2><h3 id="例子">例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a_new_decorator</span>(<span class="params">a_func</span>):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line"> </span><br><span class="line">        a_func()</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: &quot;I am the function which needs some decoration to remove my foul smell&quot;</span></span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br><span class="line"><span class="comment">#now a_function_requiring_decoration is wrapped by wrapTheFunction()</span></span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs:I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#        I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#        I am doing some boring work after executing a_func()</span></span><br></pre></td></tr></table></figure><p>你看明白了吗？我们刚刚应用了之前学习到的原理。这正是 python 中装饰器做的事情！它们封装一个函数，并且用这样或者那样的方式来修改它的行为。现在你也许疑惑，我们在代码里并没有使用 <strong>@</strong> 符号？那只是一个简短的方式来生成一个被装饰的函数。这里是我们如何使用 <strong>@</strong> 来运行之前的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey you! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line">a_function_requiring_decoration()</span><br><span class="line"><span class="comment">#outputs: I am doing some boring work before executing a_func()</span></span><br><span class="line"><span class="comment">#         I am the function which needs some decoration to remove my foul smell</span></span><br><span class="line"><span class="comment">#         I am doing some boring work after executing a_func()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#the @a_new_decorator is just a short way of saying:</span></span><br><span class="line">a_function_requiring_decoration = a_new_decorator(a_function_requiring_decoration)</span><br></pre></td></tr></table></figure><p>希望你现在对 Python 装饰器的工作原理有一个基本的理解。如果我们运行如下代码会存在一个问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: wrapTheFunction</span></span><br></pre></td></tr></table></figure><p>这并不是我们想要的！Ouput输出应该是&quot;a_function_requiring_decoration&quot;。这里的函数被warpTheFunction替代了。它重写了我们函数的名字和注释文档(docstring)。幸运的是Python提供给我们一个简单的函数来解决这个问题，那就是functools.wraps。我们修改上一个例子来使用functools.wraps：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_new_decorator</span>(<span class="params">a_func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">a_func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapTheFunction</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work before executing a_func()&quot;</span>)</span><br><span class="line">        a_func()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I am doing some boring work after executing a_func()&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapTheFunction</span><br><span class="line"> </span><br><span class="line"><span class="meta">@a_new_decorator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_function_requiring_decoration</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Hey yo! Decorate me!&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;I am the function which needs some decoration to &quot;</span></span><br><span class="line">          <span class="string">&quot;remove my foul smell&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(a_function_requiring_decoration.__name__)</span><br><span class="line"><span class="comment"># Output: a_function_requiring_decoration</span></span><br></pre></td></tr></table></figure><h3 id="蓝本规范">蓝本规范</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decorator_name</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> can_run:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Function will not run&quot;</span></span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br><span class="line"> </span><br><span class="line"><span class="meta">@decorator_name</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">return</span>(<span class="string">&quot;Function is running&quot;</span>)</span><br><span class="line"> </span><br><span class="line">can_run = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function is running</span></span><br><span class="line"> </span><br><span class="line">can_run = <span class="literal">False</span></span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="comment"># Output: Function will not run</span></span><br></pre></td></tr></table></figure><p><strong>注意：****@wraps</strong>接受一个函数来进行装饰，并加入了复制函数名称、注释文档、参数列表等等的功能。这可以让我们在装饰器里面访问在装饰之前的函数的属性。</p><h2 id="使用场景">使用场景</h2><p>现在我们来看一下装饰器在哪些地方特别耀眼，以及使用它可以让一些事情管理起来变得更简单。</p><h3 id="授权-Authorization">授权(Authorization)</h3><p>装饰器能有助于检查某个人是否被授权去使用一个web应用的端点(endpoint)。它们被大量使用于Flask和Django web框架中。这里是一个例子来使用基于装饰器的授权：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">requires_auth</span>(<span class="params">f</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">f</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorated</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        auth = request.authorization</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> auth <span class="keyword">or</span> <span class="keyword">not</span> check_auth(auth.username, auth.password):</span><br><span class="line">            authenticate()</span><br><span class="line">        <span class="keyword">return</span> f(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> decorated</span><br></pre></td></tr></table></figure><h3 id="日志-Logging">日志(Logging)</h3><p>日志是装饰器运用的另一个亮点。这是个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logit</span>(<span class="params">func</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">func</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">with_logging</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(func.__name__ + <span class="string">&quot; was called&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> with_logging</span><br><span class="line"> </span><br><span class="line"><span class="meta">@logit</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addition_func</span>(<span class="params">x</span>):</span><br><span class="line">   <span class="string">&quot;&quot;&quot;Do some math.&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">return</span> x + x</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">result = addition_func(<span class="number">4</span>)</span><br><span class="line"><span class="comment"># Output: addition_func was called</span></span><br></pre></td></tr></table></figure><h2 id="装饰器类">装饰器类</h2><p>现在我们有了能用于正式环境的logit装饰器，但当我们的应用的某些部分还比较脆弱时，异常也许是需要更紧急关注的事情。比方说有时你只想打日志到一个文件。而有时你想把引起你注意的问题发送到一个email，同时也保留日志，留个记录。这是一个使用继承的场景，但目前为止我们只看到过用来构建装饰器的函数。</p><p>幸运的是，类也可以用来构建装饰器。那我们现在以一个类而不是一个函数的方式，来重新构建logit。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">logit</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, logfile=<span class="string">&#x27;out.log&#x27;</span></span>):</span><br><span class="line">        self.logfile = logfile</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, func</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">func</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapped_function</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            log_string = func.__name__ + <span class="string">&quot; was called&quot;</span></span><br><span class="line">            <span class="built_in">print</span>(log_string)</span><br><span class="line">            <span class="comment"># 打开logfile并写入</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.logfile, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> opened_file:</span><br><span class="line">                <span class="comment"># 现在将日志打到指定的文件</span></span><br><span class="line">                opened_file.write(log_string + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="comment"># 现在，发送一个通知</span></span><br><span class="line">            self.notify()</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapped_function</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># logit只打日志，不做别的</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>这个实现有一个附加优势，在于比嵌套函数的方式更加整洁，而且包裹一个函数还是使用跟以前一样的语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@logit()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc1</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>现在，我们给 logit 创建子类，来添加 email 的功能(虽然 email 这个话题不会在这里展开)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">email_logit</span>(<span class="title class_ inherited__">logit</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    一个logit的实现版本，可以在函数调用时发送email给管理员</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, email=<span class="string">&#x27;admin@myproject.com&#x27;</span>, *args, **kwargs</span>):</span><br><span class="line">        self.email = email</span><br><span class="line">        <span class="built_in">super</span>(email_logit, self).__init__(*args, **kwargs)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">notify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 发送一封email到self.email</span></span><br><span class="line">        <span class="comment"># 这里就不做实现了</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/107917604">一文搞懂什么是Python装饰器？Python装饰器怎么用？ - 知乎 (zhihu.com)</a></li><li><a href="https://www.runoob.com/w3cnote/python-func-decorators.html">Python 函数装饰器 | 菜鸟教程 (runoob.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-5-排队模型及其实践</title>
      <link href="/posts/20231025101817-f41b9437.html"/>
      <url>/posts/20231025101817-f41b9437.html</url>
      
        <content type="html"><![CDATA[<p>排队模型及其实践</p><h1 id="排队模型及其分布">排队模型及其分布</h1><h2 id="定义">定义</h2><p>一种信息源模型，特征是由输入、排队、服务三 个过程组成</p><ol><li><p>输入过程</p><ul><li>请求总体:有限、无限</li><li>请求到达方式:逐个、成批</li><li>请求间隔:确定型、随机型</li><li>请求之间的关系:相关的、独立的</li></ul></li><li><p>排队规则<br>损失制<br>等待制<br>混合制</p></li><li><p>服务规则</p><ul><li><p>多窗口、单窗口</p></li><li><p>服务时间: 确定型、随机型</p></li></ul></li></ol><h2 id="运行指标-和分类">运行指标 和分类</h2><ul><li><p>系统吞吐率：平均单位时间内被服务完的请求数量</p></li><li><p>请求响应时间：请求在系统内的平均逗留时间</p></li><li><p>系统利用率：服务连续繁忙的时间长度</p></li></ul><p>分类和记号</p><ul><li><p>X/Y/Z/m (或o,可省略 )来表示排队模型</p><blockquote><p>X:请求相继到达系统的间隔时间T的概率分布。<br>Y:服务所耗费的服务时间 的概率分布<br>Z: 系统内服务的个数;<br>m : 系统内( 最大)排队容量 ;</p></blockquote></li><li><p>M/M/n -<br>请求到达系统时间间隔与服务时间均服从负指数，系<br>统内设有n个服务窗口，<br>系统容量为无限的等待制排队模型</p></li></ul><h1 id="最简单事件流-泊松流">最简单事件流:  泊松流</h1><ul><li><p>泊松( Poisson )流，又称最简单事件流。<br>其具有如下特点:</p><ol><li><p>平稳性: 出现任意数量事件的概率只与时间区间t的大小有关，与t的位置无关</p></li><li><p>无后效性: 在互不相交的两个时间区间T1、T2内所出现的事件数是相互独立的</p></li><li><p>普通性:在同一瞬间多于一个事件出现的概率可忽略不计</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">p_n(t)=\frac{(\lambda t)^n}{n!}e^{-\lambda t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">λ</span><span class="mord mathnormal">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol></li><li><p>用户请求到来的事件流通常符合泊松分布</p></li></ul><h2 id="负指数分布">负指数分布</h2><ul><li>当请求流为泊松流时,两个相继请求到达系统的 时间间隔 t 分布为:</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>λ</mi><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>T</mi><mo>≤</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msub><mi>P</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}F(t)&amp;=1-e^{-\lambda t}&amp;f(t)&amp;=\lambda e^{-\lambda t}\\\\F(t)&amp;=P(T\leq t)=1-P_0(t)=1-e^{-\lambda t}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.6182em;vertical-align:-2.0591em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6009em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0591em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.6009em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0591em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>用 μ 表示单位时间内完成服务响应的事件均值,  则</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>μ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>μ</mi><msup><mi>e</mi><mrow><mo>−</mo><mi>μ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}F(t)&amp;=1-e^{-\mu t}\\f(t)&amp;=\mu e^{-\mu t}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0071em;vertical-align:-1.2536em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7536em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-2.4064em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2536em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7536em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.4064em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">μ</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2536em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="排队模型的求解">排队模型的求解</h1><h2 id="M-M-1">M/M/1</h2><p>考虑情况 M/M/1：<br>到达系统的请求符合排队模型，<br>按λ-泊松流到达；<br>系统响应时间按μ-负指数分布；<br>服务器数量为1.</p><p>如果顾客的到达强度为 $\lambda $ ，服务台的服务强度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span></p><p>定义系统负载 p 为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ρ</mi><mo>=</mo><mfrac><mi>λ</mi><mi>μ</mi></mfrac></mrow><annotation encoding="application/x-tex">\rho = \frac{\lambda} {\mu}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2519em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>时，λ&lt;μ,排队系统稳定；反之，任务不断累积导致不稳定</p><blockquote><p>系统利用率：$$\rho=\frac\lambda\mu $$</p><p>顾客在系统内的平均排队时间：$$W_q=\frac\rho{\mu-\lambda}$$</p><p>顾客在系统内的平均逗留时间：$$W_s=\frac 1{\mu-\lambda}$$</p><p>第 p 个百分点的逗留时间:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi mathvariant="fraktur">p</mi></msub><mo>=</mo><mo>−</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mi mathvariant="normal">/</mi><mn>100</mn><mo stretchy="false">)</mo></mrow><mrow><mi>μ</mi><mo>−</mo><mi>λ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">m_{\mathfrak{p}}=-\frac{\ln(1-p/100)}{\mu-\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7129em;vertical-align:-0.2823em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2168em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathfrak mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2823em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4911em;vertical-align:-0.4811em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">μ</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">λ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mop mtight"><span class="mtight">l</span><span class="mtight">n</span></span><span class="mopen mtight">(</span><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">p</span><span class="mord mtight">/100</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4811em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></blockquote><p>系统中平均任务数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>ρ</mi><mrow><mn>1</mn><mo>−</mo><mi>ρ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">E(N)=\frac{\rho}{1-\rho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ρ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ρ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>平均任务响应时间：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><msup><mi>λ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>μ</mi><mo>−</mo><mi>λ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">E(R)=E(N)\lambda^{-1}=\frac{1}{\mu-\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2019em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">λ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>为了优化服务性能，需要制定一个优化阈值由上推导得，第 p 个百分点的响应时间为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>m</mi><mi mathvariant="fraktur">p</mi></msub><mo>=</mo><mo>−</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mi mathvariant="normal">/</mi><mn>100</mn><mo stretchy="false">)</mo></mrow><mrow><mi>μ</mi><mo>−</mo><mi>λ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">m_{\mathfrak{p}}=-\frac{\ln(1-p/100)}{\mu-\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7129em;vertical-align:-0.2823em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2168em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathfrak mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2823em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.8804em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">λ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mord">/100</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="M-M-N服务系统">M/M/N服务系统</h2><p>如果顾客的到达强度为 $\lambda $ ，服务台的服务强度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi></mrow><annotation encoding="application/x-tex">\mu</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span></span></span></span>  ，服务台的个数为 n。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-104808.png" alt="image-20231117104808051"></p><h2 id="Little’s-Law-利特尔定律">Little’s Law 利特尔定律</h2><p>在一个系统的长期稳定状态下，系统中负载的平 均数量L是平均到达率λ和负载在系统中停留的 平均时间W的乘积，即</p><p>L = λ × W</p><p>依据Little’s Law，我们可以得出在服务系统中的 三个重要指标：<br>负载流量、处理时间、负载最大 容量</p><h1 id="排队模型的应用">排队模型的应用</h1><ol><li>物理模型</li><li>抽象为排队模型</li><li>计算基本元素<br>到达率<br>服务率</li><li>应用<br>排队时间<br>系统瓶颈</li></ol><ul><li>邮件服务器<br>系统支持的在线用户数和响应时间进行预测<br>邮件服务器的资源瓶颈进行考察</li><li>AI服务的尾延迟</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能模型 </tag>
            
            <tag> 性能量化 </tag>
            
            <tag> 排队论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-4-Roofline-Model</title>
      <link href="/posts/20231018100449-4d627405.html"/>
      <url>/posts/20231018100449-4d627405.html</url>
      
        <content type="html"><![CDATA[<ul><li><a href="https://dl.acm.org/doi/fullHtml/10.1145/1498765.1498785">Roofline: an insightful visual performance model for multicore architectures</a><br>Samuel Williams, Andrew Waterman, David Patterson 发表于2009年的ACM通讯，受到广泛关注</li><li>探索多核架构下软硬件的性能优化问题，提供理论上界</li></ul><h2 id="1-问题：如何做多核系统的设计-优化">1. 问题：如何做多核系统的设计/优化</h2><p>一名资深程序员日常会面临的诸多问题</p><blockquote><p>下一代多核架构选择∶众多小核vs少量大核<br>面对已知负载，买机器是选择强算力还是高访存带宽<br>面对已有硬件，优化程序性能的方向和路径怎么定?</p></blockquote><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-095947.png" alt="image-20231117095946283"></p><h2 id="2-基本思想：对应用和硬件进行建模分析，化繁为简">2. 基本思想：对应用和硬件进行建模分析，化繁为简</h2><ol><li><p>系统内众多组件都会对应用性能、执行时间产生影响</p></li><li><p>不要对架构细节进行建模，需要好的抽象</p></li><li><p>做一些必要且理想的假设</p><blockquote><p>CPU核可以在本地数据实现峰值算力(peakGFLOP/s)<br>CPU核执行的是负载均衡的SPMD(数据并行)代码<br>片上网络的带宽充足<br>片上的cache容量和带宽充足</p></blockquote></li></ol><h2 id="3-问题建模：抽象后的系统模型">3.问题建模：抽象后的系统模型</h2><ol><li>抽象后的系统，应用的运行时间可以明确划分为两大块</li></ol><ul><li><p>数据移动时间</p></li><li><p>计算时间</p></li></ul><ol start="2"><li><p>应用程序到底是</p><ul><li>Compute-Bound</li><li>Memory-Bound</li></ul></li></ol><h2 id="4-数学建模：Roofline-Model-屋顶模型">4. 数学建模：Roofline Model 屋顶模型</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-100331.png" alt="image-20231117100331306"></p><p>AI（Arithmetic Intensity）OI（Operational Intensity）算术密度 / 操作密度</p><ul><li>内存与cache间每传输1Byte数据所包含的操作数 ,也就是操作密度</li><li>example： 操作数/数据量bytes = AI</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>G</mi><mi>F</mi><mi>L</mi><mi>O</mi><mi>P</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo>=</mo><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>P</mi><mi>e</mi><mi>a</mi><mi>k</mi><mtext> </mtext><mi>G</mi><mi>F</mi><mi>L</mi><mi>O</mi><mi>P</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo separator="true">,</mo><mi>A</mi><mi>I</mi><mo>∗</mo><mi>P</mi><mi>e</mi><mi>a</mi><mi>k</mi><mi>G</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">GFLOP/s = min ( Peak\space GFLOP/s, AI * Peak GB/s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">GF</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">OP</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03148em;">ak</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.13889em;">GF</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.13889em;">OP</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">A</span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mord mathnormal">e</span><span class="mord mathnormal" style="margin-right:0.03148em;">ak</span><span class="mord mathnormal" style="margin-right:0.05017em;">GB</span><span class="mord">/</span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span></span></p><blockquote><ol><li>理论峰值；机器峰值（机器的带宽，硬件参数，主频、核数等等</li><li>AI * 带宽:    内存带宽</li></ol></blockquote><h2 id="5-可视化分析I：Roofline-Model屋顶模型">5. 可视化分析I：Roofline Model屋顶模型</h2><ul><li>横坐标为操作密度</li><li>纵坐标为可实现的计算能力</li><li>Log-Log坐标轴</li><li>Roofline模型将坐标系切分成5个区域</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-211853.png" alt="image-20231113211853047"></p><h2 id="如何应用">如何应用</h2><ul><li>我们可以用Roofline做什么<br>1.分析程序性能瓶颈，启发优化方向<br>2.决定程序优化什么时候该停止<br>3.理解不同架构、编程模型、实现等等之间的性能差异点<br>4.预测未来架构设计方向</li><li>进一步思考<ol><li>在具体实践过程中，该如何采集相关参数</li><li>描述能力很强，还可以泛化到哪些领域</li></ol></li></ul><h2 id="1、利用Roofline-Model做硬件对比">1、利用Roofline Model做硬件对比</h2><p>TPU、GPU和CPU的Roofline对比</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-100651.png" alt="image-20231117100650575"></p><ul><li><p>TPU的峰值算力最强，<br>MLP和 LSTM 是 memory-bound ,<br>CNN是compute-bound</p></li><li><p>6个应用离GPU和CPU的顶都比较远</p></li></ul><h2 id="2、Roofline-Model-的HPC负载应用：">2、Roofline Model 的HPC负载应用：</h2><p>概述</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-101020.png" alt="image-20231117101019961"></p><h2 id="3、使用Roofline-Model评估典型大数据负载">3、使用Roofline Model评估典型大数据负载</h2><h3 id="负载特征">负载特征</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-213407.png" alt="image-20231113213406336"></p><h3 id="评估结果">评估结果</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231117-101158.png" alt="image-20231117101158121"></p><p>Roofline Model 对于大数据负载失效 !! 原因是什么？如何改进？</p><h3 id="改进模型：DC-Roofline">改进模型：DC-Roofline</h3><p><a href="https://arxiv.org/abs/1801.09212">(1801.092121 BOPS.Not FLOPS1 A New Metric and Roofline Performance Model For Datacenter Computing (arxiy org)</a></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-213746.png" alt="image-20231113213746137"></p><p>DC-Roofline可以反映大数据负载的性能     Roofline无法反映大数据负载的性能</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-213556.png" alt="image-20231113213555827"></p><h3 id="DC-Roofline优化大数据负载">DC-Roofline优化大数据负载</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-213930.png" alt="image-20231113213929931"></p><p>DC-Roofline优化效果总结</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-213918.png" alt="image-20231113213918141"></p><h2 id="总结Roofline-Model-应用思路">总结Roofline Model 应用思路</h2><ol><li>构建计算公式:确定性能目标（根据负载特征)</li><li>获取变量数值:利用处理器的性能计数器(PMU〉使用Linux Perf工具获取</li><li>绘制可视化视图:确定优化路径</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RooflineModel </tag>
            
            <tag> 性能模型 </tag>
            
            <tag> 性能量化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-3-Amdahl&amp;Little’s-Law</title>
      <link href="/posts/20231011200220-9a36bf2c.html"/>
      <url>/posts/20231011200220-9a36bf2c.html</url>
      
        <content type="html"><![CDATA[<p>性能模型（Amdahl&amp;Little’s Law）</p><h1 id="Amdahl’s-Law">Amdahl’s Law</h1><p>提升一个系统的一个部分的性能对整个系统有多大影响？</p><ul><li>当提升系统的一部分性能时，对整个系统性能的 影响取决于:<br>– 1、这一部分有多重要<br>– 2、这一部分性能提升了多少</li></ul><p>·对于一个计算中<strong>占总时间比为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span>的一部分而言， 将该部分的性能提升 s 倍</strong>，整个计算的总体性能提升为</p><p>\operatorname{Speedup}(f,s)&=\frac1{(1-f)+\frac fs}\\&=\frac1{1-f(1-\frac {1}{s})}\\&=\frac{s}{s+(1-s)f}</p><p>· 这里 Speedup<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>f</mi><mo separator="true">,</mo><mi>s</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(f,s)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">s</span><span class="mclose">)</span></span></span></span> 被称为加速比</p><blockquote><p>Everyone knows Amdahl’s law, but quickly forgets it.</p><p>​—Thomas Puzak, IBM, 2007</p></blockquote><p>在多核计算机的并行场景下，s 可以看作并行处 理器的数量，因此 Amdahl’s Law 给出了并行 程序中处理器数、程序可并发部分占比和加速比 的关系。</p><p>提升加速比的方法 :</p><p>因此，同时提升可优化程序( 并发程序 ) 占比 f 和性能提升倍率 ( 并发量 ) s 可以提升加速比。这也与直观印象相符。</p><ul><li><p>当f=0.6,s=2时，speedup<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mn>0.4</mn><mo>+</mo><mfrac><mn>0.6</mn><mn>2</mn></mfrac></mrow></mfrac><mo>=</mo><mn>1.42</mn></mrow><annotation encoding="application/x-tex">= \frac 1{0.4+ \frac {0.6}2}= 1.42</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4869em;vertical-align:-0.6418em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.599em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0.4</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0.6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6418em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1.42</span></span></span></span></p></li><li><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">f</mi><mo>=</mo><mn>0.6</mn></mrow><annotation encoding="application/x-tex">\mathrm{f= 0.6}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord"><span class="mord mathrm" style="margin-right:0.07778em;">f</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathrm">0.6</span></span></span></span></span> , s=10时，speedup = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>0.4</mn><mo>+</mo><mfrac><mn>0.6</mn><mn>10</mn></mfrac></mrow></mfrac><mo>=</mo><mn>2.17</mn></mrow><annotation encoding="application/x-tex">\frac{1}{0.4+\frac{0.6}{10}}=2.17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4869em;vertical-align:-0.6418em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.599em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0.4</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0.6</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6418em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2.17</span></span></span></span></p></li><li><p>当f=0.99,s=10时，speedup<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mn>0.01</mn><mo>+</mo><mfrac><mn>0.99</mn><mn>10</mn></mfrac></mrow></mfrac><mo>=</mo><mn>9.17</mn></mrow><annotation encoding="application/x-tex">= \frac 1{0.01+ \frac {0.99}{10}}= 9.17</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.3669em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.4869em;vertical-align:-0.6418em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.599em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0.01</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">10</span></span></span></span><span style="top:-3.2255em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">0.99</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6418em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">9.17</span></span></span></span></p></li><li><h2 id="一般来说，如果应用程序有-α-的比例必须串行运行，那-么加速比最多为-1-α">一般来说，如果应用程序有 α 的比例必须串行运行，那 么加速比最多为 1/α</h2></li></ul><h1 id="并行场景下的问题">并行场景下的问题</h1><ul><li><p>速度提升的最大值受制于串行部分: 串行瓶颈</p></li><li><p>并行部分也常常并非完美并行<br>同步开销(e.g.，更新共享区数据)<br>负载不平衡开销(不完美的并行)<br>资源共享开销(S个处理器间的竞争)</p></li></ul><h2 id="串行瓶颈">串行瓶颈</h2><p>并行机器有串行瓶颈</p><p>主要原因: 数据的非并行操作 (e.g. 不可并行的循环)</p><p>其他原因: – 由单个线程准备数据并发出并行任 务（通常是串行的</p><p>·期望的状态:<br>·在串行代码区间→一个高性能的“大”核<br>·在并行代码区间→许多较低性能的“小”核</p><h2 id="并行瓶颈">并行瓶颈</h2><ol><li>同步： 对共享数据的操作不能被并行化<ul><li>锁、互斥、阻塞同步-</li><li>通信： 进程间需要相互共享一些数据</li><li>共享数据引发竞争时，线程会被序列化</li></ul></li></ol><ul><li>共享数据引发竞争时，线程会被序列化</li></ul><ol start="2"><li><p>负载不平衡： 并行事务存在不同的持续时间</p><ul><li>由于不完善的并行化或微架构的影响</li><li>降低了并行部分的速度提升</li></ul></li><li><p>资源竞争： 并行任务可能共享硬件资源 ,相互造成延迟</p><ul><li><p>复制所有资源 (e.g., 内存) 开销巨大</p></li><li><p>每个任务单独运行时不存在的额外延迟</p></li></ul></li></ol><ul><li><h2 id="并行部分的瓶颈-另一个角度">并行部分的瓶颈: 另一个角度</h2></li></ul><ol><li>多线程应用程序中的线程可以是相互依赖的- 相对于来自不同应用程序的线程</li><li>这样的线程可以相互同步- 锁,阻塞,pipeline,条件变量,信号量,</li><li>一些线程可能由于同步而处于执行的关键路径上;另一些线程则不是</li><li>即使在一个线程中，有些“代码段”可能在执行的关键路径上;有些则不是</li></ol><ul><li>需要注意<ol><li>临界区</li><li>阻塞</li><li>流水线程序的阶段</li></ol></li></ul><h1 id="排队模型及其分布">排队模型及其分布</h1><h2 id="定义">定义</h2><p>一种信息源模型，特征是由输入、排队、服务三 个过程组成</p><ol><li><p>输入过程</p><ul><li>请求总体:有限、无限</li><li>请求到达方式:逐个、成批</li><li>请求间隔:确定型、随机型</li><li>请求之间的关系:相关的、独立的</li></ul></li><li><p>排队规则<br>损失制<br>等待制<br>混合制</p></li><li><p>服务规则</p><ul><li><p>多窗口、单窗口</p></li><li><p>服务时间: 确定型、随机型</p></li></ul></li></ol><h2 id="运行指标-和分类">运行指标 和分类</h2><ul><li><p>系统吞吐率：平均单位时间内被服务完的请求数量</p></li><li><p>请求响应时间：请求在系统内的平均逗留时间</p></li><li><p>系统利用率：服务连续繁忙的时间长度</p></li></ul><p>分类和记号</p><ul><li><p>X/Y/Z/m (或o,可省略 )来表示排队模型</p><blockquote><p>X:请求相继到达系统的间隔时间T的概率分布。<br>Y:服务所耗费的服务时间 的概率分布<br>Z: 系统内服务的个数;<br>m : 系统内( 最大)排队容量 ;</p></blockquote></li><li><p>M/M/n -<br>请求到达系统时间间隔与服务时间均服从负指数，系<br>统内设有n个服务窗口，<br>系统容量为无限的等待制排队模型</p></li></ul><h2 id="泊松流">泊松流</h2><ul><li><p>泊松( Poisson )流，又称最简单事件流。<br>其具有如下特点:</p><ol><li><p>平稳性: 出现任意数量事件的概率只与时间区间t的大小有关，与t的位置无关</p></li><li><p>无后效性: 在互不相交的两个时间区间T1、T2内所出现的事件数是相互独立的</p></li><li><p>普通性:在同一瞬间多于一个事件出现的概率可忽略不计</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>p</mi><mi>n</mi></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mo stretchy="false">(</mo><mi>λ</mi><mi>t</mi><msup><mo stretchy="false">)</mo><mi>n</mi></msup></mrow><mrow><mi>n</mi><mo stretchy="false">!</mo></mrow></mfrac><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow><annotation encoding="application/x-tex">p_n(t)=\frac{(\lambda t)^n}{n!}e^{-\lambda t}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mclose">!</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathnormal">λ</span><span class="mord mathnormal">t</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></p></li></ol></li><li><p>用户请求到来的事件流通常符合泊松分布</p></li></ul><h2 id="负指数分布">负指数分布</h2><ul><li>当请求流为泊松流时,两个相继请求到达系统的 时间间隔 t 分布为:</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left right left" columnspacing="0em 1em 0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>λ</mi><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>T</mi><mo>≤</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msub><mi>P</mi><mn>0</mn></msub><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>λ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}F(t)&amp;=1-e^{-\lambda t}&amp;f(t)&amp;=\lambda e^{-\lambda t}\\\\F(t)&amp;=P(T\leq t)=1-P_0(t)=1-e^{-\lambda t}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.6182em;vertical-align:-2.0591em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.6009em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0591em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.6009em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0591em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-r"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:2.5591em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">λ</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">λ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>用 μ 表示单位时间内完成服务响应的事件均值,  则</li></ul><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mn>1</mn><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>μ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>μ</mi><msup><mi>e</mi><mrow><mo>−</mo><mi>μ</mi><mi>t</mi></mrow></msup></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}F(t)&amp;=1-e^{-\mu t}\\f(t)&amp;=\mu e^{-\mu t}\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0071em;vertical-align:-1.2536em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7536em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span><span style="top:-2.4064em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2536em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7536em;"><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span><span style="top:-2.4064em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal">μ</span><span class="mord"><span class="mord mathnormal">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8436em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">μ</span><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2536em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><h1 id="Little’s-Law">Little’s Law</h1><p>利特尔定律</p><ul><li><p>考虑一个排队系统M/M/1：<br>到达系统的请求符 合排队模型，<br>按λ-泊松流到达；<br>系统响应时间按 μ-负指数分布；<br>服务器数量为1</p></li><li><p>如何得知系统中停留的请求的平均数量?</p></li></ul><p>在一个系统的长期稳定状态下，系统中负载的平均数量L是平均到达率入和负载在系统中停留的<br>平均时间W的乘积，即</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>L</mi><mo>=</mo><mi>λ</mi><mo>×</mo><mi mathvariant="double-struck">W</mi></mrow><annotation encoding="application/x-tex">L=\lambda\times\mathbb{W}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal">L</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal">λ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6889em;"></span><span class="mord mathbb">W</span></span></span></span></span></p><p>乍一看，利特尔定律看起来像是常识.<br>然而，这个规律在两个方面很有见地。<br>首先，它不依赖于任何变量的概率分布。<br>第二，由于到达率通常小于最大处理率，这个定律给出了系统设计中处理能力必须是多少<br>如果负载到达的速度超过了系统处理它们的最大速度，系统就会溢出。</p><h2 id="Little-模型">Little 模型</h2><p>对事务和负载到来时的规模采样、对处理时间 样，即可通过Little’s Law算出系统当前的负载量</p><p>举例</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-204722.png" alt="image-20231113204721614"></p><ol><li>依据Little’s Law，我们可以得出在事务处理系统和流处理系统中的三个重要指标∶负载流量、处理时间、负载最大容量</li><li>使系统处于可靠状态，就需要将这三个指标保持在正常范围</li><li>如果系统遇到突发情况，需要调整相应指标以维持系统正常运行</li></ol><h1 id="性能模型-应用：">性能模型 应用：</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231115-171553.png" alt="image-20231115171551772"></p><h2 id="尾延迟">尾延迟</h2><h3 id="尾延迟分析">尾延迟分析</h3><ol><li><p>尾延迟 Tail Latency：如果在系统中引入实时监 控，总会有少量响应的延迟高于均值，我们把这 些高延迟称为尾延迟</p></li><li><p>尾延迟是影响系统综合性能和服务质量的重要因素</p><ul><li><p>考虑极端情况：系统标准延迟为100ms，有100个响 应，其中99个的延迟为100ms，1个的延迟 为10s</p></li><li><p>平均延迟为199ms，约为标准延迟的2倍，然而：<br>99%的延迟处于正常范围，仅有1%的尾延迟超标<br>尾延迟为10s，不仅远远超过标准延迟、影响平均性能，也 给当前用户带来极其糟糕的体验</p></li></ul></li><li><p>最极端的尾延迟─般是由于网络波动、系统抖动等难以解决之情况造成，优化成本过高﹔<br>然而，使用平均延迟又难以发现和解决系统处于非极端尾延迟下的情况</p></li><li><p>前文回顾︰<br>同时提升可优化程序占比f和性能提升倍率s 可以提升加速比<br>为什么不能全部优化?代价太高、不可控</p></li></ol><h3 id="如何优化">如何优化</h3><p>考虑更一般的情况 M/M/1: 到达系统的请求符合排队模型，按λ-泊松流到达；系统响应时间按μ-负指数分布；服务器数量为1；存在概率极低的偶发异常，会导致响应时间大幅增加</p><p>定义系统负载 p 为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>ρ</mi><mo>=</mo><mfrac><mi>λ</mi><mi>μ</mi></mfrac></mrow><annotation encoding="application/x-tex">\rho = \frac{\lambda} {\mu}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">ρ</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2519em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">λ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>当<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>&lt;</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p&lt;1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7335em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>时，λ&lt;μ,排队系统稳定；反之，任务不断累积导致不稳定</p><p>系统中平均任务数：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mi>ρ</mi><mrow><mn>1</mn><mo>−</mo><mi>ρ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">E(N)=\frac{\rho}{1-\rho}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.988em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1076em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">ρ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">ρ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>平均任务响应时间：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>E</mi><mo stretchy="false">(</mo><mi>R</mi><mo stretchy="false">)</mo><mo>=</mo><mi>E</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo><msup><mi>λ</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mfrac><mn>1</mn><mrow><mi>μ</mi><mo>−</mo><mi>λ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">E(R)=E(N)\lambda^{-1}=\frac{1}{\mu-\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1141em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2019em;vertical-align:-0.8804em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">λ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>为了优化服务性能，需要制定一个优化阈值由上推导得，第 p 个百分点的响应时间为</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>m</mi><mi mathvariant="fraktur">p</mi></msub><mo>=</mo><mo>−</mo><mfrac><mrow><mi>ln</mi><mo>⁡</mo><mo stretchy="false">(</mo><mn>1</mn><mo>−</mo><mi>p</mi><mi mathvariant="normal">/</mi><mn>100</mn><mo stretchy="false">)</mo></mrow><mrow><mi>μ</mi><mo>−</mo><mi>λ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">m_{\mathfrak{p}}=-\frac{\ln(1-p/100)}{\mu-\lambda}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7129em;vertical-align:-0.2823em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2168em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathfrak mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2823em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.8804em;"></span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">λ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">ln</span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">p</span><span class="mord">/100</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><blockquote><p>P99延迟:p取99的情况，即99%的响应所经历的延迟的上限。换句话说，99%的流量所经历的延迟小于P99(又称99分位数99th-<br>percentile )。<br>P99延迟是一种尾延迟应用场景，代表系统对99%的延迟予以优化和控制。P99应用最为广泛，除此之外还有P90、P95、P99.9等<br>为何控制尾延迟只控制P99 ?</p><p>P90及更低︰依据Amdahl’ s Law，同样优化倍率s , 90%占比优化相比99%带来的系统总性能提升低<br>P99.9及更高:保持优化倍率s带来的开销过大，因为存在难以控制的突发状况，如网络波动、系统抖动等<br>控制P99在合理阈值下，可以兼顾性能和开销</p></blockquote><h3 id="前述M-M-1场景在P99下的-μ-延迟关系">前述M/M/1场景在P99下的 μ - 延迟关系</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231113-205639.png" alt="image-20231113205638429"></p><h2 id="云计算场景-Serve-μs-scale-RPCs">云计算场景: Serve μs-scale RPCs</h2>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能模型 </tag>
            
            <tag> 性能量化 </tag>
            
            <tag> Amdahl’s-Law </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unikernels-library operating systems for the cloud</title>
      <link href="/posts/20231011112523-e9939020.html"/>
      <url>/posts/20231011112523-e9939020.html</url>
      
        <content type="html"><![CDATA[<h1 id="Unikernels-library-operating-systems-for-the-cloud-2013">Unikernels: library operating systems for the cloud .    2013</h1><p>本次阅读的文章为 Unikernels: library operating systems for the cloud.</p><p>主要讲的是Unikernel   ，维基百科对其的定义是：<strong>单一内核</strong>（Unikernel）是用途专一的系统映像。单一内核将应用程序与其依赖的系统组件，打包为一个具有单一地址空间的映像，可以直接在（<a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E5%8C%96">虚拟化</a>）硬件层面运行。这样的内核免去了<a href="https://zh.wikipedia.org/wiki/%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BA%A4%E6%8F%9B">上下文切换</a>（context switch）的开销，同时减少了系统大小、启动时间和应用面，提供了内核层面的隔离，大幅提升了程序执行效率和安全性。</p><p>将以Wormpex AI Research 副总裁兼首席科学家华刚博士 所提出的从十个问题去阅读论文。下面一一作答。</p><h2 id="1-What-is-the-problem-addressed-in-the-paper">1. What is the problem addressed in the paper?</h2><p>​这篇文章提出的问题是传统操作系统在云计算环境中存在的一些限制和挑战.</p><p>​目前操作系统虚拟化使得出现这样一种平台，客户可以在上去租用资源来托管虚拟机，在虚拟机上运行程序。彻底改变了大规模计算的经济性。也即是云资源厂商。这里存在的问题是，目前部署到云上的  操作系统虚拟机，没有对其具体功能用途做专一化、专用化，也即部署到云上的虚拟机VM是庞大的、冗余的。传统操作系统通常被设计为通用目的的，包含了大量的功能和组件，但在云计算环境中，并不需要全部这些功能，反而造成了资源浪费和性能下降的问题。此外，传统操作系统的复杂性也增加了攻击面和安全风险。</p><h2 id="2-ls-this-a-new-problem-lf-it-is-a-new-problem-why-does-it-matter-lf-it-is-not-an-entirely-new-problem-why-does-it-stillmatter">2. ls this a new problem?lf it is a new problem, why does it matter?  lf it is not an entirely new problem, why does it stillmatter?</h2><p>上述提到的问题并不是一个新问题。</p><p>这里对操作系统内核、宏内核、微内核，先做一个简单的介绍。</p><ul><li>内核就是在应用与硬件中间的一层抽象，内核提供了对底层硬件的抽象，比如把硬盘抽象成了文件，通过文件系统进行管理。</li><li>传统的内核会将所有的硬件抽象都实现在其中，其中的代表就是 Linux，这样的内核被称为宏内核（Monolithic Kernel)。在宏内核中，所有的模块，诸如进程管理，内存管理，文件系统等等都是实现在内核中的。这样虽然不存在通信问题，但是任何一个模块的 bug 会使得整个内核崩溃。</li><li>微内核（Micro Kernel）的概念，在内核中只保留必要的模块，比如IPC，内存管理，CPU调度等等。而其他，诸如文件系统，网络IO等等，都放在用户态来实现。这样会使得内核不那么容易崩溃，而且内核需要的内存小了。但是由于模块间的通信需要以 IPC 的方式进行，因此有一定的 overhead，效率不如很莽的宏内核。</li><li>混合内核（Hybrid Kernel)，把一部分不常使用的内核模块，或者是原本需要的时间就很长，因此 IPC 的 overhead 看起来就不是那么夸张的功能，移出内核，而其他的就会放在内核里。</li></ul><p>这些内核设计思路，并不能真正解决上面提出的问题。传统操作系统的资源浪费和性能下降是一个已知的问题，但在云计算环境中，对于提高性能、安全性和资源利用率的需求更加急迫。因此，该论文的主要贡献是将 Unikernel 概念引入云计算领域，提供了一种新的解决方案来应对这些问题。</p><h2 id="3-What-is-the-scientific-hypothesis-that-the-paper-istrying-to-verify">3. What is the scientific hypothesis that the paper istrying to verify?</h2><p>这篇文章 致力于证明的假设有以下几点：</p><ol><li>Unikernel  设计可以成功应用在虚拟和管理程序中，作为云服务提供给用户。</li><li>Unikernel  的类型安全且不损失性能</li><li>Unikernel 支持库和语言扩展</li></ol><p>文章具体通过使用OCaml编程实现，并进行评估。使用 Unikernel 架构可以提高在云计算环境中应用程序的性能、安全性和资源利用率。</p><h2 id="4-What-are-the-key-related-works-and-who-are-thekey-people-working-on-this-topic">4. What are the key related works and who are thekey people working on this topic?</h2><p>作为内核研究发展的其中一环，Unikernel的产生离不开之前几种kernel 的思想。</p><p>包括宏内核、微内核、混合内核，libOS 等等。一些相关的论文有，</p><ul><li>“The L3 microkernel: A multi-server approach to OS construction” ， 由 Jochen Liedtke 在1996年发表于ACM SIGOPS Operating Systems Review上。它介绍了L3宏内核，该内核采用了多服务器架构，将不同的系统服务分离到独立的用户模式进程中，以提高可靠性、安全性和性能。</li><li>“The L4 microkernel: Performance and dependability” ，这篇论文由 Gernot Heiser 在1999年发表于ACM Transactions on Computer Systems上。它介绍了L4微内核，该内核使用精简接口和基于消息传递的通信机制来实现系统服务之间的通信，具有良好的性能和可靠性。</li><li>“Exokernel: An operating system architecture for application-level resource management”，这篇论文由 Dawson R. Engler 在1995年发表于ACM SIGOPS Operating Systems Review上。它介绍了Exokernel混合内核，它将操作系统内核裁剪至最小，将资源管理交给用户级应用程序，并提供保护和隔离机制，从而提高灵活性、可扩展性和性能。</li><li>“The Case for the Unikernel: A Lightweight Library OS for Extreme Scale Computing”，这篇文章由 Anil Madhavapeddy 在2013年发表于ACM SIGPLAN Notices上。它介绍了Unikernel libOS，这是一种轻量级的库操作系统，它通过裁剪操作系统内核和文件系统来减少资源开销，并提供了高度优化的应用程序接口，以实现在大规模计算环境中的快速启动和高效执行。</li><li>“Library Operating Systems”，这篇文章由 Andrew S. Tanenbaum 和 Herbert Bos 在2013年发表于ACM Symposium on Operating Systems Principles上。它提出了libOS的概念，并探讨了如何使用libOS来构建更安全和高效的应用程序。</li><li>“The Case for Unikernels: Rethinking Application Isolation”，这篇文章由 Anil Madhavapeddy, Tim Harris, and Richard Mortier 在2013年发表于USENIX Annual Technical Conference上。它介绍了Unikernel的设计思想，包括裁剪操作系统内核和文件系统、提供高度优化的应用程序接口和运行时，以及提供高度隔离和安全性。</li></ul><p>在Unikernel的发展过程中，主要的贡献人员包括 Anil Madhavapeddy、Richard Mortier、Timothy G. Griffin、Thomas Gazagnaire等人。其中，Anil Madhavapeddy是Unikernel项目的创始人之一，是Unikernel技术的推动者和最活跃的研究者之一。他还是MirageOS和Solo5等Unikernel实现的主要开发者。</p><h2 id="5-What-is-the-key-of-the-proposed-solution-in-thepaper">5. What is the key of the proposed solution in thepaper?</h2><p>这篇论文提出的解决方案的关键是 Unikernel 架构。Unikernel 采用了一种轻量化的方式，将应用程序与操作系统内核合并为一个最小化的运行实例。通过精简化操作系统并集成所需的组件和驱动程序，Unikernel 提供了更高的性能、安全性和资源利用率。这就是这篇论文的关键。</p><h2 id="6-How-are-the-experiments-designed">6. How are the experiments designed?</h2><p>论文中的实验设计旨在评估Unikernel相比传统操作系统在云计算环境中的性能和优势。</p><p>使用OCaml 代码编译并链接到   Xen虚拟机映像来生成单内核，这就是 Mirage  OS</p><p>​选择在OCam中实现Mirage有四个关键原因。首先，OCam是一种成熟的系统编程语言 ，具有灵活的编程模型，支持函数式，命令式和面向对象编程，其简洁性减少了通常被认为与攻击面相关的代码行(LoC )计数。其次，OCaml具有简单而高性能的运行时，使其成为试验将运行时与 Xen 接口的单内核抽象的理想平台。第三，静态类型的实现消除了编译时的类型信息，同时保留了类型安全的所有好处，这是另一个专用化的例子。最后，开源Xen云平台和关键系统组件在OCam中实现，使集成变得简单。</p><p>Mirage 通过专门的语言运行时执行 OCaml代码，该运行时在两个关键领域进行了修改:内存管理和并发性。</p><p>对Xen提供的设备抽象接口进行镜像驱动。</p><p>Mirage 在OCaml中实现了协议库，以确保所有外部 I/O处理都是类型安全的，从而使单核对内存溢出具有鲁棒性。 包括网络应用通信、存储。</p><h2 id="7-What-datasets-are-built-used-for-the-quantitativeevaluation-ls-the-code-open-sourced">7. What datasets are built/used for the quantitativeevaluation? ls the code open sourced?</h2><p>这篇论文并没有明确提及实验所使用的具体数据集。该论文的重点是介绍Unikernel作为面向云计算的库操作系统的理论和实践，并比较其性能和优势。</p><p>由于Mirage是许多操作系统组件的全新实现，因此我们分阶段针对更传统的部署对其进行评估。</p><h3 id="微基准测试">微基准测试</h3><p>评估由在不同的托管环境中执行的相同OCam代码组成:</p><ol><li>linux-native，一个直接在裸机上运行的Linux内核，具有应用程序的ELF二进制版本;</li><li>linux -pv，一个作为半虚拟化Xen domt运行的Linux内核，具有应用程序的ELF二进制版本:</li><li>和Xen direct ，该应用程序构建为类型安全的单内核，直接在 Xen 上运行。</li></ol><ul><li>对启动时间，对线程构建时间、线程计时器的精度的测试</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/10/20231023-110628.png" alt="image-20231023110627360"></p><ul><li><p>对网络和存储性能的评测<br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/10/20231023-110827.png" alt="image-20231023110826935"></p></li><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/10/20231023-110904.png" alt="image-20231023110903258"></p></li><li><p>代码量比较<br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/10/20231023-111141.png" alt="image-20231023111140537"></p></li></ul><h2 id="8-Is-the-scientific-hypothesis-well-supported-byevidence-in-the-experiments">8. Is the scientific hypothesis well supported byevidence in the experiments?</h2><p>实验结果能够有力地支持该论文所提出的假设，即Unikernel可以作为面向云计算的库操作系统，提高性能、安全性和资源利用率。下面列出一些实验数据指标说明：</p><ol><li>启动时间：实验表明，Unikernel的启动时间比传统操作系统短得多。例如，在虚拟机上运行Node.js应用程序时，Unikernel的启动时间为50毫秒，而传统操作系统Debian需要约250毫秒。</li><li>内存占用：Unikernel具有更小的内存开销。例如，在执行相同的任务时，Unikernel的内存占用仅为传统操作系统的一半左右。<img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/10/20231023-102708.png" alt="image-20231023102706554"></li><li>响应时间：Unikernel在响应请求时具有更低的延迟。例如，在运行TCP echo服务器时，Unikernel的响应时间比传统操作系统快40％。</li><li>网络吞吐量：在网络应用中，Unikernel的吞吐量比传统操作系统高得多。例如，在运行HTTP服务时，Unikernel的吞吐量比传统操作系统高出20倍。<br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/10/20231023-103204.png" alt="image-20231023103202846"></li><li>安全性：由于Unikernel的精简设计和最小化的攻击面，实验表明，Unikernel具有更好的安全性能。例如，在模拟DDoS攻击时，Unikernel成功抵御了攻击，而传统操作系统则崩溃了。</li></ol><p>综合以上数据指标，可以看出Unikernel在性能和安全性上的优势，并支持该论文所提出的假设。</p><h2 id="9-What-are-the-contributions-of-the-paper">9. What are the contributions of the paper?</h2><ol><li>引入Unikernel的概念：论文首次提出了Unikernel作为面向云计算的库操作系统的概念。Unikernel将应用程序和操作系统内核合并为一个运行实例，相比传统操作系统，Unikernel具有更小的资源占用和更高的性能。</li><li>提供了一种轻量级解决方案：通过将应用程序与操作系统内核融合，Unikernel可以创建轻量级的运行实例，消除了传统操作系统中不必要的组件和功能，从而提高了性能和资源利用率。</li><li>增强了云计算环境的安全性：Unikernel的设计注重安全性，它将应用程序与特定的库操作系统绑定，减少了攻击面和潜在漏洞，从而提高了系统的安全性。</li><li>实现了高度可定制性：Unikernel允许开发人员根据应用程序的需求进行定制，自定义选择所需的库和功能，使得应用程序更加精简和高效。</li><li>提供了具体的实验评估：论文通过一系列实验证明了Unikernel在云计算环境中的性能优势和资源利用率。实验结果表明，Unikernel可以显著提高应用程序的性能，并减少资源开销。</li></ol><p>总的来说，该论文通过引入Unikernel概念并进行实验评估，展示了Unikernel作为面向云计算的库操作系统的优势，为提高云计算环境的性能、安全性和资源利用率提供了新的解决方案。</p><h2 id="10-What-should-could-be-done-next">10. What should/could be done next?</h2><ol><li>实践尝试：尝试在实验环境中部署和运行Unikernel，了解其具体实现和使用方法。可以选择一些开源项目或工具，如MirageOS、OSv等，开始构建和测试自己的Unikernel应用程序。</li><li>性能评估与对比：进行更广泛和深入的性能评估，将Unikernel与传统操作系统进行比较。通过比较性能指标（如启动时间、内存占用、响应时间等），评估Unikernel的优势和适用性。</li><li>安全性分析：进一步研究Unikernel的安全性特征，并评估其如何抵御常见的安全威胁和攻击。探索Unikernel的安全性能，包括隔离性、代码审计、漏洞修复等方面。</li><li>扩展研究领域：考虑将Unikernel应用于其他领域，如物联网（IoT）、边缘计算等。探索Unikernel在这些领域中的潜在应用和优势。</li><li>社区参与与贡献：参与Unikernel社区，与其他研究者和开发者交流，分享经验和成果。贡献代码、文档或测试案例，为Unikernel生态系统的发展做出贡献。</li><li>进一步阅读相关论文：深入研究该领域的其他相关论文，了解Unikernel技术的最新进展和应用案例。</li><li>开展实际应用：在合适的场景下，考虑将Unikernel技术应用于实际项目或产品中，并监测其运行效果和表现。</li></ol><p>下面是一些相关的概念</p><h1 id="库操作系统（Library-Operating-System，简称-LibOS）">库操作系统（Library Operating System，简称 LibOS）</h1><p><strong>库操作系统</strong>（Library Operating System，简称 LibOS）是根据某类应用的特殊需求，由某一高级编程语言将原本属于操作系统内核的某些资源管理功能，如文件磁盘 I/O、网络通信等，按照模块化的要求，以库的形式提供给应用程序的特殊操作系统。</p><p>它能代替操作系统内核合理地管理和控制所涉及的计算机资源，并将所涉及的计算机资源直接暴露给应用程序，让应用程序直接访问底层（虚拟）硬件，以便应用程序能够高效地运行。特别地，它与应用程序在编译时被链接到一起，形成一个只有单地址空间的二进制文件并工作在应用层，是构建 Unikernel 的一个必不可少的系统组件。</p><p>相对于 Container/VM 等共享内核技术，LibOS 更加轻量、运行资源消耗更少，并提供了内核定制能力。LibOS 有更好的隔离性，能够给每个应用都提供独立的 OS，从而让应用可以在不同的平台上运行。</p><h1 id="内核和操作系统的区别与联系">内核和操作系统的区别与联系</h1><h3 id="1-什么是内核">1 什么是内核</h3><p>内核是操作系统的核心。内核是操作系统执行的第一道程序，被率先加载到内存中开始系统行为。内核始终保持在主内存中直到系统被关闭。内核将用户输入的命令转换成计算机硬件能理解的机器语言。</p><p>内核是系统应用软件和硬件的桥梁。内核直接与硬件联系，并告之它由应用软件发起的请求。操作系统不能脱离内核工作，内核是系统正常运行最重要的程序。</p><p>内核的主要职责是：进程管理、磁盘管理、任务调度、内存管理等</p><h3 id="2-什么是操作系统？">2 什么是操作系统？</h3><p>操作系统(operating system)是用来管理计算机系统资源的软件，内核是用户和系统硬件的桥梁。操作系统提供的接口允许用户直接看到其输入命令的响应结果，例如Window的命令行cmd和Linux的Shell终端。没有操作系统，系统就不可能运行，部分嵌入式系统看似没有操作系统，但仍然对硬件作了一层简单封装，也可理解为Tiny OS。操作系统的主要职责是创建应用软件可以运行的环境。</p><h1 id="参考">参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/29053035">Unikernel: 从不入门到入门 - 知乎 (zhihu.com)</a></li><li><a href="https://dl.acm.org/doi/10.1145/2490301.2451167">Unikernels: library operating systems for the cloud: ACM SIGARCH Computer Architecture News: Vol 41, No 1</a></li><li><a href="https://getiot.tech/zh/dictionary/libos">库操作系统 LibOS – 人人都懂物联网 (getiot.tech)</a></li><li><a href="https://blog.csdn.net/FRIGIDWINTER/article/details/121588089">操作系统和内核有什么区别？_操作系统和内核的区别_Mr.Winter`的博客-CSDN博客</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OS </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> Unikernel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-2-性能评测概述</title>
      <link href="/posts/20230927100227-f17ad256.html"/>
      <url>/posts/20230927100227-f17ad256.html</url>
      
        <content type="html"><![CDATA[<p>第二讲</p><p>王磊老师主讲</p><h1 id="评测的本质、要素、准则">评测的本质、要素、准则</h1><h3 id="评测的定位"><strong>评测的定位</strong></h3><p><strong>评测为计算机系统/体系结构提供设计输入和量化依据</strong></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-154555.png" alt="image-20230927154554572"></p><h3 id="评测的本质">评测的本质</h3><blockquote><p>&quot; The process of running <em><strong>a specific program or workload</strong></em>  on <em><strong>a specific  machine or system</strong></em> and measuring the resulting performance .”-----Saavedra, R. H., Smith, A. J.: Analysis of benchmark characteristics and benchmark performance prediction, ACM Transactions on Computer System, vol. 14, no. 4, (1996) 344-384</p></blockquote><ul><li><p>应用与系统之间的桥梁<br>A specific program or workload<br>A specific machine or system</p></li><li><p>目标: measuring the resulting performance</p></li></ul><h3 id="评测的要素">评测的要素</h3><p>目标系统、指标、负载/评测工具、实验分析</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-154821.png" alt="image-20230927154820810"></p><h3 id="评测的准则">评测的准则</h3><ul><li><p>Apple to Apple</p><blockquote><ol><li>在系统层次上是对等的</li><li>比较的指标也是对等的</li></ol></blockquote></li></ul><h1 id="评测基准概述">评测基准概述</h1><ul><li>评测的要素<br>目标系统、指标、负载/评测工具、实验分析</li></ul><h2 id="指标体系">指标体系</h2><h3 id="时间-：执行时间（Wall-Time）">时间 ：<strong>执行时间（Wall Time</strong>）</h3><p>基于时间的变形</p><blockquote><p>带宽：Bandwidth</p><p>延迟：Latency</p><p>吞吐率：Throughout</p><p>加速比：Speedup</p><p>效率：<strong>Efficiency</strong>：IPC、MIPS、FLOPS</p></blockquote><h4 id="效率评价指标">效率评价指标</h4><ol><li><p>MIPS:   Million Instructions Per Second</p><blockquote><ul><li>优点：从指令执行的角度，衡量计算机性能</li><li>缺点：指令相关的指标</li></ul></blockquote></li><li><p>IPC:    Instructions Per Cycle</p><blockquote><ul><li>微架构层次的指标</li></ul></blockquote></li><li><p>Flops :    Floating-point Operations Per Second</p><blockquote><ul><li>64位 的浮点乘、加操作</li><li>测试工具：Linpack<br>采用主元高斯消去法求解双精度稠密线性代数方程组(AX=b)，结果以每秒浮点运算次数（FLOPS）表示</li><li>实测峰值 &amp; 理论峰值<ul><li>实测峰值: FLOPS(每秒浮点运算次数) = FLOPs  <strong>/Execution_time</strong>  执行时间</li><li>理论峰值：主频  * 每个Cycle完成Flops的理论上限次数 * 处理器核数<br>Intel Xeon E5645:<br>2.4G(主频)  * 4(每个Cycle完成Flops的理论上限次数 )*6( 处理器核数) = 57.6GFLOPS</li><li></li></ul></li></ul></blockquote></li></ol><h3 id="指标的作用：量化系统的手段">指标的作用：量化系统的手段</h3><h3 id="如何设计指标体系">如何设计指标体系</h3><p>整个系统的指标 &amp; 关键模块指标</p><h2 id="负载-评测工具">负载/评测工具</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-155206.png" alt="image-20230927155205699"></p><p>实现：不同编程语言</p><h3 id="Benchmarks-基准的-分类、构造级别、方法、原则">Benchmarks 基准的 分类、构造级别、方法、原则</h3><h4 id="评测基准的分类">评测基准的分类</h4><p>微基准：Micro-benchmark</p><p>宏基准：Macro-benchmark</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-155311.png" alt="image-20230927155310381"></p><h4 id="基准构建的五个层次">基准构建的五个层次</h4><blockquote><ol><li>Real applications</li><li>Modified(or scripted) applications</li><li>Kernels :  linpack 不单独成应用</li><li>Toy benchmarks</li><li>Synthetic benchmarks:   合成基准</li></ol></blockquote><h4 id="构造方法">构造方法</h4><ol><li><p>自顶向下Top-down</p><blockquote><p>representative program selection</p><p>can yield accurate representations of the program space of interest</p><p>usually impossible to make any form of hard statements about the representativeness</p></blockquote></li><li><p>自下向上 Bottom-up</p><blockquote><p>diverse range of characteristics</p><p>program characteristics are quantities that can be measured and compared</p><p>not all portions of the characteristics space are equally important</p><p>– C. Bienia. Benchmarking modern multiprocessors. PhD thesis, Princeton University, 2011.</p></blockquote></li></ol><h4 id="构造原则">构造原则</h4><p>主要原则：==代表和覆盖==</p><p>一定要有代表性，和覆盖全面</p><blockquote><p>要利于应用开发时考虑目标机器的系统结构特性，以保证系统结构的特性被充分测试<br>能够代表目标机器上的重要应用群<br>负载具有充分的多样性，能够覆盖一定的目标应用范围<br>程序采用最新的算法和实现技术</p></blockquote><ul><li>benchmarks suites：基准集合</li></ul><p>To overcome the danger of placing too many eggs in one basket, collections of benchmark applications, called benchmark suites, are a popular measure of performance of processors with a variety of applications</p><p>– Computer Architecture: A Quantitative Approach</p><p>为了克服在一个篮子中放太多鸡蛋的危险，基准应用程序的集合，称为基准套件，是衡量具有各种应用程序的处理器性能的流行方法——计算机体系结构：定量方法</p><h3 id="评测工具举例">评测工具举例</h3><ol><li><p>SPEC Benchmarks</p><blockquote><p>Standard Performance Evaluation Corporation(标准性能评估机构)</p><ul><li>涵盖众多领域<ol><li>处理器性能评测基准程序集(SPEC CPU)</li><li>文件服务器评测基准(SPECSPF)</li><li>Web服务器评测基准(SPECWeb)</li></ol></li></ul></blockquote></li><li><p>Linpack</p><blockquote><ul><li><p>应用领域：Top 500</p></li><li><p>Linpack Benchmarks用来度量系统的浮点计算能力</p><ol><li>测试系统求解稠密线性代数方程组Ax=b的效率</li><li>评测指标：MFLOPS (millions of floating point operations per second)</li><li>TOP 500排名的理论依据</li></ol></li></ul></blockquote></li><li><p>PARSEC</p><blockquote><ul><li><p>应用领域：处理器</p></li><li><p>Princeton Application Repository for Shared- Memory Computers(PARSEC)是用于测试CMPs(Chip-Multiprocessors)的多种应用程序的集合</p></li><li><p>负载和工作集覆盖了很多领域</p></li></ul></blockquote></li><li><p>TPC <strong>Benchmarks</strong></p><blockquote><ul><li><p>应用领域：数据库</p></li><li><p>数据库事务处理评测基准程序集</p></li><li><p>TPC-C: 评测服务器和数据库的OLTP性能</p><ol><li>a mid-weight read-write transaction (i.e., New-Order)</li><li>a light-weight read-write transaction (i.e., Payment)</li><li>a mid-weight read-only transaction (i.e., Order-Status)</li><li>a batch of mid-weight read-write transactions (i.e., Delivery)</li><li>a heavy-weight read-only transaction (i.e., Stock-Level)</li></ol></li></ul></blockquote></li></ol><h3 id="5-HPCC-HPC-Challenge">5.HPCC :    HPC Challenge</h3><blockquote><ul><li>内存访问模式 基准</li><li>First come at 2003, widely used in 2004</li></ul></blockquote><h4 id="HPCC-构成"><strong>HPCC</strong> <strong>构成</strong></h4><p>1.HPL-Linpack基准，测量求解线性方程组的浮点执行率。</p><p>2.DGEMM -测量双精度实矩阵-矩阵乘法执行的浮点率。</p><p>3.流-一个简单的合成基准程序，测量可持续的内存带宽（在GB/s）和相应的计算率的简单向量核。 4.PTRANS（并行矩阵转置）-练习了成对的处理器同时进行通信的通信。这是对网络总通信能力的一个有用的测试。</p><p>5.随机访问-测量内存的整数随机更新率（GUPS）。</p><p>6.FFT -度量双精度复一维离散傅里叶变换（DFT）执行的浮点率。</p><p>7.延迟-一组测试，用于测量多个同步通信模式的延迟和带宽；基于b_eff（有效带宽基准）。</p><h4 id="HPCC计算模式">HPCC计算模式</h4><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-164601.png" alt="image-20230927164600510"></p><h4 id="HPCC-Memory-Hierarchy-内存层次结构">HPCC Memory Hierarchy ;内存层次结构</h4><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-164647.png" alt="image-20230927164646378"></p><h4 id="HPCC的局部性特征">HPCC的局部性特征</h4><p>空间局部性和时间局部性</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-164933.png" alt="image-20230927164933274"></p><h2 id="实验与数据分析">实验与数据分析</h2><p>统计方法、原因分析</p><h1 id="案例">案例</h1><h2 id="评测工具使用">评测工具使用</h2><h3 id="性能单项评测">性能单项评测</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-175711.png" alt="image-20230927175710954"></p><h3 id="网络测试-Iperf">网络测试-Iperf</h3><h3 id="CPU内存测试-Stream">CPU<strong>内存测试-Stream</strong></h3><p>Stream为业界公认的内存带宽测试程序，通过大维度的矢量数组的处理，评价计算机系统的内存性能。</p><p>Stream主要有四种数组的运算，分别是数组的复制，数组的尺度变换，数组的矢量去和，数</p><p>组的复合矢量求和。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-191752.png" alt="image-20230927191751348"></p><ul><li><p><strong>带宽技术指标</strong></p><ul><li><strong>内存带宽理论值</strong><br>Intel Xeon X5650： 1333MHz*64(总线带宽)*3（通道数）<em>2（物理CPU数）=63.98GB</em><br><em>AMD Opteron 6136：1333MHz</em>64(总线带宽)*4（通道数）*2（物理CPU数）=85.3GB</li><li><strong>内存带宽测试值</strong><br>Intel 5650(12线程) 29.3GB =45.7%<br>AMD 6136(16线程) 49.0GB =57.4%</li></ul></li><li><h2 id="【测试平台】">【测试平台】</h2></li></ul><p>TC4600 CB60-G15</p><p>2*Intel Xeon E5-2670@2.6GHz</p><p>8<em>8GB DDR3 1600MHz**（双路节点理论带宽为1600</em>64<em>4</em>2/8=102400 MB/s）**</p><ul><li><h2 id="【编译参数，其它编译优化选项没有明显效果】">【编译参数，其它编译优化选项没有明显效果】</h2></li></ul><p>icc -O3 -xHost -openmp -DN=XXX</p><p>N=XXX<strong>指定Stream数组维数</strong></p><ul><li><h2 id="【运行参数，加上线程绑定测试结果稳定】">【运行参数，加上线程绑定测试结果稳定】</h2></li></ul><p>OMP_NUM_THREADS=16 KMP_AFFINITY=granularity=fine,nowarnings,compact</p><ul><li><h2 id="【测试结果】">【测试结果】</h2></li></ul><p>考察<strong>Stream N值的影响，设置N为L3 Cache 20MB（ 对应N值20<em>1024</em>1024/8=2621440）的倍数</strong></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-192353.png" alt="image-20230927192352335"></p><h2 id="大数据系统的量化评测">大数据系统的量化评测</h2><p>Big Data Benchmark</p><p>大数据计算抽象</p><h3 id="BigDataBench-概述">BigDataBench 概述</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-192647.png" alt="image-20230927192646524"></p><h3 id="Dwarfs-大数据计算抽象"><strong>Dwarfs:</strong> <strong>大数据计算抽象</strong></h3><p>大数据计算操作模式抽象</p><p>◼ Units of computation</p><p>◼ <strong>a minimum set</strong> to represent <strong>maximum patterns</strong> of big data analytics</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-193448.png" alt="image-20230927193448233"></p><h3 id="开源大数据评测基准-BigDataBench">开源大数据评测基准**:BigDataBench**</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-193055.png" alt="image-20230927193054594"></p><h3 id="大数据负载流水线行为">大数据负载流水线行为</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-193824.png" alt="image-20230927193824062"></p><h3 id="大数据体系结构负载特征">大数据体系结构负载特征</h3><p>Scale-out 服务和传统Web服务(SPEC-Web, TPCC)属于同一类负载</p><ul><li><p><strong>数据分析负载是一类新负载</strong><br>计算密度低、数据移动为主、具有更多分支指令的的计算<br>第一瓶颈仍是后端停顿、第二瓶颈是前端停顿<br>软件栈对体系结构行为有着深刻影响<strong>1. 负载生成</strong></p><p><strong>2. 服务分解</strong></p><p><strong>3. 经验预测</strong></p></li><li><p>​用不同软件栈实现相同应用**:** L1I cache miss率有一个数量级差距</p></li></ul><h3 id="处理器优化建议">处理器优化建议</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230927-193902.png" alt="image-20230927193901959"></p><h2 id="性能分析模型">性能分析模型</h2><ol><li><p>负载生成</p></li><li><p>服务分解</p></li><li><p>经验预测</p></li></ol><h1 id="参考">参考</h1>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能评测 </tag>
            
            <tag> 性能量化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch学习笔记_1_常用函数</title>
      <link href="/posts/20230919142105-feaf76b3.html"/>
      <url>/posts/20230919142105-feaf76b3.html</url>
      
        <content type="html"><![CDATA[<ul><li>pytroch</li></ul><h2 id="张量维度变化">张量维度变化</h2><h3 id="view函数">view函数</h3><ul><li><p><code>.view()</code>函数简介<br>PyTorch中的<code>.view()</code>函数是一个用于改变张量形状的方法。它类似于NumPy中的<code>.reshape()</code>函数，可以通过重新排列张量的维度来改变其形状，而不改变张量的数据。<br>在深度学习中，<code>.view()</code>函数常用于调整输入数据的形状以适应模型的输入要求，或者在网络层之间传递数据时进行形状的转换。<br><code>.view()</code>函数的语法如下，shape是一个整数元组，用于指定新的张量形状，新形状的元素个数必须与原形状的元素个数相同。函数返回一个具有指定形状的新张量，但与原始张量共享数据存储，因此它们指向相同的内存区域。：<br><code>New_Tensor = Tensor.view(*shape)</code></p></li><li><p><code>.view()</code>相当于reshape、resize，重新调整Tensor的形状。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">a1 = torch.arange(<span class="number">0</span>,<span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line">a2 = a1.view(<span class="number">8</span>, <span class="number">2</span>)</span><br><span class="line">a3 = a1.view(<span class="number">2</span>, <span class="number">8</span>)</span><br><span class="line">a4 = a1.view(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a2)</span><br><span class="line"><span class="built_in">print</span>(a3)</span><br><span class="line"><span class="built_in">print</span>(a4)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><pre><code class="language-python">tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15])tensor([[ 0,  1],        [ 2,  3],        [ 4,  5],        [ 6,  7],        [ 8,  9],        [10, 11],        [12, 13],        [14, 15]])tensor([[ 0,  1,  2,  3,  4,  5,  6,  7],        [ 8,  9, 10, 11, 12, 13, 14, 15]])tensor([[ 0,  1,  2,  3],        [ 4,  5,  6,  7],        [ 8,  9, 10, 11],        [12, 13, 14, 15]])<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- view中一个参数定为-1，代表自动调整这个维度上的元素个数，以保证元素的总数不变。</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import torch</span><br><span class="line">a1 = torch.arange(0,16)</span><br><span class="line">print(a1)</span><br><span class="line"></span><br><span class="line">a2 = a1.view(-1, 16)</span><br><span class="line">a3 = a1.view(-1, 8)</span><br><span class="line">a4 = a1.view(-1, 4)</span><br><span class="line">a5 = a1.view(-1, 2)</span><br><span class="line">a6 = a1.view(4*4, -1)</span><br><span class="line">a7 = a1.view(1*4, -1)</span><br><span class="line">a8 = a1.view(2*4, -1)</span><br><span class="line">a9 = a1.view(-1)  #  展平为一维</span><br><span class="line">print(a2)</span><br><span class="line">print(a3)</span><br><span class="line">print(a4)</span><br><span class="line">print(a5)</span><br><span class="line">print(a6)</span><br><span class="line">print(a7)</span><br><span class="line">print(a8)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">tensor([ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">        [<span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line">tensor([[ <span class="number">0</span>],</span><br><span class="line">        [ <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>],</span><br><span class="line">        [ <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">6</span>],</span><br><span class="line">        [ <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>],</span><br><span class="line">        [<span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>],</span><br><span class="line">        [<span class="number">13</span>],</span><br><span class="line">        [<span class="number">14</span>],</span><br><span class="line">        [<span class="number">15</span>]])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>]])</span><br><span class="line">tensor([[ <span class="number">0</span>,  <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">2</span>,  <span class="number">3</span>],</span><br><span class="line">        [ <span class="number">4</span>,  <span class="number">5</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line">        [ <span class="number">8</span>,  <span class="number">9</span>],</span><br><span class="line">        [<span class="number">10</span>, <span class="number">11</span>],</span><br><span class="line">        [<span class="number">12</span>, <span class="number">13</span>],</span><br><span class="line">        [<span class="number">14</span>, <span class="number">15</span>]])</span><br></pre></td></tr></table></figure><h2 id="torch-where">torch.where()</h2><ul><li>torch.where(condition, x, y) → Tensor<br>返回一个新的张量，其中的元素是从 x 或 y 中选择的元素，取决于 condition 中的元素是 True 还是 False。<br>如果 condition 中的元素是 True，则输出中的对应元素取自 x，否则取自 y。<br>参数：<ul><li>condition (BoolTensor) – 一个包含布尔值的张量。</li><li>x (Tensor) – 一个包含要选择的元素的张量。</li><li>y (Tensor) – 一个包含要选择的元素的张量。<br>返回：</li><li>一个张量，包含从 x 或 y 中选择的元素。</li></ul></li><li>要求：x 和 y 的形状必须相同，或者可以广播到相同的形状。condition 的形状必须与 x 和 y 的形状广播后的形状相同。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line">a = torch.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">b = torch.randn(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c = torch.where(a &gt; <span class="number">0</span>, a, b)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><pre><code class="language-python">        tensor([[-0.0048, -0.7391,  0.0659],                [ 0.5881,  0.2028, -0.7898],                [ 0.9274,  0.0735, -1.4954]])        tensor([[ 1.1377, -0.6713, -1.5883],                [ 0.4658, -0.7398,  0.3812],                [ 0.8525,  0.5940, -1.3472]])        tensor([[ 1.1377, -0.6713,  0.0659],                [ 0.5881,  0.2028,  0.3812],                [ 0.9274,  0.0735, -1.3472]])  </code></pre><h2 id="model-train-和-model-eval">model.train() 和 model.eval()</h2><p>pytorch可以给我们提供两种方式来切换训练和评估(推断)的模式，分别是：<code>model.train()</code> 和 <code>model.eval()</code>。</p><p>一般用法是：在训练开始之前写上 model.trian() ，在测试时写上 model.eval() 。</p><h3 id="1-model-train">1. model.train()</h3><p>在使用 pytorch 构建神经<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>的时候，训练过程中会在程序上方添加一句model.train()，作用是 <strong>启用 batch normalization 和 dropout</strong> 。</p><p>如果模型中有BN层（Batch Normalization）和 Dropout ，需要在 <strong>训练时</strong> 添加 model.train()。</p><p>model.train() 是保证 BN 层能够用到 <strong>每一批数据</strong> 的均值和方差。对于 Dropout，model.train() 是 <strong>随机取一部分</strong> <a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>连接来训练更新参数。</p><h3 id="2-model-eval">2. model.eval()</h3><p>model.eval()的作用是 <strong>不启用 Batch Normalization 和 Dropout</strong>。</p><p>如果模型中有 BN 层（Batch Normalization）和 Dropout，在 <strong>测试时</strong> 添加 model.eval()。</p><p>model.eval() 是保证 BN 层能够用 <strong>全部训练数据</strong> 的均值和方差，即测试过程中要保证 BN 层的均值和方差不变。对于 Dropout，model.eval() 是利用到了 <strong>所有</strong> <a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>连接，即不进行随机舍弃神经元。</p><h3 id="为什么测试时要用-model-eval-？">为什么测试时要用 model.eval() ？</h3><p>训练完 train 样本后，生成的模型 model 要用来测试样本了。在 model(test) 之前，需要加上model.eval()，否则的话，有输入数据，即使不训练，它也会改变权值。这是 model 中含有 BN 层和 Dropout 所带来的的性质。</p><p>eval() 时，pytorch 会自动把 BN 和 DropOut 固定住，不会取平均，而是用训练好的值。<br>不然的话，一旦 test 的 batch_size 过小，很容易就会被 BN 层导致生成图片颜色失真极大。<br>eval() 在非训练的时候是需要加的，没有这句代码，一些<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>层的值会发生变动，不会固定，你神经<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>每一次生成的结果也是不固定的，生成质量可能好也可能不好。</p><p>也就是说，测试过程中使用model.eval()，这时神经<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>会 <strong>沿用 batch normalization 的值</strong>，而并 <strong>不使用 dropout</strong>。</p><h3 id="3-总结与对比">3. 总结与对比</h3><p>如果模型中有 BN 层(Batch Normalization）和 Dropout，需要在训练时添加 model.train()，在测试时添加 model.eval()。</p><p>其中 model.train() 是保证 BN 层用每一批数据的均值和方差，而 model.eval() 是保证 BN 用全部训练数据的均值和方差；而对于 Dropout，model.train() 是随机取一部分<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>连接来训练更新参数，而 model.eval() 是利用到了所有<a href="https://auth.huaweicloud.com/authui/saml/login?xAccountType=csdndev_IDP&amp;isFirstLogin=false&amp;service=https%3A%2F%2Factivity.huaweicloud.com%2Ffree_test%2Findex.html%3Futm_source%3Dhwc-csdn%26utm_medium%3Dshare-op%26utm_campaign%3D%26utm_content%3D%26utm_term%3D%26utm_adplace%3DAdPlace070851">网络</a>连接。</p><p><code>model.eval()</code><br>不启用 BatchNormalization 和 Dropout，保证BN和dropout不发生变化，<a href="https://so.csdn.net/so/search?q=pytorch&amp;spm=1001.2101.3001.7020">pytorch</a>框架会自动把BN和Dropout固定住，不会取平均，而是用训练好的值，不然的话，一旦test的batch_size过小，很容易就会被BN层影响结果。</p><h3 id="Batch-Normalization"><strong>Batch Normalization</strong></h3><p>其作用对网络中间的每层进行归一化处理，并且使用变换重构（Batch <a href="https://so.csdn.net/so/search?q=Normalization&amp;spm=1001.2101.3001.7020">Normalization</a> Transform）保证每层提取的特征分布不会被破坏。训练时是针对每个mini-batch的，但是测试是针对单张图片的，即不存在batch的概念。由于网络训练完成后参数是固定的，每个batch的均值和方差是不变的，因此直接结算所有batch的均值和方差。所有Batch Normalization的训练和测试时的操作不同。</p><h3 id="Dropout"><strong>Dropout</strong></h3><p>其作用克服Overfitting，在每个训练批次中，通过忽略一半的特征检测器，可以明显的减少过拟合现象。</p><h1 id="参考">参考</h1><ol><li><a href="https://blog.csdn.net/Dust_Evc/article/details/121785089">python pytorch中 <code>.view()</code>函数讲解_pytorch .view-CSDN博客</a></li><li><a href="https://blog.csdn.net/weixin_43819747/article/details/132175314?spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-4-132175314-blog-121785089.235%5Ev38%5Epc_relevant_anti_t3_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~YuanLiJiHua~Position-4-132175314-blog-121785089.235%5Ev38%5Epc_relevant_anti_t3_base&amp;utm_relevant_index=7">【PyTorch】PyTroch中<code>.view()</code>函数的详细使用方法_pytorch view_静深松里热开水的博客-CSDN博客</a></li><li><a href="https://blog.csdn.net/lsb2002/article/details/132905346?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-132905346-blog-132175314.235%5Ev38%5Epc_relevant_anti_t3_base&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=2">pytorch张量维度变换详解：view、squeeze、transpose_智慧医疗探索者的博客-CSDN博客</a></li><li><a href="https://huaweicloud.csdn.net/63802f06dacf622b8df862f0.html?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~activity-3-123774649-blog-116616664.235%5Ev38%5Epc_relevant_anti_t3_base&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~activity-3-123774649-blog-116616664.235%5Ev38%5Epc_relevant_anti_t3_base&amp;utm_relevant_index=6">【Pytorch】model.train() 和 model.eval() 原理与用法_python_想变厉害的大白菜-华为云开发者联盟 (csdn.net)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python,pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的一些 call、name、main</title>
      <link href="/posts/20230918160142-7025481f.html"/>
      <url>/posts/20230918160142-7025481f.html</url>
      
        <content type="html"><![CDATA[<ul><li>python</li></ul><h1 id="callable-和-call">callable  和__call__</h1><p>大多数教程都告诉你int()是python的内置函数，然而当你看到int的定义，发现它竟然是类</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class int(object):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><p>不只是int(),还有float()， bool()， str()，很多你以为是函数但实际上却是类，但是呢，当你使用它们时完全察觉不出它们有什么不同，本文不是要和你讨论类和函数，而是要讨论学习callable</p><h2 id="什么是callable">什么是callable</h2><p><strong>一个可callable的对象</strong>是指可以被调用执行的对象，并且可以传入参数，</p><p>用另一个简单的描述方式，只要可以在一个对象的后面使用小括号来执行代码，那么这个对象就是callable对象，</p><p>下面列举callable对象的种类</p><ol><li>函数</li><li>类</li><li>类里的函数</li><li>实现了__call__方法的实例对象</li></ol><h3 id="2-1-函数">2.1 函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def test():</span><br><span class="line">    print(&#x27;ok&#x27;)</span><br><span class="line"></span><br><span class="line">print(callable(test))   # True</span><br><span class="line">test()  # ok</span><br></pre></td></tr></table></figure><p>函数是python里的一等公民，函数是可调用对象，使用callable函数可以证明这一点</p><h3 id="2-2-类">2.2 类</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Stu(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(callable(Stu))     # True</span><br><span class="line">print(Stu(&#x27;小明&#x27;).name)   # 小明</span><br></pre></td></tr></table></figure><p>在其他编程语言里，类与函数可以说是两个完全不搭的东西，但在python里，都是可调用对象</p><h3 id="2-3-类里的方法">2.3 类里的方法</h3><p>类里的方法也是用def定义的，本质上也是函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from inspect import isfunction, ismethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Stu(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;&#123;name&#125; is running&#x27;.format(name=self.name))</span><br><span class="line"></span><br><span class="line">print(isfunction(Stu.run))     # True</span><br><span class="line">stu = Stu(&quot;小明&quot;)</span><br><span class="line">stu.run()        # 小明 is running</span><br></pre></td></tr></table></figure><p>使用isfunction函数可以判断一个对象是否是函数，run方法也是可调用对象</p><h3 id="2-4-实现了-call-方法的实例对象">2.4 实现了__call__方法的实例对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Stu(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    def __call__(self, *args, **kwargs):</span><br><span class="line">        self.run()</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&#x27;&#123;name&#125; is running&#x27;.format(name=self.name))</span><br><span class="line"></span><br><span class="line">stu = Stu(&#x27;小明&#x27;)</span><br><span class="line">print(callable(stu))    # True</span><br><span class="line">stu()                   # 小明 is running</span><br></pre></td></tr></table></figure><p>当你执行stu()时，与调用一个函数有着完全一致的体验，如果不告诉你stu是一个类的实例对象，你还以为stu就是一个函数。</p><h1 id="name-和-main"><strong>name</strong> 和 <strong>main</strong></h1><ul><li><em><strong>“__main__” 始终指当前执行模块的名称（<a href="http://xn--uiryxwc810s.py">包含后缀.py</a>）</strong></em></li><li><strong>模块被直接执行的时候，__name__ 等于字符串 “ __main__”<br><em>如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（<a href="http://xn--ihqy4jzwakdr79u.py">不包含后缀.py</a>）</em></strong></li><li>print(__file__)  :  文件绝对路径，c:\Users\13450\Desktop\test.py</li></ul><blockquote><ol><li>在Python中，凡是以两个下划线开头，两个下划线结尾的变量叫做“魔法变量”。瓦特？魔法变量？对，你没有听错，就是魔法变量。当然，如果你觉得这个词不好理解的话，你可以简单地认为所谓魔法变量就是Python对象内置天生就有的属性变量，你使用这些变量前不需要自己去定义，直接用就是。当然，既然是天生就有的，你也别去修改它，正常使用就好。</li><li>Python中每个py文件都叫一个模块。系统里面我们经常导入的模块，比如什么os啊，math啊，这些它们的本质都是一个个的py文件。当然，我们自己写的每个py文件也都是一个个的模块，咱们可以把它看成是一个自定义模块。模块既然就是Python文件，那么它就有两种运行方式：一种是直接运行，另外一种是导入别的模块中再运行。</li></ol></blockquote><h2 id="if-name-‘main’-的作用">if <strong>name</strong> == ‘<strong>main</strong>’:的作用</h2><p>一个python文件通常有两种使用方法，</p><p>第一是作为脚本直接执行，<br>第二是 import 到其他的 python 脚本中被调用（模块重用）执行。</p><p>因此 if <strong>name</strong> == ‘__main__’: 的作用就是控制这两种情况执行代码的过程，在 if <strong>name</strong> ==  ‘__main__’: 下的代码只有在第一种情况下（即文件作为脚本直接执行）才会被执行，而 import 到其他脚本中是不会被执行的。</p><h2 id="if-name-‘main’-的运行原理">if <strong>name</strong> == ‘<strong>main</strong>’:的运行原理</h2><p>每个python模块（python文件，也就是此处的 <a href="http://test.py">test.py</a> 和 import_test.py）都包含内置的变量__name__，当该模块被直接执行的时候，__name__ 等于文件名（包含后缀 .py ）；如果该模块 import 到其他模块中，则该模块的 __name__ 等于模块名称（<a href="http://xn--ihqy4jzwakdr79u.py">不包含后缀.py</a>）。</p><p>而 “__main__” 始终指当前执行模块的名称（<a href="http://xn--uiryxwc810s.py">包含后缀.py</a>）。进而当模块被直接执行时，__name__ == ‘main’ 结果为真。</p><p>当模块A被导入到模块B中时，一旦运行模块B，模块A中的语句会自动被执行一遍，以便加载模块A中的所有函数定义啊、类定义等语句到内存中等待被使用。</p><h1 id="‘-getitem-’">‘__getitem__()’</h1><p>在Python中，<code>__getitem__()</code> 是一个特殊方法（也称为魔术方法或双下方法），它允许一个对象模拟序列或映射类型的行为，使得对象可以通过类似索引的方式访问其元素。这个方法在对象被用作索引操作时被自动调用，例如 <code>obj[key]</code>。</p><p>当你定义一个类并想要让它支持索引操作时，你需要在类中实现 <code>__getitem__()</code> 方法。这个方法接受一个参数，即用作索引的键（对于序列类型通常是整数），并返回相应的值。</p><p>下面是一个简单的例子，演示了如何在自定义类中实现 <code>__getitem__()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySequence</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="comment"># 检查索引是否在有效范围内</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= <span class="built_in">len</span>(self.data):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Index out of range&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.data[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MySequence的实例</span></span><br><span class="line">my_seq = MySequence([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用索引访问元素</span></span><br><span class="line"><span class="built_in">print</span>(my_seq[<span class="number">0</span>])  <span class="comment"># 输出: 10</span></span><br><span class="line"><span class="built_in">print</span>(my_seq[<span class="number">2</span>])  <span class="comment"># 输出: 30</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>MySequence</code> 类有一个 <code>data</code> 属性，它存储了一个序列。<code>__getitem__()</code> 方法被定义为接受一个索引，并返回 <code>data</code> 列表中相应索引位置的元素。如果索引超出了范围，它会引发一个 <code>IndexError</code>。</p><p><code>__getitem__()</code> 方法还可以接受一个切片对象作为参数，这样你就可以返回一个切片视图或副本，而不是单个元素。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MySequence</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data</span>):</span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(key, <span class="built_in">slice</span>):</span><br><span class="line">            <span class="comment"># 返回一个切片视图</span></span><br><span class="line">            <span class="keyword">return</span> self.data[key]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 返回单个元素</span></span><br><span class="line">            <span class="keyword">return</span> self.data[key]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MySequence的实例</span></span><br><span class="line">my_seq = MySequence([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用切片访问元素</span></span><br><span class="line"><span class="built_in">print</span>(my_seq[<span class="number">1</span>:<span class="number">3</span>])  <span class="comment"># 输出: [20, 30]</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>__getitem__()</code> 方法检查传入的参数是否是一个切片对象。如果是，它返回序列的一个切片视图；如果不是，它返回单个元素。</p><p>通过实现 <code>__getitem__()</code> 方法，你可以让你的类支持索引和切片操作，从而提高类的灵活性和表达能力。</p><h1 id="参考">参考</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/191419441">python 中的callable概念 - 知乎 (zhihu.com)</a></li><li><a href="https://blog.csdn.net/heqiang525/article/details/89879056">Python中if <strong>name</strong> == ‘<strong>main</strong>‘：的作用和原理_python if-CSDN博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/360804564">Python中if <strong>name</strong> == '<strong>main</strong>’的作用是什么 - 知乎 (zhihu.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析-1-量化分析</title>
      <link href="/posts/20230918104022-cfb1779d.html"/>
      <url>/posts/20230918104022-cfb1779d.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要量化分析；">为什么要量化分析；</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231108-104450.png" alt="image-20231108104449383"></p><ul><li><p>为什么要量化分析：量化才能分析<br>摩尔定律，HPC TOP500</p></li><li><p>软件属性重要性排序：很多属性比性能更重要<br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/11/20231108-104644.png" alt="image-20231108104644008"></p><ul><li><h2 id="性能是计算的货币。你通常可以通过性能“购买所需的属性">性能是计算的货币。你通常可以通过性能“购买所需的属性</h2></li></ul></li></ul><ol><li><p>早期程序设计，受限于机器资源</p><ul><li><p>程序必须依照机器来规划</p></li><li><p>如果没有认真的进行性能工程，许多程序将无法“适应”</p></li></ul></li><li><p>摩尔定律继续提高计算 机的性能<br>但是现在性能看起来像 具有复杂的缓存结构、 宽向量单元、GPU、 FPGA等的巨大的多核 处理器<br>通常，必须调整软件以 有效地利用硬件!</p></li></ol><h2 id="案例：矩阵乘法">案例：矩阵乘法</h2><blockquote><ol><li>不同编程语言：python，Java，C：解释型和编译型</li><li>循环，i,j,k的顺序：  空间局部性，cache命中</li><li>编译器优化：</li><li>多核并行性：并行循环：cilk_for</li><li>数据重用：数据分块： 矩阵分块（Tiling) : 增加cache hit</li><li>多级缓存分块</li><li>递归进行矩阵乘法：并行分块</li><li>向量硬件：向量化编译技术</li><li>人工AVX Intrinsics优化</li><li>Intel  MKL:  专业数学库</li></ol></blockquote><h1 id="宾利优化规则">宾利优化规则</h1><ul><li>工作：<br>程序在一个给定的输入上的工作，是该程序执 行的所有操作的总和</li><li>优化工作<br>算法设计可以使解决一个问题所需的工作量大幅减少。例如使用 Θ(n log n) 时间复杂度的排序取代一个 Θ(n²) 时间的排序</li></ul><p>大部分宾利规则的原始内容都是关于工作的，但也有 一些是关于四十年前变幻莫测的计算机架构的。 • 我们创建了一套新的宾利规则，只处理工作问题。</p><ul><li><p>数据结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">打包和编码</span><br><span class="line">增强</span><br><span class="line">预计算</span><br><span class="line">编译时初始化</span><br><span class="line">缓存</span><br><span class="line">惰性计算稀疏性</span><br></pre></td></tr></table></figure></li><li><p>循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">变量提升</span><br><span class="line">哨兵</span><br><span class="line">展开</span><br><span class="line">合并</span><br><span class="line">消除无效迭代</span><br></pre></td></tr></table></figure></li><li><p>逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常数折叠和传播共元表达式的消除</span><br><span class="line">代数恒等式</span><br><span class="line">循环短路有序测试</span><br><span class="line">创建一个快速路径</span><br><span class="line">合并测试</span><br></pre></td></tr></table></figure></li><li><p>函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内联优化</span><br><span class="line">尾递归优化</span><br><span class="line">粗粒度递归</span><br></pre></td></tr></table></figure></li></ul><h2 id="数据结构">数据结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">打包和编码</span><br><span class="line">增强</span><br><span class="line">预计算</span><br><span class="line">编译时初始化</span><br><span class="line">缓存</span><br><span class="line">惰性计算稀疏性</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>打包的思路是在一个机器字中存储一个以上的数据值。</li><li>编码的思路是将数据值转换为所需位更少的表示形式。</li><li>数据结构增强的思路是将更多信息添加到数据结构 中，以减少常见操作的工作量。</li><li>预计算的思路是提前执行计算，以避免在“关键任 务”期间进行计算。</li><li>编译时初始化的思路是在编译期间就存储常量的值， 节省执行时的工作<br>思路：通过元编程创建大型静态表。</li><li>缓存的思路是存储最近访问过的结果，以节省程序 再次计算它们的时间。</li><li>利用稀疏性的思路是避免存储和计算无用值（一般是0） “最快的计算方法是根本不计算。”</li><li></li></ol><h2 id="循环">循环</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">变量提升</span><br><span class="line">哨兵</span><br><span class="line">展开</span><br><span class="line">合并</span><br><span class="line">消除无效迭代</span><br></pre></td></tr></table></figure><ol><li>提升（也称为循环不变代码运动）的目标是避免每次 在循环内重新计算循环不变代码</li><li>哨兵是放置在数据结构中的特殊虚拟值，用于简化边 界条件的逻辑，特别是循环退出测试的处理</li><li>循环展开尝试通过将循环的几个连续迭代组合成单个迭代来节省工作，从而减少循环的总迭代次数，从而减少控制循环的指令必须执行的次数。<br>完全循环展开 : 展开所有迭代部分循环展开 : 展开多个但不是全部的迭代。<br>循环展开的好处<br>循环控制代码中的指令数量较少<br>启用更多编译器优化<br>展开过多会导致指令缓存使用不当</li><li>循环合并（也称为干扰）的思路是将同一索引范围内 的多个循环组合在一起，从而节省循环控制的开销。</li><li>消除无效迭代的思路是修改循环边界以避免在本质上 为空的循环体上执行循环迭代。</li><li></li></ol><h2 id="逻辑">逻辑</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常数折叠和传播共元表达式的消除</span><br><span class="line">代数恒等式</span><br><span class="line">循环短路有序测试</span><br><span class="line">创建一个快速路径</span><br><span class="line">合并测试</span><br></pre></td></tr></table></figure><ol><li>常量折叠和传播的思路是在编译期间求值常量表达式 并将结果替换为进一步的表达式</li><li>共元表达式消除的思路是通过计算一次表达式，并存 储结果以供以后使用，来避免多次计算相同的表达式。</li><li>利用代数恒等式的思路是用工作代价更小的代数等价 表达式替换昂贵的表达式</li><li>在执行一系列测试时，短路的思路是在得到结果后立 即停止求值</li><li>对于执行一系列逻辑测试的代码，有序测试的思路是 在很少成功的测试之前执行那些更经常“成功”的测 试——测试选择了一个特定的替代方案。 同样，廉价 的测试应该先于昂贵的测试。</li><li>创建快速路径的思路是，通过添加条件更宽松但成本 更小的测试尽快结束判断，来节省该判断消耗的总资 源。</li><li>组合测试的思路是用一个测试或switch替换一系列测试。</li><li></li></ol><h2 id="函数">函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">内联优化</span><br><span class="line">尾递归优化</span><br><span class="line">粗粒度递归</span><br></pre></td></tr></table></figure><ol><li>内联的思路是通过用函数本身的主体替换对函数的调 用来节省函数调用的开销</li><li>尾递归消除的想法是将作为函数的最后一步发生的递 归调用替换为分支跳转，从而节省函数调用开销。</li><li>粗化递归的思路是扩大基本情况的范围并使用更有效 的代码来处理它，从而避免函数调用开销。</li></ol><h2 id="总结">总结</h2><p>避免过早优化。首先得到正确的工作代码。然后优化，通过回归测试保持正确性。<br>减少程序的工作量并不一定会减少其运行时间，但它是一种很好的启发式方法。<br>编译器会自动执行许多低级优化。<br>要判断编译器是否确实在执行特定优化，请查看汇编代码。</p><h1 id="作业">作业</h1><h2 id="矩阵乘法">矩阵乘法</h2><table><thead><tr><th></th><th>时间（s）</th><th>相对于python提升</th><th></th></tr></thead><tbody><tr><td>python</td><td>22393.544347286224</td><td>1</td><td></td></tr><tr><td>java</td><td>689.336</td><td></td><td></td></tr><tr><td>c</td><td>716.050691</td><td></td><td></td></tr><tr><td>jik</td><td>611.963059</td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宾利优化规则 </tag>
            
            <tag> 性能量化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统性能量化分析</title>
      <link href="/posts/20230918102020-8806c933.html"/>
      <url>/posts/20230918102020-8806c933.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>计算所秋季学期所内课程</p></li><li><p>ICT-系统性能量化分析</p><p>本系列内容为笔者学习该课程的记录</p><p>内容来自课堂PPT，PPT参考课程、教材、论文等等</p></li></ul><h1 id="系统性能量化分析">系统性能量化分析</h1><p>**课程编号：**80132081236001 **学 时：**20 **学 分：**1.0 **课程属性：**专业研讨课 <strong>主讲教师：</strong><br><strong>教学目的、要求</strong><br>要求同学认真参加课堂听讲，课后安排一定的时间复习，并自学阅读老师布置的相关资料，认真准备和参加交流讨论会。<br><strong>预修课程</strong><br>无<br><strong>教 材</strong></p><p>MIT 6.172<br>《Computer Systems: A Programmer’s Perspective》</p><p>《computer architecture》</p><blockquote><ul><li>40% 课堂分享：结合自身科研工作和课堂内容，分享性能优化思路</li><li>60课程大作业：实验报告+答辩</li></ul></blockquote><h2 id="主要内容">主要内容</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">### 课堂讲授：12学时</span><br><span class="line"></span><br><span class="line">1. 计算机系统概述（2学时） </span><br><span class="line">   1.1（1学时，讲授，讲课老师：王卅）硬件基础知识 </span><br><span class="line">   1.2（1学时，讲授，讲课老师：王卅）软件基础知识 </span><br><span class="line"></span><br><span class="line">2. 性能量化分析概述（2学时） </span><br><span class="line">   2.1（1学时，讲授，讲课老师：王磊）Benchmark 2</span><br><span class="line">   .2（1学时，讲授，讲课老师：王磊）性能分析方法 </span><br><span class="line"></span><br><span class="line">3. 性能模型概述（2学时） </span><br><span class="line">   3.1（1学时，讲授，讲课老师：王卅）上界模型（阿穆达定理、屋顶模型） </span><br><span class="line">   3.2（1学时，讲授，讲课老师：王卅）吞吐模型（排队论、利特尔法则） </span><br><span class="line"></span><br><span class="line">4. 性能模型实践（2学时） </span><br><span class="line">   4.1（1学时，讲授，讲课老师：王磊）屋顶模型的应用 </span><br><span class="line">   4.2（1学时，讲授，讲课老师：王磊）利特尔法则的应用 </span><br><span class="line"></span><br><span class="line">5. 性能调优实践1： C语言应用优化（2学时） </span><br><span class="line">   5.1（1学时，讲授，讲课老师：王卅）C语言分析工具 </span><br><span class="line">   5.2（1学时，讲授，讲课老师：王卅）C语言语言优化实例 </span><br><span class="line"></span><br><span class="line">6. 性能调优实践2： Java应用调优（2学时） </span><br><span class="line">   6.1（1学时，讲授，讲课老师：王磊）Java分析工具 </span><br><span class="line">   6.2（1学时，讲授，讲课老师：王磊）Java语言优化实例 </span><br><span class="line"></span><br><span class="line">### 学生课题研讨 8学时</span><br><span class="line"></span><br><span class="line">1. 课题选择（2学时），指导老师：王卅、王磊 </span><br><span class="line">2. 中期进度报告（2学时），指导老师：王磊 </span><br><span class="line">3. 课题总结（4学时），指导老师：王卅</span><br></pre></td></tr></table></figure><h2 id="教师简介">教师简介</h2><p>任课教师一： 姓 名 王卅 性 别 男 出生日期 1986.12.10 工作单位 先进计算机系统研究中心 岗位/职称 副研究员 何时何地获得何种学位 2016年1月获得工学博士学位 学科、专业 计算机系统结构 E-mail <a href="mailto:wangsa@ict.ac.cn">wangsa@ict.ac.cn</a> 通讯地址 北京市海淀区科学院南路6号<br>主持/承担NSFC面上基金/青年基金各1项，先导A子课题1项、腾讯、美团、华为等横向合作项目多项。获得2020计算所优秀研究人员，2020中科院青年创新促进会会员等。具有代表性的工作包括： 1）负责所级规划信息高铁测调管控系统的研发，以标签制导的思路设计信息高铁云网边端全链路延迟确保以及全局测调机制，可初步实现QoS保障的自动驾驶小车动态避障，相关工作发表在IPDPS’21，机器人领域期刊RA-L（JCR1区）等；参与信息高铁系统软件整体设计及信息基础设施相关调研，合作发表中科院院刊Position Paper一篇。 2）长期与业界知名云计算公司阿里、腾讯、美团等开展数据中心标签化资源管控系统方面的研究合作，针对数据中心资源利用率低，内存资源“占而不用”等问题，提出基于应用历史画像的数据中心资源超售策略HAP，基于多层感知网的应用资源动态调节模型Magi，深度神经网络性能预测模型SEER等，应用资源预测模型于美团小规模落地，获得腾讯、美团公司的持续滚动资助，相关工作发表在JCST‘20，PACT‘21等期刊会议。</p><p>教师二： 计算所任课教师情况表 姓 名 王磊 性 别 男 出生日期 1976.9 工作单位 中科院计算所 岗位/职称 高级工程师 职务 无 何时何地获得何种学位 2016.7，中科院大学，博士 学科、专业 计算机软件与理论 E-mail <a href="mailto:Wanglei_2011@ict.ac.cn">Wanglei_2011@ict.ac.cn</a> 通讯地址 北京市海淀区科学院南路六号，中科院计算所<br>科研课题： 1. 服务器能效基准技术合作，企业委托-大中型企业委托，2020.08-2021.08，课题负责人 2. 软件定义的云计算基础理论与方法，国家任务-国家重点研发计划，2016.01-2021.12，子课题负责人<br>论文： （1）?WPC: Whole-Picture Workload Characterization Across Intermediate Representation, ISA, and Microarchitecture,?IEEE COMPUTER ARCHITECTURE LETTERs,?2021,?第?1?作者 （2）?Understanding Big Data Analytics Workloads on Modern Processors.,?IEEE Transactions on Parallel and Distributed Systems,?2017,?第?3?作者 （3）?Understanding Processors Design Decisions for Data Analytics in Homogeneous Data Centers,?IEEE Transactions on Big Data,?2017,?第?6?作者 （4）?Towards memory and computation efficient graph processing on spark,?BigData 2017,?2017,?第?4?作者 （5）?Characterization and Architectural Implications of Big Data Workloads,?ISPASS Poster,?2016,?第?1?作者 （6）?BDTune: Hierarchical Correlation-based Performance Analysis and Rule-based Diagnosis for Big Data Systems,?IEEE Big Data,?2016,?第?3?作者 （7）?BigDataBench: a Big Data Benchmark Suite from Internet Services,?HPCA-2014,?2014,?第?1?作者 （8）?Characterizing data analysis workloads in data centers,?IISWC2013,?2013,?第?2?作者</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 系统 </category>
          
          <category> 系统性能量化分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能量化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn迁移到git-保留commit-history-转载总结</title>
      <link href="/posts/20230905110807-230865b.html"/>
      <url>/posts/20230905110807-230865b.html</url>
      
        <content type="html"><![CDATA[<ul><li>svn迁移到git-保留commit-history-转载总结</li></ul><h1 id="git-svn方法迁移步骤">git svn方法迁移步骤</h1><h2 id="1-首先安装-svn与git">1. 首先安装 svn与git</h2><h2 id="2-获取用户">2. 获取用户</h2><p>到svn项目目录右键选中gitbash打开窗口，执行获取用户并映射成git样式账号命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">svn log -q | awk -F &#x27;|&#x27; &#x27;/^r/ &#123;sub(&quot;^ &quot;, &quot;&quot;, $2); sub(&quot; $&quot;, &quot;&quot;, $2); print $2&quot; = &quot;$2&quot; &lt;&quot;$2&quot;@qq.com&gt;&quot;&#125;&#x27; | sort -u &gt; userinfo.txt</span><br></pre></td></tr></table></figure><p>然后会在目录生成文件userinfo.txt样式如：zhansan = 张三 <a href="mailto:zhansan@qq.com">zhansan@qq.com</a></p><h2 id="3-拉取SVN代码">3. 拉取SVN代码</h2><p>新建个文件夹，将生成的userinfo.txt放入新建的文件夹，然后在新建的文件夹中右键选中gitbash弹出窗口后执行下面命令，拉取svn代码到本地新建文件夹中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn clone https://svn_project_url/ --no-metadata --no-minimize-url --authors-file=userinfo.txt --no-minimize-url </span><br></pre></td></tr></table></figure><p>若是第一次拉取svn中一般会出现这个窗口提示，这个提示就填：p</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230905-111757.png" alt="7cf2e3c93edb4c9c964390f966819723"></p><p>填完p后，后面还会弹出窗口做相关验证，分别是</p><blockquote><p>操作系统的密码（若你电脑或者服务器设置了密码），</p><p>svn的账号，</p><p>svn的密码</p></blockquote><p>都填完了，就会开始拉去svn代码了</p><p>等一段时间，拉取完成后，当前目录生成一个项目文件夹，进入拉取代码完成后的项目文件夹中会看代码与生成的.git文件夹</p><p>3.右键选中gitbash在窗口中用git命令查看提交记录 （按q退出 ）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>4.关联需要迁移的git库上项目地址（建议创建新的创库，避免合并出错），会弹窗验证，输入git账号密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://gitlab.yiwugo.com:10080/ywg-data-group/iprobe.git</span><br></pre></td></tr></table></figure><p>5.查看关联地址是否正确</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>6.将远程仓库代码拉取到本地（注意当前分支）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>7.如果拉取时报错 ,说明远程仓库有操作记录，可以使用强制合并提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><p>8.合并到远程master分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p>9.若svn项目还有其他分支重复上面步骤合并到对应的git分支上即可。</p><h2 id="迁移异常">迁移异常</h2><h3 id="1-拉取svn代码异常">1.拉取svn代码异常</h3><p>由于项目较大，或者同时执行多个克隆命令 导致空间不足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">libsvn: Out of memory - terminating application.</span><br><span class="line">      0 [main] perl 1976 cygwin_exception::open_stackdumpfile: Dumping stack trace to perl.exe.stackdump</span><br></pre></td></tr></table></figure><ul><li><p>打开新命令窗口 并执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git svn fetch</span><br></pre></td></tr></table></figure><p>会继续下载项目</p></li></ul><h1 id="别的方法">别的方法</h1><ul><li>svn2git</li></ul><h1 id="参考">参考</h1><ol><li><a href="https://blog.csdn.net/wuningw/article/details/126177661?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126177661-blog-129231978.235%5Ev38%5Epc_relevant_anti_t3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126177661-blog-129231978.235%5Ev38%5Epc_relevant_anti_t3&amp;utm_relevant_index=2">svn迁移到git实际操作（亲测有效）_wuningw的博客-CSDN博客</a></li><li><a href="https://cloud.tencent.com/developer/article/2149929">SVN 切换到 Git-腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://blog.csdn.net/qq_39201012/article/details/124564465">svn 代码迁移到git_svn代码迁移到git_搬砖的祥子的博客-CSDN博客</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 项目管理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web架构各层理解</title>
      <link href="/posts/20230815185446-316d88b8.html"/>
      <url>/posts/20230815185446-316d88b8.html</url>
      
        <content type="html"><![CDATA[<p>客户端从发送一个 HTTP 请求到 Flask 处理请求，分别经过了 web服务器层，WSGI层，web框架层，这三个层次。不同的层次其作用也不同</p><h1 id="Web服务器层">Web服务器层</h1><p>对于传统的客户端 - 服务器架构，其请求的处理过程是，客户端向服务器发送请求，服务器接收请求并处理请求，然后给客户端返回响应。在这个过程中，服务器的作用是：</p><ol><li>接收请求</li><li>处理请求</li><li>返回响应</li></ol><p>Web服务器是一类特殊的服务器，其作用是主要是接收 HTTP 请求并返回响应。提起 web服务器大家都不会陌生，常见的 web服务器有 Nginx，Apache，IIS等。在上图1的三层结构中，web服务器是最先接收用户请求的，并将响应结果返回给用户。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230815-185917.awebp" alt="web服务器，web框架与WSGI的三层关系"></p><h1 id="Web应用框架层">Web应用框架层</h1><p>Web框架的作用主要是方便我们开发 web应用程序，HTTP请求的动态数据就是由 web框架层来提供的。常见的 web框架有Flask，Django等，我们以 Flask 框架为例子，展示 web框架的作用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/hello&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():    </span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">  app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>以上简单的几行代码，就创建了一个 web应用程序对象 <code>app</code>。<code>app</code> 监听机器所有 ip 的 8080 端口，接受用户的请求连接。我们知道，HTTP 协议使用 URL 来定位资源，上面的程序会将路径 <code>/hello</code> 的请求交由 <code>hello_world</code> 方法处理，<code>hello_world</code> 返回 ‘Hello World!’ 字符串。对于 web框架的使用者来说，他们并不关心如何接收            HTTP 请求，也不关心如何将请求路由到具体方法处理并将响应结果返回给用户。Web框架的使用者在大部分情况下，只需要关心如何实现业务的逻辑即可</p><h1 id="WSGI层">WSGI层</h1><p>Web Server Gateway Interface 的缩写，即 Web 服务器网关接口</p><p>WSGI 不是服务器，也不是用于与程序交互的API，更不是真实的代码，WSGI 只是一种接口,它只适用于 Python 语言，其全称为 Web Server Gateway Interface，定义了 web服务器和 web应用之间的接口规范。也就是说，只要 web服务器和 web应用都遵守WSGI协议，那么 web服务器和 web应用就可以随意的组合。下面的代码展示了 web服务器是如何与 web应用组合在一起的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">env, start_response</span>):    </span><br><span class="line">  start_response(<span class="string">&#x27;200 OK&#x27;</span>, [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html&#x27;</span>)])   </span><br><span class="line">  <span class="keyword">return</span> [<span class="string">b&quot;Hello World&quot;</span>]</span><br></pre></td></tr></table></figure><p>方法 <code>application</code>由 web服务器调用，参数<code>env</code>，<code>start_response</code> 由 web服务器实现并传入。其中，<code>env</code>是一个字典，包含了类似 HTTP_HOST，HOST_USER_AGENT，SERVER_PROTOCO 等环境变量。<code>start_response</code>则是一个方法，该方法接受两个参数，分别是<code>status</code>，<code>response_headers</code>。<code>application</code>方法的主要作用是，设置            http 响应的状态码和 Content-Type 等头部信息，并返回响应的具体结果。</p><p>上述代码就是一个完整的 WSGI 应用，当一个支持 WSGI 的 web服务器接收到客户端的请求后，便会调用这个 <code>application</code> 方法。WSGI 层并不需要关心<code>env</code>，<code>start_response</code> 这两个变量是如何实现的，就像在 <code>application</code> 里面所做的，直接使用这两个变量即可。</p><p>值得指出的是，WSGI 是一种协议，需要区分几个相近的名词：</p><ul><li>uwsgi<br>同 wsgi 一样也是一种协议，uWSGI服务器正是使用了 uwsgi 协议</li><li>uWSGI<br>实现了 uwsgi 和 WSGI 两种协议的web服务器。注意 uWSGI 本质上也是一种 web服务器，处于上面描述的三层结构中的 web服务器层。</li><li>CGI<br>通用网关接口，并不限于 Python 语言，定义了 web服务器是如何向客户端提供动态的内容。例如，规定了客户端如何将参数传递给 web服务器，web服务器如何将参数传递给 web应用，web应用如何将它的输出如何发送给客户端，等等。<br>生产环境下的 web应用都不使用 CGI 了，CGI进程（类似 Python 解释器）针对每个请求创建，用完就抛弃，效率低下。WSGI 正是为了替代 CGI 而出现的。</li></ul><p>说到这，我们基本理清了 WSGI 在 web服务器与 web框架之间作用：WSGI 就像一条纽带，将 web服务器与 web框架连接起来。回到本文的题目，Nginx 属于一种 web服务器，Flask属于一种 web框架，因此，WSGI 与 Nginx、Flask 的作用就不明而喻了。</p><p>最后以 Nginx，WSGI，Flask 之间的对话结束本文。<br><strong>Nginx</strong>：Hey，WSGI，我刚收到了一个请求，我需要你作些准备，然后由Flask来处理这个请求。<br><strong>WSGI</strong>：OK，Nginx。我会设置好环境变量，然后将这个请求传递给Flask处理。<br><strong>Flask</strong>：Thanks WSGI！给我一些时间，我将会把请求的响应返回给你。<br><strong>WSGI</strong>：Alright，那我等你。<br><strong>Flask</strong>：Okay，我完成了，这里是请求的响应结果，请求把结果传递给Nginx。<br><strong>WSGI</strong>：Good            job！Nginx，这里是响应结果，已经按照要求给你传递回来了。<br><strong>Nginx</strong>：Cool，我收到了，我把响应结果返回给客户端。大家合作愉快~</p><h1 id="为什么使用WSGI">为什么使用WSGI</h1><p>我们现在使用 Python 编写 Web 应用，</p><ul><li><p>可以用比较流行的 Flask、Django 框架，也可以按自己的想法直接写一个。</p></li><li><p>可选的服务器软件也特别多，比如常见的有 Apache、Nginx、IIS 等，</p></li><li><p>除此外，也有很多小众的软件。</p></li></ul><p>但是，现在问题来了，我该怎么部署？在没有 WSGI 规范之前，一个服务器调度 Python 应用是用这种方式，另一款服务器使用的是那种方式，这样的话，编写出来的应用部署时只能选择局限的某个或某些服务器，达不到通用的效果。</p><h1 id="只有python是WSGI">只有python是WSGI</h1><p>WSGI（Web Server Gateway Interface）是Python的一种Web应用程序标准接口，它定义了Web服务器和用户程序之间的一种通信规范。</p><p>WSGI的出现是为了解决Python Web框架的兼容性问题，同时也使Python Web应用程序与多种Web服务器进行了兼容。</p><p>其他技术栈的Web框架与WSGI之间的关系可能会有所不同。</p><ul><li>比如JavaEE使用的是Servlet规范，而不是WSGI。</li><li>对于PHP，Apache一般采用mod_php方式运行，PHP和Apache之间的通信过程也与WSGI不同。</li><li>Node.js使用的是HTTP模块。 关于JavaEE容器和CGI/FastCGI，它们与WSGI有类似之处，都可以作为与Web服务器通信的中间件。</li><li>JavaEE容器会处理Servlet或JSP程序，而CGI/FastCGI会处理PHP、Perl等脚本语言。</li><li>不过，它们的使用场景不同，JavaEE容器和CGI/FastCGI大多用于处理动态生成的Web页面，而WSGI则更适用于处理Python Web应用的请求。</li></ul><p>总的来说，WSGI并不是Tomcat等JavaEE容器、CGI/FastCGI的替代实现，它只是一种Python Web应用程序标准接口。它的出现是为了使Python Web框架之间能够进行互操作，并且与多种Web服务器兼容。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230815-204155.jpg" alt="img"></p><h2 id="自定义实现web应用">自定义实现web应用</h2><p>上面的服务器和应用整体是跑起来了，那么我换一个服务器或者应用呢。由于服务器与应用之间怎么交互完全没有规范，比如服务器应该如何把请求信息传给应用，应用处理完毕后又怎么告诉服务器开始返回响应，如果都是各搞各的，服务器需要定制应用，应用也要定制服务器，这要一个应用能跑起来也太麻烦了点吧。</p><p>所以，WSGI 的出现就是为了解决上面的问题，它规定了服务器怎么把请求信息告诉给应用，应用怎么把执行情况回传给服务器，这样的话，服务器与应用都按一个标准办事，只要实现了这个标准，服务器与应用随意搭配就可以，灵活度大大提高。</p><h1 id="参考">参考</h1><ul><li>转载<ol><li><a href="https://leehao.me/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3Nginx-WSGI-Flask%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/">如何理解Nginx, WSGI, Flask之间的关系 | Leo的博客 (leehao.me)</a></li><li>为什么只有Python有WSGI？ - 谈天吉皮提的回答 - 知乎 <a href="https://www.zhihu.com/question/598727285/answer/3009633117">https://www.zhihu.com/question/598727285/answer/3009633117</a></li><li><a href="https://zhuanlan.zhihu.com/p/44867546">说说我对 WSGI 的理解 - 知乎 (zhihu.com)</a></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 架构 </category>
          
          <category> Web架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web架构 </tag>
            
            <tag> WSGI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RPC框架</title>
      <link href="/posts/20230815155027-bfaf5b1d.html"/>
      <url>/posts/20230815155027-bfaf5b1d.html</url>
      
        <content type="html"><![CDATA[<h1 id="远程过程调用RPC">远程过程调用RPC</h1><p>RPC是一种<a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1">进程间通信（IPC，Inter-Process Communication）</a>的一种技术，程序分布在不同的<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4">地址空间</a>里。如果在同一主机里，RPC可以通过不同的虚拟地址空间（即便使用相同的物理地址）进行通讯，而在不同的主机间，则通过不同的物理地址进行交互。许多技术（通常是不兼容）都是基于这种概念而实现的。</p><ul><li><p>在采用C等古老语言编程的时候，RPC被称作了对S端的“子程序”的调用，所以称“过程调用”。在<a href="https://zh.wikipedia.org/wiki/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">面向对象编程</a>出现后，RPC也可以称为远程方法调用（RemoteMethodInvocation），或者远程调用（RemoteInvocation）例：<a href="https://zh.wikipedia.org/wiki/Java_RMI">Java RMI</a>。</p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97">分布式计算</a>中，<strong>远程过程调用</strong>（英语：<strong>R</strong>emote <strong>P</strong>rocedure <strong>C</strong>all，<strong>RPC</strong>）是一个计算机通信<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%B5%A1%E5%82%B3%E8%BC%B8%E5%8D%94%E8%AD%B0">协议</a>。该协议允许运行于一台计算机的<a href="https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F">程序</a>调用另一个<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4">地址空间</a>（通常为一个开放网络的一台计算机）的<a href="https://zh.wikipedia.org/wiki/%E5%AD%90%E7%A8%8B%E5%BA%8F">子程序</a>，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。</p></li><li><p>RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过<strong>发送请求-接受回应</strong>进行信息交互的系统。</p></li><li><p>RPC过程可以是同步的，也可以是异步的。<br>同步方式：C端向S端发送请求，阻塞等待；S端执行一段子程序，发送响应；C端继续执行；<br>异步方式，比如XHTTP调用。</p></li></ul><h2 id="信息传递">信息传递</h2><p>远程过程调用是一个<a href="https://zh.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97">分布式计算</a>的<a href="https://zh.wikipedia.org/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AF-%E6%9C%8D%E5%8A%A1%E5%99%A8">客户端-服务器</a>（Client/Server）的例子，它简单而又广受欢迎。</p><p>远程过程调用总是由<a href="https://zh.wikipedia.org/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AF">客户端</a>对<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>发出一个执行若干过程请求，并用客户端提供的参数。执行结果将返回给客户端。由于存在各式各样的变体和细节差异，对应地派生了各式远程过程调用协议，而且它们并不互相兼容。</p><h2 id="流程">流程</h2><ol><li>客户端调用客户端stub（client stub）。这个调用是在本地，并将调用参数push到<a href="https://zh.wikipedia.org/wiki/%E6%A0%88">栈</a>（stack）中。</li><li>客户端stub（client stub）将这些参数包装，并通过系统调用发送到服务端机器。打包的过程叫 <a href="https://zh.wikipedia.org/wiki/Marshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">marshalling</a>。（常见方式：<a href="https://zh.wikipedia.org/wiki/XML">XML</a>、<a href="https://zh.wikipedia.org/wiki/JSON">JSON</a>、二进制编码）</li><li>客户端本地操作系统发送信息至服务器。（可通过自定义<a href="https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE">TCP协议</a>或<a href="https://zh.wikipedia.org/wiki/HTTP">HTTP</a>传输）</li><li>服务器系统将信息传送至服务端stub（server stub）。</li><li>服务端stub（server stub）解析信息。该过程叫 <a href="https://zh.wikipedia.org/wiki/Unmarshalling_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">unmarshalling</a>。</li><li>服务端stub（server stub）调用程序，并通过类似的方式返回给客户端。</li></ol><h2 id="Stub">Stub</h2><p>Stub是一段代码，用来转换RPC过程中传递的参数。处理内容包括不同OS之间的大小端问题。另外，Client端一般叫Stub，Server端一般叫Skeleton。</p><p>生产方式：1）手动生成，比较麻烦；2）自动生成，使用IDL（InterfaceDescriptionLanguate），定义C/S的接口。</p><p>交互机制标准：一般采用IDL，生成IDL的工具 RPCGEN（）</p><p>为了允许不同的<a href="https://zh.wikipedia.org/wiki/%E5%AE%A2%E6%88%B7%E7%AB%AF">客户端</a>均能访问<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>，许多标准化的 RPC 系统应运而生了。其中大部分采用<a href="https://zh.wikipedia.org/wiki/%E6%8E%A5%E5%8F%A3%E6%8F%8F%E8%BF%B0%E8%AF%AD%E8%A8%80">接口描述语言</a>（Interface Description Language，IDL），方便<a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E5%B9%B3%E5%8F%B0">跨平台</a>的远程过程调用。</p><h1 id="RPC框架">RPC框架</h1><ul><li>Thrift</li><li></li></ul><h1 id="参考">参考</h1><ul><li>转载</li></ul><ol><li><a href="https://zh.wikipedia.org/wiki/%E9%81%A0%E7%A8%8B%E9%81%8E%E7%A8%8B%E8%AA%BF%E7%94%A8">远程过程调用 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://blog.csdn.net/soulofball/article/details/110087898">什么是RPC？RPC与Stub简述_rpc stub_wwj-jww的博客-CSDN博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 架构 </category>
          
          <category> RPC框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web框架</title>
      <link href="/posts/20230815150034-51df7163.html"/>
      <url>/posts/20230815150034-51df7163.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Web应用程序">什么是Web应用程序</h1><h2 id="Web的定义">Web的定义</h2><p>Web是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。<br>  是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超链接将Internet上的信息节点组织成一个互为关联的网状结构，是运行在互联网上的一种分布式系统。</p><h2 id="Web的应用">Web的应用</h2><p><strong>网络应用程序</strong>（英语：web application，英文简称 <strong>Webapp</strong>）分为<a href="https://zh.wikipedia.org/wiki/%E4%B8%BB%E5%BE%9E%E5%BC%8F%E6%9E%B6%E6%A7%8B">客户端到服务器架构</a>或<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F">无服务器后端架构</a>。其中的客户端就是<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E6%B5%8F%E8%A7%88%E5%99%A8%E6%AF%94%E8%BE%83">网页浏览器</a>。常见的网页应用程序有<a href="https://zh.wikipedia.org/wiki/Webmail">Webmail</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E8%B4%AD%E7%89%A9">网络购物</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E6%8B%8D%E8%B3%A3">网络拍卖</a>、<a href="https://zh.wikipedia.org/wiki/Wiki">wiki</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E8%AB%96%E5%A3%87">网络论坛</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%AA%8C">博客</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E8%B7%AF%E9%81%8A%E6%88%B2">网络游戏</a>等诸多应用。</p><p>网络应用程序风行的原因之一，是因为可以直接在各种电脑平台上执行，不需要事先安装或定期升级等程序。</p><p>各种类型的<a href="https://zh.wikipedia.org/wiki/%E5%8B%95%E6%85%8B%E7%B6%B2%E9%A0%81">动态网页</a>和“网络应用程序” 之间的区别一般是不清楚的。<br>最有可能接近“网络应用程序”的网站是与<strong>桌面软件应用程序</strong>或<a href="https://zh.wikipedia.org/wiki/%E6%B5%81%E5%8B%95%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F">移动应用程序</a>具有类似功能的网站。<br><a href="https://zh.wikipedia.org/wiki/HTML5">HTML5</a>引入了明确的支持，使得应用程序可以作为网页加载，可以在本地存储数据并在脱机状态下继续运行。</p><h3 id="分类">分类</h3><ul><li><p>普通网页应用程序</p></li><li><p><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8">单页应用</a>更类似于应用程序，因为它们没有使用不同的URL切换操作界面。像 <a href="https://zh.wikipedia.org/w/index.php?title=Sencha_Touch&amp;action=edit&amp;redlink=1">Sencha Touch</a> 和 <a href="https://zh.wikipedia.org/wiki/AngularJS">AngularJS</a> 这样的单页网页框架可能会被用来为移动平台开发这样的网页应用。</p></li></ul><h2 id="Web应用程序架构">Web应用程序架构</h2><p>目前流行Web应用程序架构有两种：C/S、B/S.<br>  C/S：Client/Server，服务器通常采用高性能的PC、工作站或小型机，客户端需要安装专用的客户端软件。<br>  B/S：Brower/Server，客户端只要安装一个浏览器，通过浏览器与Web服务器进行数据交互。</p><h1 id="Web应用框架">Web应用框架</h1><h2 id="概述">概述</h2><p><strong>Web应用框架</strong>（Web application framework）是一种<a href="https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6">电脑</a><a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E9%AB%94%E6%A1%86%E6%9E%B6">软件框架</a>，用来支持<a href="https://zh.wikipedia.org/w/index.php?title=%E5%8B%95%E6%85%8B%E7%B6%B2%E7%AB%99&amp;action=edit&amp;redlink=1">动态网站</a>、<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E7%B5%A1%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F">网络应用程序</a>及<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1">网络服务</a>的开发。这种框架有助于减轻网页开发时共通性活动的工作负荷，例如许多框架提供<a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%BA%AB">数据库</a>存取接口、标准模板以及<a href="https://zh.wikipedia.org/wiki/%E6%9C%83%E8%A9%B1">会话</a>管理等，可提升代码的可再用性。</p><blockquote><ul><li><p>用于Web应用程序的开发，是建立 web 应用的一种方式</p></li><li><p>web 框架的目的：向程序员隐藏了处理 HTTP 请求和响应相关的基础代码。<br>至于隐藏多少这取决于不同的框架，Django 和 Flask 走向了两个极端：Django 包括了每种情形，几乎成了它致命的一点；Flask 立足于“微框架”，仅仅实现 web 应用需要的最小功能，其它的不常用的 web 框架任务交由第三方库来完成。</p></li><li><p>但是最后要记住的是，Python web 框架都以相同的方式工作的：它们接收 HTTP 请求，分派代码，产生 HTML，创建带有内容的 HTTP 响应。事实上，所有主流的服务器端框架都以这种方式工作的（ JavaScript 框架除外）</p></li></ul></blockquote><h2 id="框架种类">框架种类</h2><h3 id="模型-视图-控制器（MVC（Model-view-controller））">模型 - 视图 - 控制器（MVC（Model view controller））</h3><p>主条目：<a href="https://zh.wikipedia.org/wiki/MVC">MVC</a></p><p>许多框架遵循模型 - 视图 - 控制器（MVC）体系模型的结构模式，使数据模型与用户界面分开。这被普遍认为是一个很好的做法，因为它模块化的代码，能提高代码的重复使用，并允许多个接口。在Web应用中，这允许不同的应用方面，如网页，远程应用程序和Web服务接口。MVC是业界比较认可的架构模型。</p><h3 id="三部分组织模式">三部分组织模式</h3><p>在这种组织模式中，应用程序建立在三个部分：客户端，应用程序和数据库。数据库通常是一个RDBMS。而客户端指的是由Web应用程序生成的HTML，在用户的浏览器运行。应用程序运行在服务器上。</p><h3 id="内容管理系统（CMS）">内容管理系统（CMS）</h3><p>主条目：<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AE%B9%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F">内容管理系统</a></p><p>指的是一种内容编辑程序。就像在部落格写文章一样，不需要懂得编程的人，也可以通过CMS发布，更改，管理内容。</p><h2 id="各种编程语言Web框架">各种编程语言Web框架</h2><table><thead><tr><th>CL</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>Php</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Python</td><td></td><td>Flask</td><td></td><td></td><td></td></tr><tr><td>Java</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>Javascript</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h1 id="为什么要用Web框架">为什么要用Web框架</h1><h2 id="什么是Web-Framework？">什么是Web Framework？</h2><p>Web Application Framework（Web应用程序框架）或简单的Web Framework（Web框架）表示一个库和模块的集合，使Web应用程序开发人员能够编写应用程序，而不必担心协议，线程管理等低级细节。</p><h3 id="Web应用程序的本质">Web应用程序的本质</h3><p>Web(World Wide Web)诞生最初的目的，是为了利用互联网交流工作文档。</p><h3 id="使用WEB框架的优点">使用WEB框架的优点</h3><p>web网站发展至今，特别是<a href="https://cloud.tencent.com/product/cvm?from_column=20065&amp;from=20065">服务器</a>端，涉及到的知识、内容，非常广泛。这对程序员的要求会越来越高。如果采用成熟，稳健的框架，那么一些基础的工作，比如，安全性，数据流控制等都可以让框架来处理，那么程序开发人员可以把精力放在具体的业务逻辑上面。使用框架的优点： <strong>稳定性和可扩展性强</strong> <strong>可以降低开发难度，提高开发效率。</strong> 总结一句话：避免重复造轮子</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230815-163129.png" alt="20190315163458696"></p><h1 id="参考">参考</h1><ul><li>转载</li></ul><ol><li><a href="https://zh.wikipedia.org/zh-sg/Web%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6">Web应用框架 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">网络应用程序 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://blog.csdn.net/qq_37020594/article/details/101380144">Web的定义和应用，及应用程序架构和技术分类_wed功能和技术架构_我的芒果的博客-CSDN博客</a></li><li><a href="https://www.cnblogs.com/hazir/p/what_is_web_framework.html">【译】什么是 web 框架？ - hazir - 博客园 (cnblogs.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 架构 </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thrift学习</title>
      <link href="/posts/20230814224851-4964b695.html"/>
      <url>/posts/20230814224851-4964b695.html</url>
      
        <content type="html"><![CDATA[<h1 id="Thrift">Thrift</h1><p><code>Thrift</code>是一个<strong>轻量级</strong>、<strong>跨语言</strong>的<strong>远程服务调用</strong>框架，最初由<code>Facebook</code>开发，后面进入<code>Apache</code>开源项目。它通过自身的<code>IDL</code><strong>中间语言</strong>, 并借助<strong>代码生成引擎</strong>生成各种主流语言的<code>RPC</code><strong>服务端</strong>/<strong>客户端</strong>模板代码。</p><p><code>Thrift</code>支持多种不同的<strong>编程语言</strong>，包括<code>C++</code>、<code>Java</code>、<code>Python</code>、<code>PHP</code>、<code>Ruby</code>等，本系列主要讲述基于<code>Java</code>语言的<code>Thrift</code>的配置方式和具体使用。</p><h2 id="Thrift-技术栈">Thrift 技术栈</h2><p><code>Thrift</code>对<strong>软件栈</strong>的定义非常的清晰, 使得各个组件能够<strong>松散的耦合</strong>, 针对不同的应用场景, 选择不同是方式去搭建服务。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230814-225601.awebp" alt="img"></p><p><code>Thrift</code><strong>软件栈</strong>分层<strong>从下向上</strong>分别为：<strong>传输层</strong>(<code>Transport Layer</code>)、<strong>协议层</strong>(<code>Protocol Layer</code>)、<strong>处理层</strong>(<code>Processor Layer</code>)和<strong>服务层</strong>(<code>Server Layer</code>)。</p><ul><li><strong>传输层</strong>(<code>Transport Layer</code>)：传输层负责直接从网络中<strong>读取</strong>和<strong>写入</strong>数据，它定义了具体的<strong>网络传输协议</strong>；比如说<code>TCP/IP</code>传输等。</li><li><strong>协议层</strong>(<code>Protocol Layer</code>)：协议层定义了<strong>数据传输格式</strong>，负责网络传输数据的<strong>序列化</strong>和<strong>反序列化</strong>；比如说<code>JSON</code>、<code>XML</code>、<strong>二进制数据</strong>等。</li><li><strong>处理层</strong>(<code>Processor Layer</code>)：处理层是由具体的<code>IDL</code>（<strong>接口描述语言</strong>）生成的，封装了具体的<strong>底层网络传输</strong>和<strong>序列化方式</strong>，并委托给用户实现的<code>Handler</code>进行处理。</li><li><strong>服务层</strong>(<code>Server Layer</code>)：整合上述组件，提供具体的<strong>网络线程/IO服务模型</strong>，形成最终的服务。</li></ul><h2 id="Thrift的特性">Thrift的特性</h2><h3 id="一-开发速度快">(一) 开发速度快</h3><p>通过编写<code>RPC</code>接口<code>Thrift IDL</code>文件，利用<strong>编译生成器</strong>自动生成<strong>服务端骨架</strong>(<code>Skeletons</code>)和<strong>客户端桩</strong>(<code>Stubs</code>)。从而省去开发者<strong>自定义</strong>和<strong>维护接口编解码</strong>、<strong>消息传输</strong>、<strong>服务器多线程模型</strong>等基础工作。</p><ul><li>服务端：只需要按照<strong>服务骨架</strong>即<strong>接口</strong>，编写好具体的<strong>业务处理程序</strong>(<code>Handler</code>)即<strong>实现类</strong>即可。</li><li>客户端：只需要拷贝<code>IDL</code>定义好的<strong>客户端桩</strong>和<strong>服务对象</strong>，然后就像调用本地对象的方法一样调用远端服务。</li></ul><h3 id="二-接口维护简单">(二) 接口维护简单</h3><p>通过维护<code>Thrift</code>格式的IDL（<strong>接口描述语言</strong>）文件（注意写好注释），即可作为给<code>Client</code>使用的接口文档使用，也<strong>自动生成</strong>接口代码，始终保持代码和文档的一致性。且<code>Thrift</code>协议可灵活支持<strong>接口</strong>的<strong>可扩展性</strong>。</p><h3 id="三-学习成本低">(三) 学习成本低</h3><p>因为其来自<code>Google Protobuf</code>开发团队，所以其<code>IDL</code>文件风格类似<code>Google Protobuf</code>，且更加<strong>易读易懂</strong>；特别是<code>RPC</code><strong>服务接口</strong>的风格就像写一个<strong>面向对象</strong>的<code>Class</code>一样简单。</p><p>初学者只需参照：<a href="https://link.juejin.cn?target=http%3A%2F%2Fthrift.apache.org%2F">thrift.apache.org/</a>，一个多小时就可以理解<code>Thrift IDL</code>文件的语法使用。</p><h3 id="四-多语言-跨语言支持">(四) 多语言/跨语言支持</h3><p><code>Thrift</code>支持<code>C++</code>、 <code>Java</code>、<code>Python</code>、<code>PHP</code>、<code>Ruby</code>、<code>Erlang</code>、<code>Perl</code>、<code>Haskell</code>、<code>C#</code>、<code>Cocoa</code>、<code>JavaScript</code>、<code>Node.js</code>、<code>Smalltalk</code>等多种语言，即可生成上述语言的<strong>服务器端</strong>和<strong>客户端程序</strong>。</p><p>对于我们经常使用的<code>Java</code>、<code>PHP</code>、<code>Python</code>、<code>C++</code>支持良好，虽然对<code>iOS</code>环境的<code>Objective-C</code>(<code>Cocoa</code>)支持稍逊，但也完全满足我们的使用要求。</p><h3 id="五-稳定-广泛使用">(五) 稳定/广泛使用</h3><p><code>Thrift</code>在很多开源项目中已经被验证是<strong>稳定</strong>和<strong>高效</strong>的，例如<code>Cassandra</code>、<code>Hadoop</code>、<code>HBase</code>等；国外在<code>Facebook</code>中有广泛使用，国内包括百度、美团小米、和饿了么等公司。</p><h2 id=""></h2><h1 id="对比HTTP">对比HTTP</h1><p>和 http 相比，同属于应用层，走 tcp 协议。Thrift 优势在于发送同样的数据，request包 和 response包 要比 http 小很多，在整体性能上要优于 http 。</p><h1 id="Thrift学习">Thrift学习</h1><p>如果使用thrift框架来调用别人的服务，则必须要知道别人写的.thrift文件.<br>.thrift文件，其实就是你要访问的服务的一份说明书，里面会定义服务的名称，以及该服务中的函数，以及函数的入参有几个，每个参数的数据类型是什么，参数的名称是啥，还有返回值的数据类型。</p><h2 id="Thrift实例">Thrift实例</h2><p>以python+thrift为例</p><p>环境准备：</p><ul><li>从官网上下载 windows 版的 thrift.exe：<a href="http://archive.apache.org/dist/thrift/0.9.3/">http://archive.apache.org/dist/thrift/0.9.3/</a> （我这里用的是0.9.3版本）</li><li>python版本：Python 3.7.1</li><li>pip3 install thrift</li></ul><ol><li>首先使用 thrift 之前需要定义一个 .thrift 格式的文件,比如 test.thrift</li></ol><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">service</span> <span class="title">Transmit</span> </span>&#123;</span><br><span class="line"><span class="type">string</span> sayMsg(<span class="number">1</span>:<span class="type">string</span> msg);</span><br><span class="line"><span class="type">string</span> invoke(<span class="number">1</span>:<span class="type">i32</span> cmd <span class="number">2</span>:<span class="type">string</span> token <span class="number">3</span>:<span class="type">string</span> data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>然后运行命令：<code>thrift-0.9.3.exe -gen py test.thrift </code>生成 python 代码</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">thrift-0.9.3.exe -gen py test.thrift</span><br></pre></td></tr></table></figure><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230814-230311.png" alt="img"></p><ol start="3"><li>然后将生成的 python 代码 和 文件，放到新建的 python 项目中。完成后先运行服务器代码,启动服务</li></ol><ul><li>服务端代码 <a href="http://server.py">server.py</a>：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> Transmit</span><br><span class="line"><span class="keyword">from</span> test.ttypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"><span class="keyword">from</span> thrift.server <span class="keyword">import</span> TServer</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TransmitHandler</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.log = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sayMsg</span>(<span class="params">self, msg</span>):</span><br><span class="line">        msg = json.loads(msg)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sayMsg(&quot;</span> + msg + <span class="string">&quot;)&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;say &quot;</span> + msg + <span class="string">&quot; from &quot;</span> + socket.gethostbyname(socket.gethostname())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">invoke</span>(<span class="params">self,cmd,token,data</span>):</span><br><span class="line">        cmd = cmd</span><br><span class="line">        token =token</span><br><span class="line">        data = data</span><br><span class="line">        <span class="keyword">if</span> cmd ==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> json.dumps(&#123;token:data&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cmd不匹配&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    handler = TransmitHandler()</span><br><span class="line">    processor = Transmit.Processor(handler)</span><br><span class="line">    transport = TSocket.TServerSocket(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>)</span><br><span class="line">    tfactory = TTransport.TBufferedTransportFactory()</span><br><span class="line">    pfactory = TBinaryProtocol.TBinaryProtocolFactory()</span><br><span class="line">    server = TServer.TSimpleServer(processor, transport, tfactory, pfactory)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting python server...&quot;</span>)</span><br><span class="line">    server.serve()</span><br></pre></td></tr></table></figure><ol start="4"><li>客户端代码调用服务，以python调用为例</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> jsonfrom test <span class="keyword">import</span> Transmit</span><br><span class="line"><span class="keyword">from</span> test.ttypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> test.constants <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> thrift <span class="keyword">import</span> Thrift</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TSocket</span><br><span class="line"><span class="keyword">from</span> thrift.transport <span class="keyword">import</span> TTransport</span><br><span class="line"><span class="keyword">from</span> thrift.protocol <span class="keyword">import</span> TBinaryProtocol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transport = TSocket.TSocket(<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8000</span>)</span><br><span class="line">transport = TTransport.TBufferedTransport(transport)</span><br><span class="line">protocol = TBinaryProtocol.TBinaryProtocol(transport)</span><br><span class="line">client = Transmit.Client(protocol)</span><br><span class="line"><span class="comment"># Connect!</span></span><br><span class="line">transport.<span class="built_in">open</span>()</span><br><span class="line"></span><br><span class="line">cmd = <span class="number">2</span></span><br><span class="line">token = <span class="string">&#x27;1111-2222-3333-4444&#x27;</span></span><br><span class="line">data = json.dumps(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zhoujielun&quot;</span>&#125;)</span><br><span class="line">msg = client.invoke(cmd,token,data)</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line">transport.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行结果：cmd不匹配</span></span><br></pre></td></tr></table></figure><h1 id="参考">参考</h1><ul><li>转载</li></ul><ol><li><a href="https://juejin.cn/post/6844903622380093447">Apache Thrift系列详解(一) - 概述与入门 - 掘金 (juejin.cn)</a></li><li><a href="https://www.cnblogs.com/shenh/p/10529073.html">python 使用 thrift 教程 - 三只松鼠 - 博客园 (cnblogs.com)</a></li><li><a href="https://juejin.cn/post/7071891920783409182">python：rpc框架之thrift框架 - 掘金 (juejin.cn)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 架构 </category>
          
          <category> RPC框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC框架 </tag>
            
            <tag> Thrift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask学习</title>
      <link href="/posts/20230814175838-95d3c49f.html"/>
      <url>/posts/20230814175838-95d3c49f.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Flask">什么是Flask</h1><h2 id="什么是Flask？">什么是Flask？</h2><p>Flask是一个用Python编写的Web应用程序框架。 它由 <strong>Armin Ronacher</strong> 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和Jinja2模板引擎。两者都是Pocco项目。</p><p>Flask诞生于2010年，是用Python语言基于Werkzeug工具箱编写的轻量级Web开发框架。</p><p>Flask本身相当于一个内核，其他几乎所有的功能都要用到扩展（邮件扩展Flask-Mail，用户认证Flask-Login），都需要用第三方的扩展来实现。</p><p>其 WSGI 工具箱采用 Werkzeug（路由模块），模板引擎则使用 Jinja2。这两个也是Flask框架的核心。</p><p>Python最出名的框架要数Django，此外还有Flask、Tornado等框架。虽然Flask不是最出名的框架，但是Flask应该算是最灵活的框架之一，这也是Flask受到广大开发者喜爱的原因。</p><h2 id="WSGI">WSGI</h2><p>Web Server Gateway Interface（Web服务器网关接口，WSGI）已被用作Python Web应用程序开发的标准。 WSGI是Web服务器和Web应用程序之间通用接口的规范。</p><h2 id="Werkzeug">Werkzeug</h2><p>它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。</p><h2 id="jinja2">jinja2</h2><p>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p><h1 id="Flask学习教程">Flask学习教程</h1><ul><li><a href="https://www.w3cschool.cn/flask/flask_overview.html#">Flask 概述_w3cschool</a></li></ul><h2 id="Flask程序例子">Flask程序例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>把它保存为 <a href="http://hello.py">hello.py</a> （或是类似的），然后用 Python 解释器来运行。 确保你的应用文件名不是 <a href="http://flask.py">flask.py</a> ，因为这将与 Flask 本身冲突。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python hello.py</span><br><span class="line"> * Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在访问 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> ，你会 看见 Hello World 问候。</p><h3 id="那么，这段代码做了什么？">那么，这段代码做了什么？</h3><p>首先，我们导入了 Flask 类。这个类的实例将会是我 们的 WSGI 应用程序。</p><p>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块 的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>’ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。</p><p>然后，我们使用 route() 装饰器告诉 Flask 什么样 的URL 能触发我们的函数。</p><p>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想 要显示在用户浏览器中的信息。</p><p>最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>’: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。</p><p>欲关闭服务器，按 Ctrl+C。</p><h3 id="外部可访问的服务器">外部可访问的服务器</h3><p>如果你运行了这个服务器，你会发现它只能从你自己的计算机上访问，网络 中其它任何的地方都不能访问。在调试模式下，用户可以在你的计算机上执 行任意 Python 代码。因此，这个行为是默认的。</p><p>如果你禁用了 debug 或信任你所在网络的用户，你可以简单修改调用 run() 的方法使你的服务器公开可用，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=&#x27;0.0.0.0&#x27;)</span><br></pre></td></tr></table></figure><p>这会让操作系统监听所有公网 IP。</p><h1 id="参考">参考</h1><ol><li><a href="https://www.w3cschool.cn/flask/flask_overview.html#">Flask 概述_w3cschool</a></li><li>[【一周掌握Flask框架学习笔记】Flask概念及基础-腾讯云开发者社区-腾讯云 (<a href="http://tencent.com">tencent.com</a>)</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
          <category> 架构 </category>
          
          <category> Web框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> Web框架 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Select下拉选择onchange事件</title>
      <link href="/posts/20230810233351-9e5ae3e6.html"/>
      <url>/posts/20230810233351-9e5ae3e6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Select下拉选择onchange事件">Select下拉选择onchange事件</h1><ul><li>现在要实现这样一个效果<br>网页下拉选择选择，自动更新页面内容</li><li>下拉选择是select标签，自动更新页面内容，可以通过onchange事件实现</li></ul><h1 id="onchange定义">onchange定义</h1><p>当元素的值发生改变时，会发生 onchange 事件。</p><p>对于单选框和复选框，在被选择的状态改变时，发生 onchange 事件。</p><p>提示：该事件类似于 <a href="https://www.w3school.com.cn/jsref/event_oninput.asp">oninput 事件</a>。不同之处在于 oninput 事件在元素值改变后立即发生，而 onchange 在元素失去焦点而内容发生改变后发生。另一个区别是 onchange 事件也适用于 <code>&lt;select&gt;</code> 元素。</p><h1 id="使用">使用</h1><p>有若干种方式</p><h2 id="1-在select标签-设置-onchange属性">1. 在select标签 设置 onchange属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请从列表中选择一辆新车。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;mySelect&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;BMW&quot;</span>&gt;</span>BMW<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mercedes&quot;</span>&gt;</span>Mercedes<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当您选择一辆新车时，会触发一个函数，输出所选汽车的值。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>You selected: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mySelect&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;You selected: &quot;</span> + x;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如示下例</li></ul><!DOCTYPE html><html><body><p>请从列表中选择一辆新车。</p><select id="mySelect" onchange="myFunction()">  <option value="Audi">Audi</option>  <option value="BMW">BMW</option>  <option value="Mercedes">Mercedes</option>  <option value="Volvo">Volvo</option></select><p>当您选择一辆新车时，会触发一个函数，输出所选汽车的值。</p><p id="demo">You selected: </p><script>function myFunction() {  var x = document.getElementById("mySelect").value;  document.getElementById("demo").innerHTML = "You selected: " + x;}</script></body></html><h2 id="2-使用jQuery动态添加-onchange属性">2. 使用jQuery动态添加 onchange属性</h2><ul><li>引入jquery <code>&lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt;</code></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;p&gt;请从列表中选择一辆新车。&lt;/p&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;mySelect2&quot;</span> &gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;Audi&quot;</span>&gt;Audi&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;BMW&quot;</span>&gt;BMW&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;Mercedes&quot;</span>&gt;Mercedes&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;Volvo&quot;</span>&gt;Volvo&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;p&gt;当您选择一辆新车时，会触发一个函数，输出所选汽车的值。&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;demo2&quot;</span>&gt;You selected: &lt;/p&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$( document ).ready(function() &#123;</span><br><span class="line">    $(<span class="string">&quot;#mySelect2&quot;</span>).change(function()&#123;</span><br><span class="line">      update();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  function <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">let</span> <span class="variable">mySelect2</span> <span class="operator">=</span> $(<span class="string">&quot;#mySelect2&quot;</span>).val();</span><br><span class="line">    console.log(<span class="string">&quot;You selected: &quot;</span> + mySelect2);</span><br><span class="line">    demo2.innerText = (<span class="string">&quot;You selected: &quot;</span> + mySelect2).toLocaleString();</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>如示下例</li></ul><!DOCTYPE html><html><body>  <script src="/js/jquery.min.js"></script><p>请从列表中选择一辆新车。</p><select id="mySelect2" >  <option value="Audi">Audi</option>  <option value="BMW">BMW</option>  <option value="Mercedes">Mercedes</option>  <option value="Volvo">Volvo</option></select><p>当您选择一辆新车时，会触发一个函数，输出所选汽车的值。</p><p id="demo2">You selected: </p><script type="text/javascript">$( document ).ready(function() {    $("#mySelect2").change(function(){      update();    })  })  function update() {    let mySelect2 = $("#mySelect2").val();    console.log("You selected: " + mySelect2);    demo2.innerText = ("You selected: " + mySelect2).toLocaleString();  }</script></body></html><h1 id="参考">参考</h1><ol><li><a href="https://www.w3school.com.cn/jsref/event_onchange.asp">onchange 事件 (w3school.com.cn)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> select标签 </tag>
            
            <tag> onchange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回车换行详解</title>
      <link href="/posts/20230810180521-d0173ed6.html"/>
      <url>/posts/20230810180521-d0173ed6.html</url>
      
        <content type="html"><![CDATA[<h1 id="回车换行详解">回车换行详解</h1><ul><li>原始的 回车(carriage return)和换行(line feed)是两个动作<ul><li>\n：表示换到下一行</li><li>\r  ：表示移动到行首</li></ul></li><li>现在 在计算机文件中，编程语言中<ul><li>\n：换行并移动到行首</li><li>\r：移动到行首</li></ul></li></ul><h2 id="1-机械打字机">1. 机械打字机</h2><p>“车(carriage)”是指纸车,带着纸一起左右移动的模块。</p><ul><li>回车：<br>在早期的机械打字机上，打印头是固定的，只能通过左右移动纸车在一行上打字。当开始打第一个字之前，要把纸车拉到最右边，上紧弹簧，随着打字，弹簧把纸车拉回去。每当打完一行后，纸车就完全收回去了，所以叫回车。<ul><li>换行：<br>打字机边上有个&quot;把手&quot;,往下扳动一下,纸会上移一行。在后来的电传打字机甚至今天的终端中都沿用了这些叫法。<br>YouTube上找了两个视频，一个是打印头固定的，一个是不固定的。可以看下，更容易理解：<ul><li><a href="https://www.youtube.com/watch?v=wf0a4tos3mk">固定打印头</a></li><li><a href="https://www.youtube.com/watch?v=lCZmVXGyVQQ">不固定打印头</a></li></ul></li></ul></li></ul><h2 id="2-电传打字机">2. 电传打字机</h2><p>​在后来的电传打字机中，通常打印头可以左右移动，这样可以节省空间，同时也就没有纸车这个概念了，不过车这个说法依然留下来了，只不过是指打印头，回车即将打印头回到行首，换行依然是将纸上移一行。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230810-182802.jpg" alt="ASR 33 Teletype Information"></p><ul><li><p>回车(<code>CR</code>)和换行(<code>LF</code>)的顺序问题<br>据<a href="https://en.wikipedia.org/wiki/Newline#History">wiki记载</a>，通常的电传打字机都是用<code>CR+LF</code>这个顺序，典型的就是上面那台<code>Teletype Model 33 ASR</code>。</p><p>把这一步骤拆分为回车和换行，是因为 <strong>打印头不能在一个字符的时间内从最右侧移动到下一行开始</strong> 。在<code>CR</code>之后打印的一个字符通常会变成污迹，由于打印头在移动到行首过程中，下个字符同时打印了。<br>所以解决办法就是将换行做成两个字符：<code>CR</code>将打印头移动到行首，<code>LF</code>进纸。事实上，通常还要发送额外的字符(额外的<code>CR</code>或者<code>NUL</code>，这些字符将被忽略)以保证打印头有足够的时间移动到行首。</p></li></ul><h2 id="3-计算机中打印字符">3. 计算机中打印字符</h2><ul><li>以下参考网上很多说法</li></ul><blockquote><ul><li><p>等到早期的计算机发明时，很自然的这两个概念被拿了过来。但是由于那时的存储设备非常昂贵，一些人认为在每行的结尾加两个字符用于换行，实在是极大的浪费，于是各个厂商在这一点上便出现了分歧。</p></li><li><p>windows: 由于一些早期的微型计算机还没有用于隐藏底层硬件细节的设备驱动，所以它们直接沿用了打字机的惯例，使用不带<code>NUL</code>的<code>CRLF</code>作为一个<code>EOL</code>。而CP/M为了和这些微型计算机使用同一个终端，也采用了这种设计。所以它的克隆MS-DOS也同样使用<code>CRLF</code>，由于Windows又是基于MS-DOS，为保持兼容性，所以就导致了如今的Windows是采用<code>CRLF</code>作为<code>EOL</code>，即<code>\r\n</code>(或<code>0x0D</code> <code>0x0A</code>)。</p></li><li><p>Unix: 而Multics在被设计之时就非常认真的考虑了这一问题，设计者们觉得只需一个字符便完全足够来表示<code>EOL</code>，这样更加合理。那么选择<code>CR</code>还是<code>LF</code>呢？本来由于那时的键盘上都有一个<code>Return</code>键，所以可能更好的选择是<code>CR</code>。但当时考虑到<code>CR</code>可以用来重写一行，以完成如<strong>粗体</strong>和<s>删除线</s>等效果，所以他们选择了稍稍难以理解的<code>LF</code>。然后自己设计了一个设备驱动程序来将<code>LF</code>转换为各种打字机所需要的<code>EOL</code>，这个方案非常完美，当然除了<code>LF</code>稍微奇怪一些。随后一脉相承的<code>Unix</code>和<code>Linux</code>们都继承了这个选择，于是你在这些操作系统上可以发现每一行的结尾是一个<code>LF</code>，即<code>\n(或0x0A)</code>。</p></li><li><p>Mac: 系统的选择就更加复杂一些。Apple在设计Mac OS时，他们采用了一个最容易理解的选择：<code>CR</code>，即<code>\r</code>(或<code>0x0D</code>)。但这只维持到Mac OS 9，后一个版本的Mac OSX基于Mach-BSD内核，所以此后版本的Mac OSX在每行的结尾存储了与Linux一样的<code>LF</code>，即<code>\n</code>(或<code>0x0A</code>)。</p></li><li><p>还有很多其它的操作系统采用更加不同的方案，这也导致了混乱的产生，</p><p>因为Linux和Mac OSX上使用的是<code>LF</code>，而Windows上使用的是<code>CRLF</code>，那么Linux和Mac OSX上创建的文件在Windows上打开时，由于每一行的结尾只有一个<code>LF</code>，但Windows只认识<code>CRLF</code>，所以便不会有逻辑上的换行处理，故所有的文字被挤到了一行。<br>反过来，如果Windows上的文件在Linux和Mac OSX上打开时，仅需<code>LF</code>便可换行，那么每一行的结尾便多了一个<code>CR</code>，对应的ASCII码为<code>^M</code>。</p></li><li><p>而git的安装向导会特意有一个这样的提醒页面也出于此，因为一个项目可能有多个开发者，每个开发者可能使用的是不同的系统，那么开发者checkout代码时，如果不做换行符的转换，有可能就会出现只有一行或者行尾多了<code>^M</code>的情况。当然，如果你有一个可以识别多种<code>EOL</code>的现代文本编辑器，那么不做转换也无妨(notepad不行)。</p></li></ul></blockquote><h2 id="4-编程语言中的回车换行">4. 编程语言中的回车换行</h2><ul><li>C语言，C系语言</li></ul><p>为了避免在这些不同的实现中挣扎，高级语言给我们带来了福音，它们各自使用了<a href="http://en.wikipedia.org/wiki/Newline#In_programming_languages">统一</a>的方式来处理<code>EOL</code>。在C语言中，你一定知道在字符串中如果要增加一个换行符的话，直接用<code>\n</code>即可，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is the first line! \nThis is a new line!&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面的输出将是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is the first line!</span><br><span class="line">This is a new line!</span><br></pre></td></tr></table></figure><p>为什么C语言选择了<code>\n</code>而不是<code>\r</code>？这绝非偶然。熟悉C语言历史的朋友可能知道当初C语言是Dennis Ritchie为开发Unix而设计，所以它沿用了Unix上<code>EOL</code>的惯例便很容易理解了。而我们知道Unix使用的<code>LF</code>的ASCII码为<code>0x0A</code>，转义符为<code>\n</code>，因此C语言中也使用<code>\n</code>作为换行。</p><h2 id="Text-Mode-VS-Binary-Mode">Text Mode VS Binary Mode</h2><ul><li>该部分内容转载于：<a href="https://feihu.me/blog/2014/end-of-line/">知无涯之回车换行的故事 (feihu.me)</a></li></ul><p>但是，千万别简单的认为上面的<code>\n</code>最终写到文件中就一定是其ASCII码<code>0x0A</code>，或者文件中的<code>0x0A</code>被读到内存中就是其转义符<code>\n</code>。这取决于你打开文件的方式。在C语言中，在对文件进行读取操作之前，都需要先打开文件，可以使用下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br></pre></td></tr></table></figure><p>注意看第二个参数<code>mode</code>，它是一个字符指针，通常可以为读®，写(w)，追加(a)或者读写(r+, w+, a+)，仅指定这些参数时，文件将被当成是文本文件来操作，即<code>Text Mode</code>，而如果在这些参数之外再指定一个额外的<code>b</code>时，文件便会被当成是二进制文件，即<code>Binary Mode</code>。这两种模式的区别在哪里呢？这里稍稍有些复杂，因为它们在不同的平台上表现不同。</p><h3 id="Windows平台">Windows平台</h3><p>对于Windows平台，因为其使用<code>CRLF</code>来表示<code>EOL</code>，故对于<code>Text Mode</code>需要做一定的转换才能够与C语言保持一致。接下来的两个图可以给出最为直观的描述。</p><p>先看二者对于读操作的区别：</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230810-184939.png" alt="读操作"></p><p><code>Text Mode</code>下，C语言会尝试去“理解”这些回车与换行，它会知道<code>LF</code>和<code>CRLF</code>都可能是<code>EOL</code>，所以不管文件中是<code>LF</code>还是<code>CRLF</code>，被读进内存时都会变成<code>LF</code>。而<code>Binary Mode</code>下，C语言不会做任何的“理解”，所以这些字符在文件中什么样，读到内存中依然那样。</p><p>接下来是写操作的区别：</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230810-184939.png" alt="写操作"></p><p><code>Text Mode</code>下，内存中的每一个<code>LF</code>写入文件中时都会变为<code>CRLF</code>，当然，如果不幸内存中为<code>CRLF</code>，以此种模式写入到文件中时就会变成<code>CRCRLF</code>（<strong>注意</strong>：这里不是<code>CRLF</code>。原因我想大概是如果你认为内存中的数据是文本，那么它一定是以<code>LF</code>作为<code>EOL</code>，<code>CR</code>也一定是你有意而为之，是个有意义的字符，所以它并不会处理。）。而<code>Binary Mode</code>下，内存中的内容会被原封不动的写到文件中。</p><p>所以为了保证一致性，一定需要注意配套使用读和写，即<strong>读和写采用同一种模式打开文件</strong>。</p><h3 id="Linux和Mac-OSX平台">Linux和Mac OSX平台</h3><p>因为Linux和Mac OSX平台与C语言对待<code>EOL</code>的方式完全一致，所以<code>Text Mode</code>和<code>Binary Mode</code>在这些平台下没有任何区别，可以参考<code>fopen</code>的<a href="http://man7.org/linux/man-pages/man3/fopen.3.html">man page</a>。实际上，所有遵循POSIX的平台都忽略了<code>b</code>这个参数。</p><p>虽说在这些平台上处理<code>EOL</code>非常简单，但是如果你的程序需要移植到其它非POSIX平台上时，请务必正确对待<code>b</code>参数。</p><h2 id="POSIX平台-介绍">POSIX平台 介绍</h2><p>因为Linux和Mac OSX平台与C语言对待<code>EOL</code>的方式完全一致，所以<code>Text Mode</code>和<code>Binary Mode</code>在这些平台下没有任何区别，可以参考<code>fopen</code>的<a href="http://man7.org/linux/man-pages/man3/fopen.3.html">man page</a>。实际上，所有遵循POSIX的平台都忽略了<code>b</code>这个参数。</p><ul><li><p>POSIX：可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ）</p></li><li><p>历史：</p><blockquote><p>974年，贝尔实验室正式对外发布Unix。因为涉及到反垄断等各种原因，加上早期的Unix不够完善，于是贝尔实验室以慷慨的条件向学校提供源代码，所以Unix在大专院校里获得了很多支持并得以持续发展。</p><p>于是出现了好些独立开发的与Unix基本兼容但又不完全兼容的OS，通称Unix-like OS.包括：</p><ol><li>美国加州大学伯克利分校的Unix4.xBSD(Berkeley Software Distribution)。</li><li>贝尔实验室发布的自己的版本，称为System V Unix。</li><li>其他厂商的版本，比如Sun Microsystems的Solaris系统,则是从这些原始的BSD和System V版本中衍生而来。</li></ol><p>20世纪80年代中期，Unix厂商试图通过加入新的、往往不兼容的特性来使它们的程序与众不同。局面非常混乱，麻烦也就随之而来了。</p><p>为了提高兼容性和应用程序的可移植性，阻止这种趋势， IEEE(电气和电子工程师协会)开始努力标准化Unix的开发，后来由 Richard Stallman命名为“Posix”。</p></blockquote></li></ul><p>这套标准涵盖了很多方面，比如Unix系统调用的C语言接口、shell程序和工具、线程及网络编程。</p><ul><li><p>支持POSIX</p><blockquote><p>Unix和Linux</p><p>苹果的操作系统也是Unix-based的</p><p>Windows从WinNT开始就有兼容POSIX的考虑。这是因为当年在要求严格的领域，Unix地位比Windows高。为了把Unix用户拉到Windows阵营，被迫支持POSIX。</p><p>现在Win10对 Linux/POSIX 支持好，则是因为Linux已经统治了廉价服务器市场。为了提高Windows的竞争力搞的。</p></blockquote></li></ul><h2 id="参考">参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-sg/%E5%9B%9E%E8%BB%8A%E9%8D%B5">回车键 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://en.wikipedia.org/wiki/Newline#History">Newline - Wikipedia</a></li><li><a href="https://www.racecoder.com/archives/383/">回车与换行的一些历史 - 这破站 (racecoder.com)</a></li><li><a href="https://feihu.me/blog/2014/end-of-line/">知无涯之回车换行的故事 (feihu.me)</a></li><li><a href="https://zhuanlan.zhihu.com/p/392588996">posix是什么都不知道，还好意思说你懂Linux？ - 知乎 (zhihu.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回车换行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell函数返回值详解</title>
      <link href="/posts/20230809143243-c8a1efbf.html"/>
      <url>/posts/20230809143243-c8a1efbf.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell函数返回值详解">Shell函数返回值详解</h1><p>shell脚本中，执行函数</p><p>通常来说函数返回值有两类</p><h2 id="1-函数执行状态码">1. 函数执行状态码</h2><p>我更愿意称之为函数执行状态码</p><p>标识函数是否执行成功，返回值只能是整数 ，在0-255之间，0表示成功，其他值表示失败</p><blockquote><ul><li><p>函数内，显示使用return 语句，指定 函数返回值，（0-255）</p></li><li><p>不显示使用return 语句，会将最后一条命令运行结果状态作为返回值</p></li><li><p>获取该状态码，需要在函数执行后，<strong>立即</strong>从 $? 变量获取  ，因为该变量只显示最后命令的退出状态</p></li><li><table><thead><tr><th>$?</th><th>仅显示最后命令的退出状态，0表示没有错误，其他表示有错误；</th></tr></thead></table></li></ul></blockquote><h3 id="举例">举例</h3><ol><li>return  整数 0-255，获取为正常状态码</li><li>return 字符串，报错，<a href="http://test.sh">test.sh</a>: line 11: return: xyz: numeric argument required</li><li>return 整数大于255，返回值 为 整数 取模256 ，如下例 64789 % 256 = 21</li><li>不显示使用return 语句，则函数内最后一条命令的执行结果，0为正常，其他错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo0</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 64789</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo2</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;xyz&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooa</span></span>() &#123;</span><br><span class="line">    <span class="built_in">ls</span> *.sh</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foob</span></span>() &#123;</span><br><span class="line">    <span class="built_in">ls</span> *.ksh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo0</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo0 return $?\n..&quot;</span></span><br><span class="line">foo1</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo1 return $?\n..&quot;</span></span><br><span class="line">foo2</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo2 return $?\n..&quot;</span></span><br><span class="line">fooa</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooa return $?\n..&quot;</span></span><br><span class="line">foob</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foob return $?\n..&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码执行结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foo0 <span class="built_in">return</span> 21</span><br><span class="line">..</span><br><span class="line">foo1 <span class="built_in">return</span> 1</span><br><span class="line">..</span><br><span class="line">test.sh: line 11: <span class="built_in">return</span>: xyz: numeric argument required</span><br><span class="line">foo2 <span class="built_in">return</span> 255</span><br><span class="line">..</span><br><span class="line">excutep.sh  test.sh</span><br><span class="line">fooa <span class="built_in">return</span> 0</span><br><span class="line">..</span><br><span class="line"><span class="built_in">ls</span>: cannot access *.ksh: No such file or directory</span><br><span class="line">foob <span class="built_in">return</span> 2</span><br><span class="line">..</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-用户自定义的函数执行返回结果">2. 用户自定义的函数执行返回结果</h2><p>也有两种方式</p><h3 id="1-函数内-给全局变量-赋值">1. 函数内 给全局变量 赋值</h3><blockquote><ol><li>函数外首先定义全局变量</li><li>函数内修改全局变量</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cc=<span class="string">&quot;aa&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooc</span></span>() &#123;</span><br><span class="line">    cc=<span class="string">&quot;bb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$cc</span>&quot;</span></span><br><span class="line">fooc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooc return $? \n  cc=<span class="variable">$cc</span>   \n..&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数执行结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">aa</span><br><span class="line">fooc return 0</span><br><span class="line">  cc=bb   </span><br><span class="line">..</span><br></pre></td></tr></table></figure><h3 id="2-执行函数的shell，继承函数内部的打印输出">2. 执行函数的shell，继承函数内部的打印输出</h3><blockquote><ol><li>函数内部 包括打印语句<br>比如 echo 语句，不止echo，还包括，head、cat等等</li><li>执行函数并赋值给一个变量 ，注意 dd=<code>food</code>，函数名使用`` 包裹表示执行函数<ul><li>而且通过下述例子可以看出，状态码是函数体内部返回的 状态码 5，也即该赋值操作，没改变变量$?</li><li>函数内部有多处打印输出，则通过该种方法赋值时，赋值为一个字符串<br>==会把多行输出都合并到一个字符串中，并且以一个空格做分割==<br>( 这里一个测试时很奇怪的点<br>原因是，以<code>echo $dd</code> 打印，结果以空格分割<br>和以<code>echo &quot;$dd&quot;</code> 打印结果以换行分割)</li></ul></li><li>执行函数若不进行赋值操作，则函数内部的打印输出也会直接被继承到调用函数shell 的打印输出 顺序中</li></ol></blockquote><h3 id="举例-2">举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;22 222&quot;</span></span><br><span class="line">    <span class="built_in">head</span> -1 test.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;33&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;directly print:&quot;</span>  `food`</span><br><span class="line"><span class="built_in">dd</span>=`food`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;food return $? &quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$dd</span> <span class="string">&quot;start:<span class="variable">$&#123;dd&#125;</span>end&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;****************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;if dd is string, print the length of dd: <span class="variable">$&#123;#dd&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;if dd is array,print the length of array: <span class="variable">$&#123;#dd[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooe</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;22 222&quot;</span></span><br><span class="line">    <span class="built_in">head</span> -1 return_fuc_test.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;33&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 无赋值操作 则函数内部打印，会直接打印出来</span></span><br><span class="line">fooe</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooe return $? &quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">directly print: 11 22 222 #!/bin/bash 33</span><br><span class="line">food return 5 </span><br><span class="line">11 22 222 #!/bin/bash 33 start:11</span><br><span class="line">22 222</span><br><span class="line">#!/bin/bash</span><br><span class="line">33end</span><br><span class="line">****************</span><br><span class="line">if dd is string, print the length of dd: 24</span><br><span class="line">if dd is array,print the length of array: 1</span><br><span class="line"># 按数组来看，查询数组长度为1，所以函数返回值是一个字符串</span><br><span class="line"></span><br><span class="line">11</span><br><span class="line">22 222</span><br><span class="line">#!/bin/bash</span><br><span class="line">33</span><br><span class="line">fooe return 5 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ol><li>函数执行状态码，一般是用来判断 函数执行结果状态</li><li>第二种方式，获取函数返回值，如同一般编程中函数返回值使用</li></ol><h1 id="参考">参考</h1><ol><li><a href="https://blog.51cto.com/u_13800449/3049036">linux shell返回值方式及示例_51CTO博客_shell脚本返回值</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Coding </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> shell函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReadyToRead</title>
      <link href="/posts/20230626153850-8f8e2f5b.html"/>
      <url>/posts/20230626153850-8f8e2f5b.html</url>
      
        <content type="html"><![CDATA[<h1 id="articles">articles</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/79202151">BM25算法, Best Matching - 知乎专栏</a></li><li><a href="https://zhuanlan.zhihu.com/p/31009310">BM25F模型 - 知乎专栏</a></li><li><a href="https://lumingdong.cn/go/4q3yru">推荐系统算法调研. 蘑菇先生学习记</a><a href="https://lumingdong.cn/recommendation-algorithm-based-on-matrix-decomposition.html#ref-footnote-3">↩</a></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>LearningToRank-排序学习</title>
      <link href="/posts/20230626151728-e7cc9d05.html"/>
      <url>/posts/20230626151728-e7cc9d05.html</url>
      
        <content type="html"><![CDATA[<h1 id="传统排序方法">传统排序方法</h1><ol><li><strong>传统的排序方法通过构造相关度函数，按照相关度进行排序</strong>。<br>很难融合多种因数，比如向量空间模型以tf*idf作为权重构建相关度函数，就很难利用其他信息了，</li><li>并且如果模型中参数比较多，也会使得调参非常困难，而且很可能会出现过拟合现象。</li></ol><p>Ranking模型可以粗略分为基于相关度和机遇重要性进行排序。</p><p>基于相关度的模型，通常利用query和doc之间的词共现特性（如布尔模型）、VSM（如TFIDF、LSI等）、概率排序思想（BM25、LMIR）等。</p><p>基于重要性的模型，利用的是doc本身的重要性，如pageRank、TructRank等。</p><h1 id="Learning-To-Rank">Learning To Rank</h1><p>LTR（Learning to rank）是一种==监督学习==（SupervisedLearning）的==排序方法==，已经被广泛应用到推荐与搜索等领域。</p><h2 id="LTR采用机器学习">LTR采用机器学习</h2><p>很好地解决了这一问题。机器学习方法很容易融合多种特征，而且有成熟深厚的理论基础，并有一套成熟理论解决稀疏、过拟合等问题。</p><p>排序学习方法分为PointWise、PairWise、ListWise三种不同的方式，参考《A Short Introduction to Learning to Rank》</p><p>三种方法并不是特定的算法，而是排序学习模型的设计思路，主要区别体现在损失函数（Loss Function）、以及相应的标签标注方式和优化方法的不同。</p><p>LTR中单文档方法是将训练集里每一个文档当做一个训练实例,文档对方法是将同一个查询的搜索结果里任意两个文档对作为一个训练实例,文档列方法是将一个查询里的所有搜索结果列表作为一个训练实例.</p><ul><li><p>设q  为query，D(d_i,…… d_n) 为返回的文档对，如何排序</p><blockquote><ol><li>Point-Wise:       $$F(d_i) = Y_{qi}$$     根据相关度Y 对D排序</li><li>Pair-Wise :      $$F(q,(d_i,d_j))$$     ；  二分类，确定d_i,和d_j的顺序关系</li><li>List-Wise:       $$F(q,D) = Y_{D}$$    ；(q,D)相对于尝试学习每一个样本是否相关或者两个文档的相对比较关系，列表法排序学习的基本思路是尝试直接优化像 NDCG（Normalized Discounted Cumulative Gain）这样的指标，从而能够学习到最佳排序结果</li></ol></blockquote></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230816-105350" alt="img"></p><h1 id="PointWise-单点法">PointWise 单点法</h1><p>Pointwise方法是这三种排序学习方法中最简单点一种，它是思想是直接将排序问题转换成了分类或者回归问题</p><p>假如已有排序学习的训练数据集，每个query对应了多个不同的多doc，并且每个doc与相应query的相关度已知道，那么Pointwise方法在训练时会把每个单独的doc本身看作X ，把与query的相关度看作Y ，然后利用分类或者回归模型进行训练，最后依据利用训练好的模型对不同doc的打分进行排序</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230816-104448.jpg" alt="p"></p><blockquote><p>0/1变量 时，为PosintWise二分类</p><p>为离散变量时，为PointWise多分类</p><p>为连续变量时，为PointWise回归</p></blockquote><h2 id="PointWise-方法存在的问题：">PointWise 方法存在的问题：</h2><p>PointWise 方法通过优化损失函数求解最优的参数，可以看到 PointWise 方法非常简单，工程上也易实现，但是 PointWise 也存在很多问题：</p><ol><li>PointWise ==只考虑单个文档同 query 的相关性==，没有考虑文档间的关系，即假设各个doc之间是相互独立的，这种假设是不成立的。<br>然而排序追求的是排序结果，并不要求精确打分，只要有相对打分即可；</li><li>通过分类只是把不同的文档做了一个简单的区分，同一个类别里的文档则无法深入区别，虽然我们可以根据预测的概率来区别，但实际上，==这个概率只是准确度概率，并不是真正的排序靠前的预测概率==；</li><li>PointWise 方法并没有考虑同一个 query 对应的文档间的内部依赖性。<ul><li>一方面，导致输入空间内的样本不是 IID 的，违反了 ML 的基本假设，</li><li>另一方面，没有充分利用这种样本间的结构性。</li><li>其次，当不同 query 对应不同数量的文档时，==整体 loss 将容易被对应文档数量大的 query 组所支配==，应该每组 query 都是等价的才合理。</li></ul></li><li>很多时候，排序结果的 Top N 条的顺序重要性远比剩下全部顺序重要性要高，==因为损失函数没有相对排序位置信息，这样会使损失函数可能无意的过多强调那些不重要的 docs，==即那些排序在后面对用户体验影响小的 doc，所以对于位置靠前但是排序错误的文档应该加大惩罚。</li></ol><h2 id="数据输入和输出形式：">数据输入和输出形式：</h2><p>Pointwise方法是通过近似为回归问题解决排序问题，</p><ol><li><p>输入的单条样本为得分-文档，将每个查询-文档对的相关性得分作为实数分数或者序数分数，使得单个查询-文档对作为样本点(Pointwise的由来)，训练排序模型。</p></li><li><p>预测时候对于指定输入，给出查询-文档对的相关性得分。</p></li></ol><ul><li>代表算法：</li></ul><p>基于神经网络的排序算法 RankProp、基于感知机的在线排序算法 Prank(Perception Rank)/OAP-BPM 和基于 SVM 的排序算法。</p><p>推荐中使用较多的 Pointwise 方法是 LR、GBDT、SVM、FM 以及结合 DNN 的各种排序算法。</p><h1 id="PairWise-配对法">PairWise 配对法</h1><p>配对法的基本思路是对样本进行两两比较，构建偏序文档对，从比较中学习排序，因为对于一个查询关键字来说，最重要的其实不是针对某一个文档的相关性是否估计得准确，而是要能够正确估计一组文档之间的 “相对关系”。</p><p>PairWise方法的思想是将同一个query下多个不同doc之间进行两两组对，然后将&lt;doc, doc&gt;pair doc作为模型输入进行一个二分类的任务学习。PairWise首先将doc进行两两组对，然后比较doc与query的相关度大小，如果第一个doc的相关度大于第二个doc，则这对doc的标签设置为1否则为0。常用模型包括有RankNet、LambdaRank、LambdaMart等。</p><p>因此，Pairwise 的训练集样本从每一个 “关键字文档对” 变成了 “关键字文档文档配对”。也就是说，每一个数据样本其实是一个比较关系，当前一个文档比后一个文档相关排序更靠前的话，就是正例，否则便是负例，如下图。试想，有三个文档：A、B 和 C。完美的排序是 “B&gt;C&gt;A”。我们希望通过学习两两关系 “B&gt;C”、“B&gt;A” 和 “C&gt;A” 来重构 “B&gt;C&gt;A”。</p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230816-104719.jpg" alt="v2-3f03a6e52527d5992482cc3e3f075650_r" style="zoom: 50%;" /><p>这里面有几个非常关键的假设。换句话说，标注是一个困难的事情，难点在于：是否存能得到完美关系？是否能重构完美排序？</p><h2 id="Pairwise-方法存在的问题：">Pairwise 方法存在的问题：</h2><p>Pairwise 方法通过考虑两两文档之间的相关对顺序来进行排序，相比 PointWise 方法有明显改善。但 Pairwise 方法仍有如下问题：</p><ol><li>使用的==是两文档之间相关度的损失函数，而它和真正衡量排序效果的指标之间存在很大不同==，甚至可能是负相关的，如可能出现 Pairwise Loss 越来越低，但 NDCG 分数也越来越低的现象。</li><li>==只考虑了两个文档的先后顺序，且没有考虑文档在搜索列表中出现的位置==，导致最终排序效果并不理想。</li><li>==不同的查询，其相关文档数量差异很大==，转换为文档对之后，有的查询可能有几百对文档，有的可能只有几十个，这样不加均一化地在一起学习，模型会优先考虑文档对数量多的查询，减少这些查询的 loss，最终对机器学习的效果评价造成困难。</li><li>Pairwise 方法的训练样例是偏序文档对，它将对文档的排序转化为对不同文档与查询相关性大小关系的预测；因此，如果因某个文档相关性被预测错误，或文档对的两个文档相关性均被预测错误，则会影响与之关联的其它文档，进而引起连锁反应并影响最终排序结果。</li></ol><h2 id="数据输入和输出形式：-2">数据输入和输出形式：</h2><p>Pairwise方法是通过近似为分类问题解决排序问题，输入的单条样本为标签-文档对。</p><ol><li>对于一次查询的多个结果文档，组合任意两个文档形成文档对作为输入样本。即学习一个二分类器，对输入的一对文档对AB（Pairwise的由来），根据A相关性是否比B好，二分类器给出分类标签1或0。</li><li>对所有文档对进行分类，就可以得到一组偏序关系，从而构造文档全集的排序关系。</li><li>该类方法的原理是对给定的文档全集S，降低排序中的逆序文档对的个数来降低排序错误，从而达到优化排序结果的目的。</li></ol><ul><li><strong>代表算法：</strong></li></ul><p>基于 SVM 的 Ranking SVM 算法、基于神经网络的 RankNet 算法和基于 Boosting 的 RankBoost 算法。</p><h1 id="ListWise-列表法">ListWise 列表法</h1><p><em><strong>相对于尝试学习每一个样本是否相关或者两个文档的相对比较关系，列表法排序学习的基本思路是尝试直接优化像 NDCG（Normalized Discounted Cumulative Gain）这样的指标，从而能够学习到最佳排序结果。</strong></em></p><blockquote><p>列表法的相关研究有很大一部分来自于微软研究院，这其中著名的作者就有微软亚州院的徐君、李航、刘铁岩等人，以及来自微软西雅图的研究院的著名<strong>排序算法 LambdaMART</strong> 以及 Bing 搜索引擎的主导人克里斯托弗·博格斯（Christopher J.C. Burges）。</p></blockquote><p>列表法排序学习有两种基本思路。</p><ol><li>第一种称为 Measure-specific，就是直接针对 NDCG 这样的指标进行优化。<br>目的简单明了，用什么做衡量标准，就优化什么目标。</li><li>第二种称为 Non-measure specific，则是根据一个已经知道的最优排序，尝试重建这个顺序，然后来衡量这中间的差异。</li></ol><h2 id="Measure-specific">Measure-specific</h2><p>先来看看<em><strong>直接优化排序指标</strong></em>的难点和核心在什么地方。</p><ul><li>难点在于，希望能够优化 NDCG 指标这样的 “理想” 很美好，但是现实却很残酷。<br>NDCG、MAP 以及 AUC 这类排序标准，都是在数学的形式上的 “非连续”（Non-Continuous）和 “非可微分”（Non-Differentiable）。<br>而绝大多数的优化算法都是基于 “连续”（Continuous）和 “可微分”（Differentiable）函数的。因此，直接优化难度比较大。</li></ul><p>三种思路</p><ul><li><p>第一种方法是，既然直接优化有难度，那就找一个近似 NDCG 的另外一种指标。而这种替代的指标是 “连续” 和 “可微分” 的 。只要我们建立这个替代指标和 NDCG 之间的近似关系，那么就能够通过优化这个替代指标达到逼近优化 NDCG 的目的。这类的代表性算法的有 SoftRank 和 AppRank。</p></li><li><p>第二种方法是，尝试从数学的形式上写出一个 NDCG 等指标的 “边界”（Bound），然后优化这个边界。比如，如果推导出一个上界，那就可以通过最小化这个上界来优化 NDCG。这类的代表性算法有 SVM-MAP 和 SVM-NDCG。</p></li><li><p>第三种方法则是，希望从优化算法上下手，看是否能够设计出复杂的优化算法来达到优化 NDCG 等指标的目的。对于这类算法来说，算法要求的目标函数可以是 “非连续” 和 “非可微分” 的。这类的代表性算法有 AdaRank 和 RankGP</p></li></ul><h2 id="Non-measure-specific">Non-measure specific</h2><p>这种思路的主要假设是，已经知道了针对某个搜索关键字的完美排序，那么怎么通过学习算法来逼近这个完美排序。我们希望缩小预测排序和完美排序之间的差距。值得注意的是，在这种思路的讨论中，优化 NDCG 等排序的指标并不是主要目的。这里面的代表有 ListNet 和 ListMLE。</p><ul><li><p>Listwise 方法存在的问题：</p><blockquote><p>列表法相较单点法和配对法针对排序问题的模型设计更加自然，解决了排序应该基于 query 和 position 问题。</p><p>但列表法也存在一些问题：一些算法需要基于排列来计算 loss，从而使得训练复杂度较高，如 ListNet 和 BoltzRank。此外，位置信息并没有在 loss 中得到充分利用，可以考虑在 ListNet 和 ListMLE 的 loss 中引入位置折扣因子</p></blockquote></li><li><p>基于列的学习排序(Listwise Approach)是将qid=10对应的所有查询文档作为一个实例进行训练,即一个查询及其对应的所有搜索结果评分作为一个实例进行训练;训练得到一个最后评分函数F后,test测试集中一个新的查询,函数F对每一个文档进行打分,之后按照得分顺序由高到低排序即是对应搜索的结果.</p></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230816-104826.jpg" alt="v2-0bc0cd36af20a0d781b49755368332ca_r"></p><ul><li>代表算法：</li></ul><p>基于 Measure-specific 的 SoftRank、SVM-MAP、SoftRank、LambdaRank、LambdaMART，基于 Non-measure specific 的 ListNet、ListMLE、BoltzRank。</p><p>推荐中使用较多的 Listwise 方法是 LambdaMART。</p><h1 id="评价">评价</h1><p>ListWise方法相比于pariwise和pointwise往往更加直接，它专注于自己的目标和任务，直接对文档排序结果进行优化，因此往往效果也是最好的。</p><table><thead><tr><th></th><th>Point wise</th><th>pairwise</th><th>list wise</th></tr></thead><tbody><tr><td>思想</td><td>Pointwise排序是将训练集中的每个item看作一个样本获取rank函数，主要解决方法是把分类问题转换为单个item的分类或回归问题。</td><td>Pairwise排序是将同一个查询中两个不同的item作为一个样本，主要思想是把rank问题转换为二值分类问题</td><td>Listwise排序是将整个item序列看作一个样本，通过直接优化信息检索的评价方法和定义损失函数两种方法实现。</td></tr><tr><td>算法</td><td>1、基于回归的算法；<br />2、基于分类的算法；<br />3、基于有序回归的算法</td><td>基于二分类的算法</td><td>直接基于评价指标的算法<br />非直接基于评价指标的算法</td></tr><tr><td>缺点</td><td>ranking 追求的是排序结果，并不要求精确打分，只要有相对打分即可。<br />pointwise 类方法并没有考虑同一个 query 对应的 docs 间的内部依赖性。一方面，导致输入空间内的样本不是 IID 的，违反了 ML 的基本假设，另一方面，没有充分利用这种样本间的结构性。<br />其次，当不同 query 对应不同数量的 docs 时，整体 loss 将会被对应 docs 数量大的 query 组所支配，前面说过应该每组 query 都是等价的。损失函数也没有 model 到预测排序中的位置信息。因此，损失函数可能无意的过多强调那些不重要的 docs，即那些排序在后面对用户体验影响小的 doc。</td><td>1、如果人工标注包含多有序类别，那么转化成 pairwise preference 时必定会损失掉一些更细粒度的相关度标注信息。<br />2、doc pair 的数量将是 doc 数量的二次，从而 pointwise 类方法就存在的 query 间 doc 数量的不平衡性将在 pairwise 类方法中进一步放大。<br />3、pairwise 类方法相对 pointwise 类方法对噪声标注更敏感，即一个错误标注会引起多个 doc pair 标注错误。<br />4、pairwise 类方法仅考虑了 doc pair 的相对位置，损失函数还是没有 model 到预测排序中的位置信息。<br />5、pairwise 类方法也没有考虑同一个 query 对应的 doc pair 间的内部依赖性，即输入空间内的样本并不是 IID 的，违反了 ML 的基本假设，并且也没有充分利用这种样本间的结构性。</td><td>listwise 类相较 pointwise、pairwise 对 ranking 的 model 更自然，解决了 ranking 应该基于 query 和 position 问题。<br />listwise 类存在的主要缺陷是：<br />一些 ranking 算法需要基于排列来计算 loss，从而使得训练复杂度较高，如 ListNet和 BoltzRank。<br />此外，位置信息并没有在 loss 中得到充分利用，可以考虑在 ListNet 和 ListMLE 的 loss 中引入位置折扣因子。</td></tr><tr><td>优点</td><td>1、输入空间中样本是单个 doc（和对应 query）构成的特征向量；<br />2、输出空间中样本是单个 doc（和对应 query）的相关度；<br />3、假设空间中样本是打分函数；损失函数评估单个 doc 的预测得分和真实得分之间差异。</td><td>输入空间中样本是（同一 query 对应的）两个 doc（和对应 query）构成的两个特征向量；<br />输出空间中样本是 pairwise preference；假设空间中样本是二变量函数；损失函数评估 doc pair 的预测 preference 和真实 preference 之间差异。</td><td>输入空间中样本是（同一 query 对应的）所有 doc（与对应的 query）构成的多个特征向量（列表）；<br />输出空间中样本是这些 doc（和对应 query）的相关度排序列表或者排列；<br />假设空间中样本是多变量函数，对于 docs 得到其排列，实践中，通常是一个打分函数，根据打分函数对所有 docs 的打分进行排序得到 docs 相关度的排列；损失函数分成两类，一类是直接和评价指标相关的，还有一类不是直接相关的。</td></tr></tbody></table><h1 id="参考">参考</h1><ul><li>转载</li></ul><ol><li><a href="https://zhuanlan.zhihu.com/p/111636490">Learning to Rank： pointwise 、 pairwise 、 listwise</a></li><li><a href="https://everdark.github.io/k9/notebooks/ml/learning_to_rank/learning_to_rank.html">Introduction to Learning-to-Rank</a></li><li><a href="https://www.baidu.com/link?url=eTmEKqnuaVZEADp449zPJ2ape2WhtLcb15Z2qYhgDak1eqs5-YV1sg5s4PQ6aRoLJK39WdUIjvejdoh-A9Wps10JQJOHENZCIHfr-ooIK8i&amp;wd=&amp;eqid=dd34397e0016c6be00000003649aba54">【推荐】<em>pairwise</em>、<em>pointwise</em> 、 <em>listwise</em>算法是什么?怎么…</a></li><li><a href="https://zhuanlan.zhihu.com/p/450959441">排序学习-2.排序学习方法分类 - 知乎 (zhihu.com)</a></li><li><a href="https://zhuanlan.zhihu.com/p/337478373">推荐- Point wise、pairwise及list wise的比较 - 知乎 (zhihu.com)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 排序学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LTR </tag>
            
            <tag> 排序学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora代码块-添加折叠展开按钮</title>
      <link href="/posts/20230613222744-8b05256b.html"/>
      <url>/posts/20230613222744-8b05256b.html</url>
      
        <content type="html"><![CDATA[<p>Typora 是一款由 Abner Lee 开发的<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835?fromModule=lemma_inlink">轻量级</a> Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969?fromModule=lemma_inlink">源代码</a>和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p><p>一个遗憾是不支持，代码块的折叠，当代码块中代码行数过多，会显得臃肿</p><h1 id="代码块添加折叠按钮">代码块添加折叠按钮</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230613222824.png" alt="image-20230613220158516"></p><p>Typora实际就是一个浏览器</p><p>通过修改Typora安装目录如下 的  frame.js文件，来实现这个功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\NotesRead\Typora\resources\appsrc\window\frame.js</span><br></pre></td></tr></table></figure><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230613222824.png" alt="image-20230613215619674"></p><ul><li>在文件  frame.js的末尾添加如下代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> content = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;content&quot;</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h2 id="1-在单个代码块添加代码收缩按钮">1. 在单个代码块添加代码收缩按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加代码收缩功能</span></span><br><span class="line">content.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">codeDivs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">div, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (div.<span class="property">firstChild</span>.<span class="property">nodeName</span> != <span class="string">&quot;BUTTON&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">button.<span class="property">className</span> = <span class="string">&quot;contract-code-button&quot;</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">button.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (div.<span class="property">style</span>.<span class="property">height</span> != <span class="string">&quot;2.9em&quot;</span>) &#123;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码展开&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;2.9em&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">div.<span class="title function_">insertBefore</span>(button, div.<span class="property">firstChild</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-添加收缩文件全部代码块按钮">2.添加收缩文件全部代码块按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加收缩全部按钮</span></span><br><span class="line"><span class="keyword">var</span> isAdd = <span class="literal">false</span>;</span><br><span class="line">content.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isAdd) &#123;</span><br><span class="line"><span class="keyword">var</span> footer = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;footer&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部收缩按钮</span></span><br><span class="line"><span class="keyword">var</span> contractButton = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">contractButton.<span class="property">innerText</span> = <span class="string">&quot;全部收缩&quot;</span>;</span><br><span class="line">contractButton.<span class="property">name</span> = <span class="string">&quot;contarctAllButton&quot;</span>;</span><br><span class="line">contractButton.<span class="property">className</span> = <span class="string">&quot;contract-all-button&quot;</span>;</span><br><span class="line">contractButton.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;contract-code-button&quot;</span>);</span><br><span class="line">buttons.<span class="title function_">forEach</span>(<span class="function">(<span class="params">button, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> div = button.<span class="property">parentNode</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码展开&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;2.9em&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部展开按钮</span></span><br><span class="line"><span class="keyword">var</span> expandButton = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">expandButton.<span class="property">innerText</span> = <span class="string">&quot;全部展开&quot;</span>;</span><br><span class="line">expandButton.<span class="property">name</span> = <span class="string">&quot;expandAllButton&quot;</span>;</span><br><span class="line">expandButton.<span class="property">className</span> = <span class="string">&quot;expand-all-button&quot;</span>;</span><br><span class="line">expandButton.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;contract-code-button&quot;</span>);</span><br><span class="line">buttons.<span class="title function_">forEach</span>(<span class="function">(<span class="params">button, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> div = button.<span class="property">parentNode</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer.<span class="title function_">append</span>(contractButton);</span><br><span class="line">footer.<span class="title function_">append</span>(expandButton);</span><br><span class="line">isAdd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1 id="实现效果">实现效果</h1><ol><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221127.png" alt="image-20230625221126253"><br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221323.png" alt="image-20230625221322980"></p></li><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221247.png" alt="image-20230625221247195"></p></li></ol><h1 id="参考">参考</h1><ol><li><a href="https://baike.baidu.com/item/Typora/59397163?fr=aladdin">Typora</a></li><li><a href="https://www.baidu.com/link?url=vi5U5lv00bECq-fkX5mqrhd7uQJ53z1W6CKvh4ZGmMS&amp;wd=&amp;eqid=960a248d0007b0710000000364886a64">Typora官方中文站</a></li><li><a href="https://blog.csdn.net/qq_41259552/article/details/107892376">CSDN-jo尼jo斯达博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客——安装、使用和美化教程</title>
      <link href="/posts/20230524225022-e42e2b5f.html"/>
      <url>/posts/20230524225022-e42e2b5f.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo安装">hexo安装</h1><ul><li>参考官网：<a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a></li><li>初学者可配置部署到GithubPages</li></ul><h1 id="hexo博客基本教程">hexo博客基本教程</h1><p>三步</p><ol><li>写文章</li><li>生成静态文件</li><li>部署</li></ol><h2 id="写博客-发布">写博客+发布</h2><p>文章yaml  配置，格式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"> <span class="bullet">-</span> [<span class="string">软件</span>]</span><br><span class="line"> <span class="bullet">-</span> [<span class="string">软件</span>,<span class="string">PC软件</span>]</span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"> <span class="bullet">-</span> [<span class="string">markdown笔记</span>]</span><br><span class="line"> <span class="bullet">-</span> [<span class="string">Typora</span>]</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#########################</span></span><br><span class="line"> <span class="string">tag</span></span><br><span class="line"><span class="string">用法：</span></span><br><span class="line"></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">456</span></span><br><span class="line"><span class="attr">tags:</span> [<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line"><span class="string">多标签写法，这2种都是一样的效果，用哪个都可以，建议使用列表[]式，直观清晰。</span></span><br><span class="line"></span><br><span class="line"><span class="string">categories</span></span><br><span class="line"><span class="comment"># 这是默认的写法，给文章添加一个分类。</span></span><br><span class="line"><span class="attr">categories:</span> <span class="number">123</span></span><br><span class="line"><span class="comment"># 这会将文章分类123/456子分类目录下。</span></span><br><span class="line"><span class="attr">categories:</span> [<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line"><span class="string">这会将文章分类到123/456子分类目录下。</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">   <span class="bullet">-</span> <span class="number">456</span></span><br><span class="line"><span class="string">多分类写法，文章被分类到123、456以及123的自分类789这3个分类下面，官方指定写法。</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line">   <span class="bullet">-</span> [<span class="number">123</span>]</span><br><span class="line">   <span class="bullet">-</span> [<span class="number">456</span>]</span><br><span class="line">   <span class="bullet">-</span> [<span class="number">123</span>, <span class="number">789</span>]</span><br></pre></td></tr></table></figure><h3 id="流程">流程</h3><ol><li><p>打开命令行工具，进入安装目录</p></li><li><p>执行命令  <code>hexo new aarticle_name</code></p></li><li><p>编辑文章</p></li><li><p>创建静态文件以及发布</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 先清理本地静态文件</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line"># 会在文章yaml中，生成abbrlink</span><br><span class="line">hexo g</span><br><span class="line"># 本地查看博客</span><br><span class="line">hexo s</span><br><span class="line"># hexo 预览草稿的命令</span><br><span class="line">hexo s --draft</span><br><span class="line"># 发布</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ol><h3 id="举例">举例</h3><ol><li><p>进入博客目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PS D:\NotesRead\JLChenBlog\cjlBlog&gt; ls -n</span><br><span class="line">.deploy_git</span><br><span class="line">.github</span><br><span class="line">node_modules</span><br><span class="line">public</span><br><span class="line">scaffolds</span><br><span class="line">source</span><br><span class="line">themes</span><br><span class="line">.npmignore</span><br><span class="line">baidu_verify_codeva-IM1t1kJq3P.html</span><br><span class="line">db.json</span><br><span class="line">package-lock.json</span><br><span class="line">package.json</span><br><span class="line">upPages.js</span><br><span class="line">_config.butterfly.yml</span><br><span class="line">_config.landscape.yml</span><br><span class="line">_config.yml</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PS D:\NotesRead\JLChenBlog\cjlBlog&gt; hexo new Shell函数返回值详解</span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO</span><br><span class="line">  ===================================================================</span><br><span class="line">      #####  #    # ##### ##### ###### #####  ###### #      #   #</span><br><span class="line">      #    # #    #   #     #   #      #    # #      #       # #</span><br><span class="line">      #####  #    #   #     #   #####  #    # #####  #        #</span><br><span class="line">      #    # #    #   #     #   #      #####  #      #        #</span><br><span class="line">      #    # #    #   #     #   #      #   #  #      #        #</span><br><span class="line">      #####   ####    #     #   ###### #    # #      ######   #</span><br><span class="line">                            4.7.0</span><br><span class="line">  ===================================================================</span><br><span class="line">INFO  Created: D:\NotesRead\JLChenBlog\cjlBlog\source\_posts\Shell函数返回值详解.md</span><br></pre></td></tr></table></figure></li><li><p>编辑文章</p></li><li><p>建议发布前，先本地查看一下<br><code>D:\NotesRead\JLChenBlog\cjlBlog&gt; hexo c;hexo g;hexo s;</code></p></li><li><p>发布<br><code> D:\NotesRead\JLChenBlog\cjlBlog&gt; hexo d</code></p></li></ol><h2 id="写草稿">写草稿</h2><p><code>hexo new draft </code></p><h2 id="发布草稿文章">发布草稿文章</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo p draft_article_Name</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="博客发布后">博客发布后</h2><p>hexo  hexo g 渲染之后，会在安装目录生成一个 <code>public</code>文件夹</p><ol><li>会把主题文件夹<code>source\js</code>  复制到该 文件夹</li><li>渲染文档生成各目录文章的<code>html</code>网页, robots.txt  保存到 <code>public</code></li><li>生成<code>sitwmap.xml，</code></li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> D:\NotesRead\JLChenBlog\cjlBlog&gt; <span class="built_in">ls</span> .\public\ <span class="literal">-n</span></span><br><span class="line">.github</span><br><span class="line">about</span><br><span class="line">archives</span><br><span class="line">categories</span><br><span class="line">css</span><br><span class="line">Gallery</span><br><span class="line">img</span><br><span class="line">js</span><br><span class="line">link</span><br><span class="line">movies</span><br><span class="line">music</span><br><span class="line">posts</span><br><span class="line">tags</span><br><span class="line">baidusitemap.xml</span><br><span class="line">baidu_urls.txt</span><br><span class="line">baidu_verify_codeva<span class="literal">-IM1t1kJq3P</span>.html</span><br><span class="line">googled04202478301504d.html</span><br><span class="line">index.html</span><br><span class="line">robots.txt</span><br><span class="line">search.xml</span><br><span class="line">sitemap.xml</span><br></pre></td></tr></table></figure><h2 id="常用命令详解">常用命令详解</h2><p>更多请查看<a href="https://hexo.io/api/">API | Hexo</a></p><h3 id="new">new</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 <code>layout</code> 的话，默认使用 <a href="https://hexo.io/zh-cn/docs/configuration">_config.yml</a> 中的 <code>default_layout</code> 参数代替。如果标题包含空格的话，请使用引号括起来。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new &quot;post title with whitespace&quot;</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--path</code></td><td style="text-align:left">自定义新文章的路径</td></tr><tr><td style="text-align:left"><code>-r</code>, <code>--replace</code></td><td style="text-align:left">如果存在同名文章，将其替换</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--slug</code></td><td style="text-align:left">文章的 Slug，作为新文章的文件名和发布后的 URL</td></tr></tbody></table><p>默认情况下，Hexo 会使用文章的标题来决定文章文件的路径。对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件。你可以使用 <code>--path</code> 参数来覆盖上述行为、自行决定文件的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me &quot;About me&quot;</span><br></pre></td></tr></table></figure><p>以上命令会创建一个 <code>source/about/me.md</code> 文件，同时 Front Matter 中的 title 为 <code>&quot;About me&quot;</code></p><p>注意！title 是必须指定的！如果你这么做并不能达到你的目的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page --path about/me</span><br></pre></td></tr></table></figure><p>此时 Hexo 会创建 <code>source/_posts/about/me.md</code>，同时 <code>me.md</code> 的 Front Matter 中的 title 为 <code>&quot;page&quot;</code>。这是因为在上述命令中，hexo-cli 将 <code>page</code> 视为指定文章的标题、并采用默认的 <code>layout</code>。</p><h3 id="generate">generate</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>生成静态文件。同时会在文章yaml中，生成abbrlink</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-d</code>, <code>--deploy</code></td><td style="text-align:left">文件生成后立即部署网站</td></tr><tr><td style="text-align:left"><code>-w</code>, <code>--watch</code></td><td style="text-align:left">监视文件变动</td></tr><tr><td style="text-align:left"><code>-b</code>, <code>--bail</code></td><td style="text-align:left">生成过程中如果发生任何未处理的异常则抛出异常</td></tr><tr><td style="text-align:left"><code>-f</code>, <code>--force</code></td><td style="text-align:left">强制重新生成文件 Hexo 引入了差分机制，如果 <code>public</code> 目录存在，那么 <code>hexo g</code> 只会重新生成改动的文件。 使用该参数的效果接近 <code>hexo clean &amp;&amp; hexo generate</code></td></tr><tr><td style="text-align:left"><code>-c</code>, <code>--concurrency</code></td><td style="text-align:left">最大同时生成文件的数量，默认无限制</td></tr></tbody></table><p>该命令可以简写为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="publish">publish</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><h3 id="server">server</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code>。</p><table><thead><tr><th style="text-align:left">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-p</code>, <code>--port</code></td><td style="text-align:left">重设端口</td></tr><tr><td style="text-align:left"><code>-s</code>, <code>--static</code></td><td style="text-align:left">只使用静态文件</td></tr><tr><td style="text-align:left"><code>-l</code>, <code>--log</code></td><td style="text-align:left">启动日记记录，使用覆盖记录格式</td></tr></tbody></table><h3 id="deploy">deploy</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>部署网站。</p><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>-g</code>, <code>--generate</code></td><td style="text-align:left">部署之前预先生成静态文件</td></tr></tbody></table><p>该命令可以简写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><h1 id="关于写博客的一些问题">关于写博客的一些问题</h1><h2 id="Tags-和Categories的主要区别">Tags 和Categories的主要区别</h2><p>每一篇文章都需要一个category，而Tags 是可选的，以下是Tags 和Categories的主要区别：</p><ol><li>Categories是分层的，而Tags 标签是不分层的。基本上，这意味着Categories可以有一个父类目和子类目。但是对于Tags 标签来说，没有任何父子关系；每个标签都是一个100%独立的实体。</li><li><strong>Categories应该有广泛的主题，适用于许多不同的文章，</strong><br><em>而Tags 通常是那篇文章包含的“更具体和独特的”实际内容。</em></li></ol><p>例如，一篇关于芝加哥公牛队篮球运动员迈克尔·乔丹的WordPress文章，其标签和Categories示例如下：</p><p>（1）Categories：篮球（broad广泛）</p><p>（2）Tags 标签：Michael Jordan（迈克尔·乔丹），Chicago Bulls芝加哥公牛队（仅限于post）</p><h2 id="文章中使用html，引入js">文章中使用html，引入js</h2><p>js存放目录应为 <code>D:\NotesRead\JLChenBlog\cjlBlog\themes\butterfly\source\js</code></p><p>主题目录<code>source\js</code></p><h1 id="进一步折腾">进一步折腾</h1><h2 id="hexo美化">hexo美化</h2><p>hexo美化，使用主题</p><p>本博客使用BUtterfly主题</p><p>美化教程参考<a href="https://butterfly.js.org/">BUtterfly主题官网</a></p><h2 id="评论系统">评论系统</h2><p><a href="https://giscus.app/zh-CN">giscus</a></p><p><a href="https://butterfly.js.org/posts/ceeb73f/?highlight=giscus#%E8%A9%95%E8%AB%96">Butterfly 安裝文檔(四) 主題配置-2 | Butterfly</a></p><h1 id="参考">参考</h1><ol><li><a href="https://hexo.io/zh-cn/docs/index.html">文档 | Hexo</a></li><li><a href="https://butterfly.js.org/">butterfly</a></li><li><a href="https://blog.csdn.net/weixin_46267040/article/details/125369571">https://blog.csdn.net/weixin_46267040/article/details/125369571</a></li><li><a href="https://connor-sun.github.io/posts/38835.html">Typora+PicGo-Core+时间戳重命名 - Connor</a></li><li><a href="https://giscus.app/zh-CN">giscus</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统评价指标</title>
      <link href="/posts/20230410101041-c39f21a.html"/>
      <url>/posts/20230410101041-c39f21a.html</url>
      
        <content type="html"><![CDATA[<h2 id="Precision">Precision</h2><ul><li>精确率，又称查准率，指预测为正样本中真正为正样本的比例，即 TP / (TP + FP)。</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230410175729" alt=" 精准率、召回率_精确率召回率 "></p><h2 id="Recall">Recall</h2><p>召回率，又称查全率，指所有真实样本中被正确预测为正样本的比例，即 TP / (TP + FN)</p><h2 id="F1-Score">F1-Score</h2><h2 id="HR">HR</h2><p>HR指标（Hit Ratio）  衡量了在前N个推荐结果中命中用户实际感兴趣的物品数量的比例。</p><p>HR指标可以通过计算命中数除以总的测试样本数来得到。</p><ul><li><p>HR指标的优点是直观，易于理解和计算，并且能够反映推荐模型的准确性。它强调了推荐模型的“召回率”，即推荐出用户有兴趣的物品数量，在实际应用中能够有效地判断模型的好坏。</p></li><li><p>然而，HR指标也有一些缺点。</p><ol><li>首先，它不能考虑物品的排名顺序以及用户真正的兴趣程度，因此很难完全评估推荐系统的性能。</li><li>其次，它只关注了用户感兴趣的物品是否被推荐，但没有考虑其他因素，例如物品的多样性、新颖性以及用户的满意度等，</li></ol><p>因此需要结合其他指标一起使用。</p></li></ul><h2 id="NDCG-Normalized-Discounted-cumulative-gain-归一化折损累计增益">NDCG (Normalized Discounted cumulative gain  归一化折损累计增益)</h2><h3 id="增益（Gain）">增益（Gain）</h3><p>表示列表中每一个item的相关性分数。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>G</mi><mi>a</mi><mi>i</mi><mi>n</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>=</mo><mi>r</mi><mi>e</mi><mi>l</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Gain(i) = rel(i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">G</span><span class="mord mathnormal">ain</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">re</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></span></p><p>在推荐系统中，推荐列表中第i�个物品是用户喜欢的，则rel_{i}=1，否则reli=0</p><p><strong>累计增益*<em>（CG）*</em></strong></p><p>CG，cumulative gain，是DCG的前身，只考虑到了相关性的关联程度，没有考虑到位置的因素。它是一个搜素结果相关性分数的总和。指定位置p上的CG为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>C</mi><msub><mi>G</mi><mi>p</mi></msub><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>p</mi></munderover><mtext> </mtext><mrow><mi>r</mi><mi>e</mi><msub><mi>l</mi><mi>i</mi></msub></mrow></mrow><annotation encoding="application/x-tex">CG_{p} = \sum_{i=1}^{p}\ {rel_{i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9762em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6985em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3471em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace"> </span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">re</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>折损累计增益（DCG）</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mi>C</mi><mi>G</mi><mi mathvariant="normal">@</mi><mi>K</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>K</mi></munderover><mfrac><mrow><mi>r</mi><mi>e</mi><msub><mi>l</mi><mi>i</mi></msub></mrow><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">DCG@K=\sum_{i=1}^{K}\frac{rel_{i}}{log_{2}(i+1)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">CG</span><span class="mord">@</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07153em;">K</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">re</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0197em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>DCG， Discounted 的CG，就是在每一个CG的结果上处以一个折损值，为什么要这么做呢？目的就是为了让排名越靠前的结果越能影响最后的结果。假设排序越往后，价值越低。到第i个位置的时候，它的价值是 1/log2(i+1)，那么第i个结果产生的效益就是 reli * 1/log2(i+1)，所以：</p><p><strong>归一化折损累计增益（NDCG）</strong></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>N</mi><mi>D</mi><mi>C</mi><msub><mi>G</mi><mi>u</mi></msub><mi mathvariant="normal">@</mi><mi>K</mi><mo>=</mo><mfrac><mrow><mi>D</mi><mi>C</mi><msub><mi>G</mi><mi>u</mi></msub><mi mathvariant="normal">@</mi><mi>K</mi></mrow><mrow><mi>I</mi><mi>D</mi><mi>C</mi><msub><mi>G</mi><mi>u</mi></msub></mrow></mfrac><mspace linebreak="newline"></mspace><mi>I</mi><mi>D</mi><mi>C</mi><mi>G</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi mathvariant="normal">∣</mi><mi>R</mi><mi>E</mi><mi>L</mi><mi mathvariant="normal">∣</mi></mrow></munderover><mfrac><mrow><msup><mn>2</mn><mrow><mi>r</mi><mi>e</mi><msub><mi>l</mi><mi>i</mi></msub></mrow></msup><mo>−</mo><mn>1</mn></mrow><mrow><mi>l</mi><mi>o</mi><msub><mi>g</mi><mn>2</mn></msub><mo stretchy="false">(</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></mfrac><mspace linebreak="newline"></mspace><mi>N</mi><mi>D</mi><mi>C</mi><mi>G</mi><mi mathvariant="normal">@</mi><mi>K</mi><mo>=</mo><mfrac><mrow><mi>N</mi><mi>D</mi><mi>C</mi><msub><mi>G</mi><mi>u</mi></msub><mi mathvariant="normal">@</mi><mi>K</mi></mrow><mrow><mo fence="true">∣</mo><mi>u</mi><mo fence="true">∣</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">NDCG_{u}@K=\frac{DCG_{u}@K}{IDCG_{u}}\\IDCG=\sum_{i=1}^{|REL|}{\frac{2^{rel_i}-1}{log_2(i+1)}}\\NDCG@K=\frac{NDCG_{u}@K}{\left | u \right |}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">@</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2074em;vertical-align:-0.836em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">@</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.836em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">CG</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.2387em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.961em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.386em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">∣</span><span class="mord mathnormal mtight" style="margin-right:0.05764em;">RE</span><span class="mord mathnormal mtight">L</span><span class="mord mtight">∣</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5261em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">re</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.0197em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal">CG</span><span class="mord">@</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.3074em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3714em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∣</span><span class="mord mathnormal">u</span><span class="mclose delimcenter" style="top:0em;">∣</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mord"><span class="mord mathnormal">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">@</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>NDCG， Normalized 的DCG，由于搜索结果随着检索词的不同，返回的数量是不一致的，而DCG是一个累加的值，没法针对两个不同的搜索结果进行比较，因此需要归一化处理，这里是除以IDCG。</p><ul><li>DCG能够对一个用户的推荐列表进行评价，如果用该指标评价某个推荐算法，需要对所有用户的推荐列表进行评价，由于用户真实列表长度不同，不同用户之间的DCG相比没有意义。所以要对不同用户的指标进行归一化，自然的想法就是计算每个用户真实列表的DCG分数，用IDCG表示，然后用每个用户的DCG与IDCG之比作为每个用户归一化后的分值，最后对每个用户取平均得到最终的分值，即NDCG。</li><li>其中REL表示将原始的召回集合R按照得分从大到小排序后的集合，将排序后的集合计算DCG得到IDCG。标准化后得到的NDCG是一个相对值，从而使得即使不同的用户之间可以进行比较。IDCG表示的是召回的集合中的item用户都喜欢的最理想情况。所以IDCG中的分子部分其实都是1。</li></ul><h2 id="MRR-平均倒数排名（Mean-Reciprocal-Rank）">MRR 平均倒数排名（Mean Reciprocal Rank）</h2><p>平均倒数排名（Mean Reciprocal Rank,MRR），该指标反应的是我们找到的这些item是否摆在用户更明显的位置，强调位置关系，顺序性。公式如下，N表示推荐次数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">p_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>表示用户真实访问的item在推荐列表中的位置，如果没在推荐序列中，则p为无穷大，1/p为0。</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>M</mi><mi>R</mi><mi>R</mi><mo>=</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><mfrac><mn>1</mn><msub><mi>p</mi><mi>i</mi></msub></mfrac></mrow><annotation encoding="application/x-tex">MRR=\frac{1}{N}\sum_{i=1}^{N}{\frac{1}{p_i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">MRR</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:3.106em;vertical-align:-1.2777em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></span></p><p>举个栗子：加入我们去top-5，推荐[1,2,3,4,5]这5个item，然后测试数据中对应的访问的item为3，则1/p=1/3</p><p>平均倒数排名（Mean Reciprocal Rank, MRR）是一个国际上通用的对搜索算法进行评价的机制。</p><p><strong>描述</strong></p><p>结果列表中，第一个结果匹配，分数为1，第二个匹配分数为0.5，第n个匹配分数为1/n，如果没有匹配的句子分数为0。最终的分数为所有得分之和，再求平均</p><p><strong>数学形式</strong></p><p>正确检索结果值在检索结果中的排名来评估检索系统的性能。</p><h2 id="ROC">ROC</h2><p>ROC（Receiver Operating Characteristic）曲线是一种常用于评估分类模型性能的指标, 描绘的是真正率和假正率之间的关系。下面逐步解析ROC评价指标。</p><ol><li><p>来源：<br>ROC曲线最早在二战中被用于接收器操作特性的分析，后来扩展到机器学习领域，用于评估二分类模型的性能。</p></li><li><p>具体含义：<br>ROC曲线是以真正例率（True Positive Rate，简称TPR）和假正例率（False Positive Rate，简称FPR）为坐标轴绘制的曲线。其中，</p><ul><li>TPR 是指在实际情况为正例的样本中，模型正确预测为正例的比例，计算公式为：TPR = TP / (TP + FN)，其中TP表示真正例数量，FN表示假反例数量。</li><li>FPR 是指在实际情况为反例的样本中，模型错误预测为正例的比例，计算公式为：FPR = FP / (FP + TN)，其中FP表示假正例数量，TN表示真反例数量。</li><li><blockquote><ol><li>TP (True Positive)：实际为正例的样本被正确地预测为正例的数量。</li><li>TN (True Negative)：实际为反例的样本被正确地预测为反例的数量。</li><li>FP (False Positive)：实际为反例的样本被错误地预测为正例的数量。</li><li>FN (False Negative)：实际为正例的样本被错误地预测为反例的数量。</li></ol><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/09/20230919-211306.png" alt="tp_TN"></p></blockquote></li></ul><p>ROC曲线展示了在不同分类阈值下，模型在TPR和FPR之间的权衡关系。曲线越靠近左上角，说明模型性能越好。</p></li><li><p>如何计算得到ROC：<br>计算ROC曲线需要先计算不同分类阈值下的TPR和FPR。具体步骤如下：<br>a. 首先，对模型预测结果按照概率值进行排序。<br>b. 从最小的概率阈值开始，将概率大于该阈值的样本划分为正例，其余样本划分为反例，并计算对应的TPR和FPR。<br>c. 逐渐增大概率阈值，重复步骤b，直至最大的概率阈值。<br>d. 将不同阈值下得到的TPR和FPR按顺序连线，即可得到ROC曲线。</p><p>在计算ROC曲线后，可以使用曲线下面积（Area Under Curve，简称AUC）来综合评估模型性能。AUC的取值范围在[0,1]之间，数值越接近1代表模型性能越好。</p></li></ol><h2 id="AUC">AUC</h2><p>AUC指标（Area Under Curve）是衡量分类模型预测准确性的一种指标。</p><p>在推荐系统中，AUC通常用于衡量排序模型的性能。AUC计算的是ROC曲线下面的面积，ROC（Receiver Operating Characteristic）曲线描绘的是真正率和假正率之间的关系。</p><p>在推荐系统中，可以将AUC视为模型对于一个用户和他没有行为的物品对的排序能力。具体来说，AUC计算了模型正确地将某个用户会喜欢的物品排在他不会喜欢的物品之前的概率。通常情况下，AUC的取值范围在0.5到1之间。一个好的排序模型应该具有高于0.5的AUC值。</p><p>AUC指标的优点是不受分类阈值的影响，因此它不仅适用于二分类问题，也适用于多分类问题。此外，AUC还可以有效地解决正负样本不均衡的问题，在实际应用中具有很高的实用性。</p><p>需要注意的是，尽管AUC是一个比较可靠的指标，但它也有一些缺点。例如，AUC无法判断模型产生的错误类型，如果一个模型都将负样本预测成正样本，其AUC可能很高，但实际上是一个很糟糕的模型。此外，AUC也无法区分不同的排序模型，因为两个模型具有相同的AUC并不意味着它们具有相同的性能。</p><h2 id="交叉验证">交叉验证</h2><h2 id="Spearman-correlation">Spearman correlation</h2><p>Spearman相关系数是一种用于度量两个变量之间的单调关系强度的统计方法。它不仅可以评估线性关系，还可以评估非线性关系。Spearman相关系数是通过对两个变量的排名进行比较来计算的，因此它也被称为秩相关系数。</p><p>Spearman相关系数的取值范围为-1到+1。其中，-1表示完全的负相关，+1表示完全的正相关，0表示没有线性相关关系。与Pearson相关系数不同，Spearman相关系数不依赖于变量是否符合正态分布，因此适用于更广泛的数据类型。</p><p>Spearman相关系数的计算步骤如下：</p><ol><li>对两个变量的观测值进行排序，并为每个观测值分配一个秩次。</li><li>计算两个变量的秩次差，即将一个变量的秩次减去另一个变量的秩次。</li><li>计算秩次差的平方和。</li><li>根据公式计算Spearman相关系数。</li></ol><p>Spearman相关系数可用于许多领域，如社会科学、医学研究、市场调查等。它可以帮助研究人员确定变量之间的关系强度，并揭示潜在的趋势和模式。此外，Spearman相关系数还可以作为其他统计分析方法的输入，如回归分析、因子分析等。</p><p>需要注意的是，Spearman相关系数只能度量变量之间的单调关系，而不能确定因果关系。此外，在处理缺失数据或存在异常值时，需要谨慎使用Spearman相关系数，并结合其他方法进行综合分析。</p><h2 id="参考">参考</h2><ol><li><a href="https://www.cnblogs.com/foghorn/p/15550353.html">推荐系统评价指标——（归一化折损累计增益）NDCG - foghorn - 博客园 (cnblogs.com)</a></li><li>[推荐系统常用指标（续）MRR、HR、MAP，Fscore - 知乎 (<a href="http://zhihu.com">zhihu.com</a>)](<a href="https://zhuanlan.zhihu.com/p/433081516#:~:text=%E5%B9%B3%E5%9D%87%E5%80%92%E6%95%B0%E6%8E%92%E5%90%8D%EF%BC%88Mean">https://zhuanlan.zhihu.com/p/433081516#:~:text=平均倒数排名（Mean</a> Reciprocal Rank%2CMRR），该指标反应的是我们找到的这些item是否摆在用户更明显的位置，强调位置关系，顺序性。,公式如下，N表示推荐次数， p_i 表示用户真实访问的item在推荐列表中的位置，如果没在推荐序列中，则p为无穷大，1%2Fp为0。)</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>probability</title>
      <link href="/posts/20230328101828-deae6e4b.html"/>
      <url>/posts/20230328101828-deae6e4b.html</url>
      
        <content type="html"><![CDATA[<h1 id="概率论">概率论</h1><ol><li>概率公式<br>事件A发生的概率为P(A)，则有：</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">P(A) = \frac{n(A)}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中，n(A)表示事件A包含的样本数，n表示样本空间中的样本数。</p><ol start="2"><li>乘法公式<br>多个事件同时发生的概率为各事件概率的乘积，即：</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A \cap B) = P(A) \cdot P(B|A)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span></span></p><p>其中，P(B|A)表示在事件A发生的条件下事件B发生的概率。</p><ol start="3"><li>加法公式<br>两个不相交事件A和B的并发生的概率为它们各自发生的概率之和，即：</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∪</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo><mo>+</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(A \cup B) = P(A) + P(B)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span></span></p><p>其中，A和B不相交，即A ∩ B = ∅。</p><h2 id="条件概率">条件概率</h2><p>对于等概率模型的情况下</p><p>条件概率公式<br>事件B在事件A发生的条件下发生的概率为P(B|A)，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(B|A) = \frac{P(A \cap B)}{P(A)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中，P(A ∩ B)表示事件A和事件B同时发生的概率。</p><h2 id="联合概率">联合概率</h2><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo>∩</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>=</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{aligned}P(A \cap B) &amp;= P(B \cap A) \\            &amp;= P(B|A) \cdot P(A) \\            &amp;= P(A|B) \cdot P(B)\end{aligned}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.5em;vertical-align:-2em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5em;"><span style="top:-4.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∩</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span><span style="top:-3.16em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span><span style="top:-1.66em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，P(A ∩ B)表示事件A和事件B同时发生的概率，P(B|A)表示在事件A发生的条件下事件B发生的概率，P(A)表示事件A发生的概率。</p><ul><li>联合概率的链式法则</li></ul><h2 id="全概率">全概率</h2><p>简单来说全概率公式就是联合概率中消除掉一个事件得到剩余事件的概率。消除掉的方法就是对这个事件的各个状态进行求和，如果被消除事件是一个连续值概率模型，就把求和符号换成积分。</p><p>全概率公式 对于一个试验，若它的样本空间S可以分解成若干个互不相交的事件A1、A2、…、An，则有：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(B) = \sum_{i=1}^{n} P(B|A_i) \cdot P(A_i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.9291em;vertical-align:-1.2777em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6514em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.2777em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></span></p><p>其中，P(Ai)表示事件Ai发生的概率，P(B|Ai)表示在事件Ai发生的条件下事件B发生的概率。</p><p>这么理解，全概率公式是用来求解事件B的概率的，在A 发生的每一种情况下，B发生，存在一个概率  就是P(B|A_i)  ，然后再乘以A_i发生的概率，然后求和就是B发生的概率了。<br>如果说，A没有一种情况发生，而B发生，这种情况，全概率公式的前提条件，S可以分解成若干个互不相交的事件A1、A2、…、An，这种情况就不成立了</p><p>或者说，A没有一种情况发生，而B发生的 概率是0，这种情况，全概率公式成立；这也说明了，B的发生是A的发生的结果，A不发生，B也不发生，无论A如何发生。<br>或者这样理解，对于A的所有取值，B的取值都有一个概率 ，这个概率的和就是B的概率了。</p><h2 id="贝叶斯定理">贝叶斯定理</h2><ol start="6"><li>贝叶斯公式 对于一个试验，若它的样本空间S可以分解成若干个互不相交的事件A1、A2、…、An，则有：</li></ol><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><mi>A</mi><mo stretchy="false">)</mo><mi>P</mi><mo stretchy="false">(</mo><mi>A</mi><mo stretchy="false">)</mo></mrow><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(A|B) = \frac{P(B|A)P(A)}{P(B)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.363em;vertical-align:-0.936em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord mathnormal">A</span><span class="mclose">)</span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">A</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.936em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><mi>B</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><mo stretchy="false">)</mo></mrow><mrow><munderover><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><mi>P</mi><mo stretchy="false">(</mo><mi>B</mi><mi mathvariant="normal">∣</mi><msub><mi>A</mi><mi>j</mi></msub><mo stretchy="false">)</mo><mo>⋅</mo><mi>P</mi><mo stretchy="false">(</mo><msub><mi>A</mi><mi>j</mi></msub><mo stretchy="false">)</mo></mrow></mfrac></mrow><annotation encoding="application/x-tex">P(A_i|B) = \frac{P(B|A_i) \cdot P(A_i)}{\sum_{j=1}^{n} P(B|A_j) \cdot P(A_j)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5571em;vertical-align:-1.1301em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.3057em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8043em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1301em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中，P(Ai|B)表示在事件B发生的条件下事件Ai发生的概率，P(B|Ai)表示在事件Ai发生的条件下事件B发生的概率，P(Ai)表示事件Ai发生的概率，分母是全概率公式的求和式。</p><p>​</p><h2 id="先验和后验">先验和后验</h2><blockquote><p>先验概率是 以全事件为背景下,A事件发生的概率，P(A|Ω) = P(A)</p><p>后验概率是 以新事件B为背景下,A事件发生的概率， P(A|B)</p><ul><li>全事件一般是统计获得的，所以称为先验概率，没有实验前的概率</li><li>新事件一般是实验，如试验B，此时的事件背景从全事件变成了B，该事件B可能对A的概率有影响，那么需要对A现在的概率进行一个修正，从P(A|Ω)变成 P(A|B)，</li><li><ol><li>所以称 P(A|B)为后验概率，也就是试验(事件B发生)后的概率</li><li>应该是假设B会发生 ,那么A发生的概率   如果是B发生以后A的概率 那不就成因果关系了么<br>这样考虑更全面</li></ol></li></ul></blockquote><h1 id="一些统计指标">一些统计指标</h1><h2 id="算术平均、几何平均、调和平均、平方平均、移动平均">算术平均、几何平均、调和平均、平方平均、移动平均</h2><p><a href="https://www.cnblogs.com/liuning8023/p/3525920.html">https://www.cnblogs.com/liuning8023/p/3525920.html</a></p><p>简单算术平均，它只是加权算术平均的一种特殊形式</p><p>都分简单和加权的形式</p><h2 id="方差、标准差、均方差、均方误差">方差、标准差、均方差、均方误差</h2><p><a href="https://www.lilinchao.com/archives/892.html">https://www.lilinchao.com/archives/892.html</a></p><h2 id="Pearson相关性分析-Pearson-Correlation-Analysis">Pearson相关性分析(Pearson Correlation Analysis)</h2><p><a href="https://mengte.online/archives/1864">https://mengte.online/archives/1864</a></p><h1 id="信息熵">信息熵</h1><p>信息量衡量的大小反应的是某个信息输入后，某个不确定性事件不确定性减小的大小，就是信息熵减小的大小，信息熵本身不衡量信息量的大小。</p><h2 id="KL散度">KL散度</h2><p><a href="https://lumingdong.cn/go/51si8y">《Algorithm for Non-negative Matrix Factorization》</a>中提出两种损失函数的定义方式，从而能够定量的比较矩阵 Vm×n 和矩阵 V^m×n 的近似程度 ：</p><p>以下是提取出的内容：</p><p>平方距离：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mrow><mo fence="true">∥</mo><mi>A</mi><mo>−</mo><mi>B</mi><mo fence="true">∥</mo></mrow><mn>2</mn></msup><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><msup><mrow><mo fence="true">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>−</mo><msub><mi>B</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo fence="true">)</mo></mrow><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\left \| A-B \right \|^2=\sum_{i,j}\left ( A_{i,j}-B_{i,j} \right )^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.204em;vertical-align:-0.25em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∥</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">∥</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.4638em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>KL散度：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mrow><mo fence="true">(</mo><mi>A</mi><mo>∥</mo><mi>B</mi><mo fence="true">)</mo></mrow><mo>=</mo><munder><mo>∑</mo><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></munder><mrow><mo fence="true">(</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mi>l</mi><mi>o</mi><mi>g</mi><mfrac><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><msub><mi>B</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mfrac><mo>−</mo><msub><mi>A</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>+</mo><msub><mi>B</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">D\left ( A\parallel B \right )=\sum_{i,j}\left ( A_{i,j}log\frac{A_{i,j}}{B_{i,j}}-A_{i,j}+B_{i,j} \right )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.8638em;vertical-align:-1.4138em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.05em;"><span style="top:-1.8723em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span style="top:-3.05em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.4138em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3603em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9721em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0502em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span></span></span></span></span></p><p>平方距离损失函数最小化问题：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>z</mi><mi>e</mi><mtext>  </mtext><msup><mrow><mo fence="true">∥</mo><mi>V</mi><mo>−</mo><mi>W</mi><mi>H</mi><mo fence="true">∥</mo></mrow><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mtext>  </mtext><mi>W</mi><mo>⩾</mo><mn>0</mn><mo separator="true">,</mo><mi>H</mi><mo>⩾</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix} minimize\; \left \| V-WH \right \|^2\\ s.t.\; W\geqslant 0,H\geqslant 0 \end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.514em;vertical-align:-1.007em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.507em;"><span style="top:-3.553em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">minimi</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">∥</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose delimcenter" style="top:0em;">∥</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.954em;"><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.353em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.007em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>KL散度损失函数最小化问题：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.16em" columnalign="center" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mi>i</mi><mi>m</mi><mi>i</mi><mi>z</mi><mi>e</mi><mtext>  </mtext><mi>D</mi><mrow><mo fence="true">(</mo><mi>V</mi><mo>∥</mo><mi>W</mi><mi>H</mi><mo fence="true">)</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>s</mi><mi mathvariant="normal">.</mi><mi>t</mi><mi mathvariant="normal">.</mi><mtext>  </mtext><mi>W</mi><mo>⩾</mo><mn>0</mn><mo separator="true">,</mo><mi>H</mi><mo>⩾</mo><mn>0</mn></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{matrix} minimize\; D\left ( V\parallel WH \right )\\ s.t.\; W\geqslant 0,H\geqslant 0 \end{matrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.4em;vertical-align:-0.95em;"></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">minimi</span><span class="mord mathnormal">ze</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∥</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="mord">.</span><span class="mord mathnormal">t</span><span class="mord">.</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.95em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>平方距离损失函数的参数更新规则：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mfrac><msub><mrow><mo fence="true">(</mo><mi>V</mi><msup><mi>H</mi><mi>T</mi></msup><mo fence="true">)</mo></mrow><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><msub><mrow><mo fence="true">(</mo><mi>W</mi><mi>H</mi><msup><mi>H</mi><mi>T</mi></msup><mo fence="true">)</mo></mrow><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex"> W_{i,k}=W_{i,k}\frac{\left ( VH^T \right )_{i,k}}{\left ( WHH^T \right )_{i,k}} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.8976em;vertical-align:-1.1218em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7758em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7673em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1864em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9258em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0864em;"><span style="top:-2.3003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5358em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1218em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>H</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>H</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mfrac><msub><mrow><mo fence="true">(</mo><msup><mi>W</mi><mi>T</mi></msup><mi>V</mi><mo fence="true">)</mo></mrow><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><msub><mrow><mo fence="true">(</mo><msup><mi>W</mi><mi>T</mi></msup><mi>W</mi><mi>H</mi><mo fence="true">)</mo></mrow><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub></mfrac></mrow><annotation encoding="application/x-tex">H_{k,j}=H_{k,j}\frac{\left ( W^TV \right )_{k,j}}{\left ( W^TWH \right )_{k,j}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.8976em;vertical-align:-1.1218em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.7758em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7673em;"><span style="top:-2.989em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1864em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.9258em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0864em;"><span style="top:-2.3003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.5358em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.1218em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>KL散度损失函数的参数更新规则：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>W</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mo>=</mo><msub><mi>W</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><mfrac><mrow><munder><mo>∑</mo><mi>u</mi></munder><msub><mi>H</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>u</mi></mrow></msub><msub><mi>V</mi><mrow><mi>i</mi><mo separator="true">,</mo><mi>u</mi></mrow></msub><mi mathvariant="normal">/</mi><msub><mrow><mo fence="true">(</mo><mi>W</mi><mi>H</mi><mo fence="true">)</mo></mrow><mrow><mi>i</mi><mo separator="true">,</mo><mi>u</mi></mrow></msub></mrow><mrow><munder><mo>∑</mo><mi>v</mi></munder><msub><mi>H</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>v</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">W_{i,k}=W_{i,k}\frac{\sum_{u}H_{k,u}V_{i,u}/\left ( WH \right )_{i,u}}{\sum_{v}H_{k,v}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5615em;vertical-align:-0.9857em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5758em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0017em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.8258em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0017em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9857em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>H</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo>=</mo><msub><mi>H</mi><mrow><mi>k</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mfrac><mrow><munder><mo>∑</mo><mi>u</mi></munder><msub><mi>W</mi><mrow><mi>u</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub><msub><mi>V</mi><mrow><mi>u</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mi mathvariant="normal">/</mi><msub><mrow><mo fence="true">(</mo><mi>W</mi><mi>H</mi><mo fence="true">)</mo></mrow><mrow><mi>u</mi><mo separator="true">,</mo><mi>j</mi></mrow></msub><mo stretchy="false">)</mo></mrow><mrow><munder><mo>∑</mo><mi>v</mi></munder><msub><mi>W</mi><mrow><mi>v</mi><mo separator="true">,</mo><mi>k</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">H_{k,j}=H_{k,j}\frac{\sum_{u}W_{u,k}V_{u,j}/\left ( WH \right )_{u,j})}{\sum_{v}W_{v,k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.5615em;vertical-align:-0.9857em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0813em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5758em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0017em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">v</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.8258em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0017em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2997em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.2222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord">/</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mord mathnormal" style="margin-right:0.08125em;">H</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.162em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mpunct mtight">,</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4358em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9857em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><strong>这里使用乘法更新规则主要是为了在计算的过程中保证非负性，而使用梯度下降其中的加减运算是无法保证非负性的，但其实上述的乘法更新规则与基于梯度下降的算法是等价的，这一点在论文中也有论证。</strong></p><p><strong>推荐系统中的 NMF 其实是一个基于非负矩阵分解的协同过滤算法，从形式上的看只是借用非负矩阵分解的乘法更新规则来保证隐向量的非负性，其他变化并不大。</strong></p><p>乘法更新规则主要用于保持非负性，并且该规则与基于梯度下降的算法等价，这一点已在论文中得到证明。</p><p>NMF（Non-negative Matrix Factorization）是推荐系统中一种基于非负矩阵分解的协同过滤算法。从表面上看，NMF只是借用了非负矩阵分解的乘法更新规则来确保隐向量的非负性，而其他方面变化不大。</p><p>在以上乘法更新规则中加入正则化项后，对于推荐系统的NMF，隐向量的更新方式可以写成如下形式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mtable rowspacing="0.25em" columnalign="right left" columnspacing="0em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>p</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>←</mo><msub><mi>p</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub><mo>⋅</mo><mfrac><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><msub><mi>I</mi><mi>u</mi></msub></mrow></munder><msub><mi>q</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub><mo>⋅</mo><msub><mi>r</mi><mrow><mi>u</mi><mi>i</mi></mrow></msub></mrow><mrow><munder><mo>∑</mo><mrow><mi>i</mi><mo>∈</mo><msub><mi>I</mi><mi>u</mi></msub></mrow></munder><msub><mi>q</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub><mo>⋅</mo><msub><mover accent="true"><mi>r</mi><mo>^</mo></mover><mrow><mi>u</mi><mi>i</mi></mrow></msub><mo>+</mo><msub><mi>λ</mi><mi>u</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>I</mi><mi>u</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>p</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub></mrow></mfrac></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><msub><mi>q</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mrow></mrow><mo>←</mo><msub><mi>q</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub><mo>⋅</mo><mfrac><mrow><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><msub><mi>U</mi><mi>i</mi></msub></mrow></munder><msub><mi>p</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub><mo>⋅</mo><msub><mi>r</mi><mrow><mi>u</mi><mi>i</mi></mrow></msub></mrow><mrow><munder><mo>∑</mo><mrow><mi>u</mi><mo>∈</mo><msub><mi>U</mi><mi>i</mi></msub></mrow></munder><msub><mi>p</mi><mrow><mi>u</mi><mi>f</mi></mrow></msub><mo>⋅</mo><msub><mover accent="true"><mi>r</mi><mo>^</mo></mover><mrow><mi>u</mi><mi>i</mi></mrow></msub><mo>+</mo><msub><mi>λ</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>U</mi><mi>i</mi></msub><mi mathvariant="normal">∣</mi><msub><mi>q</mi><mrow><mi>i</mi><mi>f</mi></mrow></msub></mrow></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding="application/x-tex">\begin{split}p_{uf} &amp;\leftarrow p_{uf} \cdot \frac{\sum_{i \in I_u} q_{if} \cdot r_{ui}}{\sum_{i \in I_u} q_{if} \cdot \hat{r}_{ui} + \lambda_u |I_u| p_{uf}} \\q_{if} &amp;\leftarrow q_{if} \cdot \frac{\sum_{u \in U_i} p_{uf} \cdot r_{ui}}{\sum_{u \in U_i} p_{uf} \cdot \hat{r}_{ui} + \lambda_i |U_i| q_{if}}\end{split}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.8512em;vertical-align:-2.6756em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1756em;"><span style="top:-5.1756em;"><span class="pstrut" style="height:3.5398em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.5398em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.6756em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1756em;"><span style="top:-5.1756em;"><span class="pstrut" style="height:3.5398em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5398em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0785em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0785em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7898em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.07847em;">I</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1645em;"><span style="top:-2.357em;margin-left:-0.0785em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0858em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.5398em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">←</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5398em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.109em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7898em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:0em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1786em;"><span style="top:-2.4003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mrel mtight">∈</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3281em;"><span style="top:-2.357em;margin-left:-0.109em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3998em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.0858em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.6756em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>其中，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>r</mi><mo>^</mo></mover><mrow><mi>u</mi><mi>i</mi></mrow></msub></mrow><annotation encoding="application/x-tex">\hat{r}_{ui}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以选择使用FunkSVD求法（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>r</mi><mo>^</mo></mover><mrow><mi>u</mi><mi>i</mi></mrow></msub><mo>=</mo><msubsup><mi>q</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">\hat{r}_{ui} = q_i^Tp_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4413em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>），也可以使用BiasSVD的求法（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mover accent="true"><mi>r</mi><mo>^</mo></mover><mrow><mi>u</mi><mi>i</mi></mrow></msub><mo>=</mo><mi>μ</mi><mo>+</mo><msub><mi>b</mi><mi>u</mi></msub><mo>+</mo><msub><mi>b</mi><mi>i</mi></msub><mo>+</mo><msubsup><mi>q</mi><mi>i</mi><mi>T</mi></msubsup><msub><mi>p</mi><mi>u</mi></msub></mrow><annotation encoding="application/x-tex">\hat{r}_{ui} = \mu + b_u + b_i + q_i^Tp_u</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6944em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="accent-body" style="left:-0.1944em;"><span class="mord">^</span></span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal">μ</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.1em;vertical-align:-0.2587em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8413em;"><span style="top:-2.4413em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2587em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">u</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>）。当然，也可以进一步改进为使用SVD++的求法。这些方法都可以应用于隐向量的更新过程中，以提高推荐系统的准确性和性能。</p><h1 id="参考">参考</h1><ol><li><a href="https://blog.csdn.net/tao_292/article/details/124883212">https://blog.csdn.net/tao_292/article/details/124883212</a></li><li><a href="https://zhuanlan.zhihu.com/p/26464206">如何理解先验概率与后验概率 - 昌硕的文章 - 知乎</a></li><li><a href="https://www.zhihu.com/question/274997106/answer/1055696026">信息熵越大，信息量到底是越大还是越小？ - 骚动的白米饭的回答 - 知乎</a></li><li><a href="https://www.jianshu.com/p/43318a3dc715">如何理解K-L散度（相对熵）</a></li><li><a href="https://lumingdong.cn/recommendation-algorithm-based-on-matrix-decomposition.html">基于矩阵分解的推荐算法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数学 </category>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统简述</title>
      <link href="/posts/20230310224218-66919c32.html"/>
      <url>/posts/20230310224218-66919c32.html</url>
      
        <content type="html"><![CDATA[<h1 id="推荐系统">推荐系统</h1><h2 id="什么是推荐">什么是推荐</h2><blockquote><ul><li>推荐是一种思维方式</li><li><ol><li>作为搜索的延申</li><li>作为广告的土壤</li><li>掌握信息传播主动权</li></ol></li><li>适用场景<ol><li>资源受限的信息过滤</li><li>导向性的信息展现</li><li>目的性的资源分配</li></ol></li><li></li></ul></blockquote><h2 id="解决问题">解决问题</h2><ol><li><p>信息过载</p></li><li><p>挖掘长尾</p><blockquote><ul><li><a href="https://baike.baidu.com/item/%E9%95%BF%E5%B0%BE/389156?fr=aladdin">长尾</a><br>是指那些原来不受到重视的销量小但种类多的产品或服务由于总量巨大，累积起来的总收益超过主流产品的现象。在互联网领域，长尾效应尤为显著。长尾术语也在统计学中被使用，通常应用在财产的分布和词汇。</li><li>帕雷托法则<br>向来被商业界视为铁律，其内涵认为企业界80%的业绩来自20%的产品</li></ul><p>数据、物品价值</p></blockquote></li><li><p>用户体验</p><blockquote><p>提升用户体验；帮助用户发现自己很难发现的兴趣点、商品……</p></blockquote></li></ol><h2 id="推荐系统的技术演进">推荐系统的技术演进</h2><blockquote><ol><li><p>早期论坛的打分系统；hacknews；reddit;</p></li><li><p>早期社交内容</p></li><li><p>早期电商内容</p></li><li><p>单一算法到多算法融合<br>基于内容的算法 ;( 文本相关性, 主题相关性)<br>基于行为的算法 ;( 协同过滤的变种，随机游走等其他行为类算法  )<br>结果融合；人工规则</p></li><li><p>引入机器学习模型</p><blockquote><p>启发式，无明确目标<br>相对静态，反应慢<br>考虑维度较少，个性化程度不足<br>纯手工，改进空间小</p></blockquote><blockquote><p>对齐明确目标，成熟的优化方法<br>时效性灵活，反映可快可慢特征维度丰富，个性化程度细腻<br>理论储备丰富，发展空间大</p></blockquote></li><li><p>深度学习</p><blockquote><ul><li>从浅层模型到深度模型</li><li><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309200210231" style="zoom:50%;" /></li></ul></blockquote></li></ol></blockquote><h2 id="推荐系统基本流程">推荐系统基本流程</h2><ol><li><h2 id="召回">召回</h2><blockquote><ul><li>协同过滤</li><li>内容相似召回</li><li>热门召回</li><li>……</li></ul></blockquote></li><li><h2 id="排序">排序</h2><blockquote><ul><li>机器学习</li><li>二分类算法</li><li>深度学习算法</li><li></li></ul></blockquote></li><li><h2 id="调整-重排">调整(重排)</h2><blockquote><ul><li>针对 具体场景</li></ul><hr><ul><li>去重</li><li>过滤，热门补充</li></ul></blockquote></li></ol><h3 id="召回-2">召回</h3><ul><li><p>一般召回路径</p><blockquote><ol><li>i2i</li><li>u2i</li><li>u2i2i</li><li>u2u2i</li><li>u2tag2i<br>泛化性好</li><li>u2***2i<br>基于图的算法</li></ol></blockquote></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230516165627.png" alt="image-20230516165625814"><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309155810040"></p><h3 id="排序-2">排序</h3><h3 id="调整">调整</h3><h2 id="通用推荐系统技术架构（数据流图）">通用推荐系统技术架构（数据流图）</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224422.png" alt="image-20230309161118965"></p><h1 id="推荐系统的方法">推荐系统的方法</h1><h2 id="Content-Based-基于内容的推荐系统">Content-Based   ; 基于内容的推荐系统</h2><ul><li>最早被使用的推荐算法，效果良好</li><li>给用户推荐之前喜欢的物品，相似的物品</li><li>u2i2i<br>u2tag2i</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309165128805"></p><h3 id="重点：相似度计算">重点：相似度计算</h3><ol><li>余弦相似度</li><li></li></ol><h3 id="优缺点">优缺点</h3><ul><li><p>优点</p><blockquote><ol><li>不需要其他用户的数据</li><li>能给具备独特口味的用户推荐</li><li>可以推荐最新的、冷门的物品</li><li>容易做推荐结果的解释</li></ol></blockquote></li><li><p>缺点</p><blockquote><ol><li>很难找到能表达物品的“标签”，有时候需要人工打标签</li><li>过于局限于自己的世界，无法挖掘出用户的潜在兴趣</li><li>新用户如果没有行为，没法做推荐  (<em><strong>==冷启动问题==</strong></em>)</li></ol></blockquote></li></ul><h2 id="Collaborative-Filtering-协同过滤">Collaborative-Filtering  ; 协同过滤</h2><ul><li><p>大类，一般也分为两种</p><blockquote><ul><li><blockquote><ol><li>Memory-based CF ; 基于数据统计（记忆）的协同过滤</li><li>Model-based CF ; 基于模型（参数学习）的协同过滤</li></ol></blockquote></li><li><blockquote><ul><li>基于用户的协同过滤<br>u2u2i</li><li>基于物品的协同过滤<br>u2i2i</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309175315079"></p></blockquote></li></ul></blockquote></li></ul><h3 id="example">example</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224422.png" alt="image-20230309171614207"></p><hr><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309171709127"></p><h2 id="CF-Content-based-混合推荐系统">CF+Content-based ;  混合推荐系统</h2><h1 id="推荐系统一般问题">推荐系统一般问题</h1><h2 id="冷启动问题">冷启动问题</h2><h1 id="实战应用考虑方法">实战应用考虑方法</h1><h2 id="多路召回融合排序">多路召回融合排序</h2><blockquote><ul><li>一般会使 用多个召回策略，互相弥补不足，效果更好，三个臭皮匠顶个诸葛亮。</li><li>每个策略之间毫不相关，一般可以编写并发多线程同时执行</li><li>问题:怎样将多个召回列表融合成一个有序列表?</li></ul></blockquote><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309171938088"></p><blockquote><ul><li><blockquote><p>举例，几种召回策略返回的列表(Item-ID、权重)分别为:</p><p>召回策略x:A0.9，B0.8,C0.7<br>召回策略Y:B0.6，C0.5，D0.4<br>召回策略Z∶C0.3，D0.2，E0.1</p></blockquote></li><li><p>策略:效果依次变好，按照成本进行选择</p></li></ul><p>1、按顺序展示:比如实时&gt;购买数据召回&gt;播放数据召回，则直接展示A、B、C、D、E</p><p>2、平均法:分母为召回策略个数，分子为权重加和，C为(0.7+0.5+0.3)/3，B为(0.8+0.6)/3，</p><p>3、加权平均:比如三种策略自己指定权重为0…4、0.3、0.2，则B的权重为(0.4<em>0.8+0.6</em>0.3+O*0.2)/(0.4+0.3+0.2)</p><p>4、动态加权法:计算x/Y/z三种召回策略的CTR，作为每天更新的动态加权</p><p>5、机器学习权重法:逻辑回归LR分类模型预先离线算好各种召回的权重，然后做加权召回</p></blockquote><h2 id="推荐系统-AB-Test">推荐系统  AB Test</h2><ul><li><p>定义</p><blockquote><ol><li>AB测试是一种向产品的不同受众展示同一内容的2个或多个变体，并比较哪个变体带来了更多转化的做法。</li><li>AB测试是转化率优化过程的重要方法之一，使用它来收集定性和定量的用户见解，来了解潜在客户并根据该数据优化转化渠道。</li></ol></blockquote></li><li><p>必要性</p><blockquote><ol><li>想要数据驱动，重点是做AB对比实验，然后模型策略、设计等不断的迭代更新;</li><li>进行低风险的修改，先在小流量测试，如果没有问题再调大流量;</li><li>实现数据统计上的重大改进，降低人工猜测、直觉决策的不确定性;</li><li>怎样证明自己做的好?工程开发职位和算法职位的重大区分，后者更能用对比数据说话</li></ol></blockquote></li></ul><h3 id="AB-Test基本架构">AB Test基本架构</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309174152009"></p><h3 id="ab测试中常见问题">ab测试中常见问题</h3><blockquote><ol><li>不要同时运行太多测试:<br>要确定测试的优先级，一起测试太多的元素很难确定哪个元素对测试的成功或失败影响最大。</li><li>实验的流量大小:<br>流量样本的数量过小，实验结论不能使人信服</li><li>测试持续时间不能太短:<br>运行测试时间过短会导致测试失败或产生不重要的结果</li><li>无法遵循迭代过程:<br>A/B测试是一个迭代过程，每个测试都基于先前测试的结果，不管当前成功或失败，都不要停止继续AB测试</li></ol></blockquote><h1 id="案例">案例</h1><h2 id="1-Netflix经典推荐系统架构">1. Netflix经典推荐系统架构</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309160440223"></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309160850977"></p><h1 id="智能推荐系统未来展望">智能推荐系统未来展望</h1><h2 id="CCF-C³活动第十八期：智能推荐与搜索，2023年3月30日周四（18-00-21-30），小红书北京举行">CCF C³活动第十八期：智能推荐与搜索，2023年3月30日周四（18:00-21:30），小红书北京举行</h2><h3 id="newbing-，AIGC-大模型的冲击">newbing  ，AIGC,  大模型的冲击</h3><ol><li>对于网站盈利，网站存活的影响</li><li>对于广告商认定广告有效程度的认定</li><li>智能推荐可能的更大的发展<ul><li>利用该大模型对于用户，心智捕捉更强的能力；能够真正做到智能推荐，给用户真正有用的推荐</li></ul></li><li>生成式的大模型，需要关注使用场景<ul><li>比如，风控领域，需要的是fact</li><li>适配大模型结合个人信息，个性化</li></ul></li><li>存疑，未来推荐、搜索的形态</li><li>过去的搜索推荐，都是基于用户点击行为驱动的算法分发模式，走向用户<br>行为加内容理解，双轮并驱的内容分发模式</li><li>搜推一体化</li></ol><h3 id="在智能信息检索方面，如何发现并去除用户反馈中的偏差">在智能信息检索方面，如何发现并去除用户反馈中的偏差</h3><ol><li><p>因果分析</p><blockquote><ul><li>假设；因果图</li></ul></blockquote><blockquote><p>总体是基于一种假设，没有对系统进行干预</p><p>搜推一体化不一定</p><p>但是搜索数据可以帮推荐，推荐的数据可以帮搜索</p><ul><li>是否可以进行干预，自然干预的方法<ul><li>不付出太多的代价，把搜索的query当成对推荐的一种干预</li><li>利用微观经济学中的一个概念，工具变量</li></ul></li><li>稍微引入外部的知识进行干预，</li><li>是否干预，都是为了实现无偏估计</li></ul></blockquote></li></ol><h3 id="基于人类反馈的强化学习，LHF，对推荐有哪些启发">基于人类反馈的强化学习，LHF，对推荐有哪些启发</h3><p>郝建业老师</p><p>传统强化学习的优化目标多是点击，时长</p><ul><li><p>openai,   训练的三步，强化学习的面临的挑战</p><blockquote><p>ss</p></blockquote></li><li><p>如何进行强化学习梯度的训练</p></li><li><p>ctr预估，早已经利用了强化学习的思想《</p><blockquote><p>当前推荐，有偏</p><p>强化学习 很难落地推荐</p><p>用户心智应该是一个序列决策问题</p><p>推荐领域的用户大模型，数据打通</p><p>数据质量</p></blockquote></li></ul><h3 id="用户隐私，AIGC，-计算所，敖翔老师">用户隐私，AIGC，--计算所，敖翔老师</h3><p>菁蓉领域反欺诈领域</p><p>对抗性，其内的机理和范式是存在的</p><h3 id="小红书，为什么脱颖而出-–-小红书技术负责人，夏侯">小红书，为什么脱颖而出 – 小红书技术负责人，夏侯</h3><ul><li><p>UGC社区而不是PGC社区</p></li><li><p>希望是一个去中心化的流量分发机制</p></li><li><p>交互和消费之间是怎样的trade-off，又是怎样建模</p></li><li><p>小红书内容的多样性</p></li><li><p>可行的流量货币化的机制</p></li></ul><p>关于搜索</p><ul><li>当前的搜索非常  中长尾，优化难度大</li><li>传统的搜索流量集中在头部</li><li>chatgpt，</li><li>搜索，推荐互相finetuning</li></ul><h3 id=""></h3><h3 id="已有研究，把各类推荐任务统一到语言生成任务框架中，下一代推荐系统是否会形成大一统">已有研究，把各类推荐任务统一到语言生成任务框架中，下一代推荐系统是否会形成大一统</h3><p>大模型+插件，会不会形成新的OS，以后的app都变成插件</p><ul><li><p>传统的搜索、推荐，是使用大量的用户数据，区训练模型，使得模型能够反映用户在使用这两种工具所自然的表现，喜好等等</p></li><li><p>而GPT的训练方式，还是使用了语言的特点</p></li><li><p>GPT  应用到搜索推荐的话，对应于搜索、推荐的行为做对齐</p><blockquote><p>不同推荐场景的关联性有多大</p></blockquote></li></ul><h3 id="大语言模型的开发和训练，需要极大的资源和算力">大语言模型的开发和训练，需要极大的资源和算力</h3><h1 id="参考资料">参考资料</h1><ol><li><a href="https://www.bilibili.com/video/BV1Dz411B7wd?p=4&amp;spm_id_from=pageDriver&amp;vd_source=079f268ceb076dc167768a4865b01eaa">https://www.bilibili.com/video/BV1Dz411B7wd?p=4&amp;spm_id_from=pageDriver&amp;vd_source=079f268ceb076dc167768a4865b01eaa</a></li><li><a href="https://www.bilibili.com/video/BV1BL411m7A7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa">https://www.bilibili.com/video/BV1BL411m7A7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
