<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flask学习</title>
      <link href="/posts/20230814175838-95d3c49f.html"/>
      <url>/posts/20230814175838-95d3c49f.html</url>
      
        <content type="html"><![CDATA[<h1>什么是Flask</h1><h2 id="什么是Flask？">什么是Flask？</h2><p>Flask是一个用Python编写的Web应用程序框架。 它由 <strong>Armin Ronacher</strong> 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和Jinja2模板引擎。两者都是Pocco项目。</p><p>Flask诞生于2010年，是用Python语言基于Werkzeug工具箱编写的轻量级Web开发框架。</p><p>Flask本身相当于一个内核，其他几乎所有的功能都要用到扩展（邮件扩展Flask-Mail，用户认证Flask-Login），都需要用第三方的扩展来实现。</p><p>其 WSGI 工具箱采用 Werkzeug（路由模块），模板引擎则使用 Jinja2。这两个也是Flask框架的核心。</p><p>Python最出名的框架要数Django，此外还有Flask、Tornado等框架。虽然Flask不是最出名的框架，但是Flask应该算是最灵活的框架之一，这也是Flask受到广大开发者喜爱的原因。</p><h2 id="WSGI">WSGI</h2><p>Web Server Gateway Interface（Web服务器网关接口，WSGI）已被用作Python Web应用程序开发的标准。 WSGI是Web服务器和Web应用程序之间通用接口的规范。</p><h2 id="Werkzeug">Werkzeug</h2><p>它是一个WSGI工具包，它实现了请求，响应对象和实用函数。 这使得能够在其上构建web框架。 Flask框架使用Werkzeug作为其基础之一。</p><h2 id="jinja2">jinja2</h2><p>jinja2是Python的一个流行的模板引擎。Web模板系统将模板与特定数据源组合以呈现动态网页。</p><h1>Flask学习教程</h1><ul><li><a href="https://www.w3cschool.cn/flask/flask_overview.html#">Flask 概述_w3cschool</a></li></ul><h2 id="Flask程序例子">Flask程序例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>把它保存为 <a href="http://hello.py">hello.py</a> （或是类似的），然后用 Python 解释器来运行。 确保你的应用文件名不是 <a href="http://flask.py">flask.py</a> ，因为这将与 Flask 本身冲突。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python hello.py</span><br><span class="line"> * Running on http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在访问 <a href="http://127.0.0.1:5000/">http://127.0.0.1:5000/</a> ，你会 看见 Hello World 问候。</p><h3 id="那么，这段代码做了什么？">那么，这段代码做了什么？</h3><p>首先，我们导入了 Flask 类。这个类的实例将会是我 们的 WSGI 应用程序。</p><p>接下来，我们创建一个该类的实例，第一个参数是应用模块或者包的名称。 如果你使用单一的模块（如本例），你应该使用 <strong>name</strong> ，因为模块 的名称将会因其作为单独应用启动还是作为模块导入而有不同（ 也即是 ‘<strong>main</strong>’ 或实际的导入名）。这是必须的，这样 Flask 才知道到哪去找模板、静态文件等等。详情见 Flask 的文档。</p><p>然后，我们使用 route() 装饰器告诉 Flask 什么样 的URL 能触发我们的函数。</p><p>这个函数的名字也在生成 URL 时被特定的函数采用，这个函数返回我们想 要显示在用户浏览器中的信息。</p><p>最后我们用 run() 函数来让应用运行在本地服务器上。 其中 if <strong>name</strong> == ‘<strong>main</strong>’: 确保服务器只会在该脚本被 Python 解释器直接执行的时候才会运行，而不是作为模块导入的时候。</p><p>欲关闭服务器，按 Ctrl+C。</p><h3 id="外部可访问的服务器">外部可访问的服务器</h3><p>如果你运行了这个服务器，你会发现它只能从你自己的计算机上访问，网络 中其它任何的地方都不能访问。在调试模式下，用户可以在你的计算机上执 行任意 Python 代码。因此，这个行为是默认的。</p><p>如果你禁用了 debug 或信任你所在网络的用户，你可以简单修改调用 run() 的方法使你的服务器公开可用，如下:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=&#x27;0.0.0.0&#x27;)</span><br></pre></td></tr></table></figure><p>这会让操作系统监听所有公网 IP。</p><h1>为什么要用Web框架</h1><h2 id="什么是Web-Framework？">什么是Web Framework？</h2><p>Web Application Framework（Web应用程序框架）或简单的Web Framework（Web框架）表示一个库和模块的集合，使Web应用程序开发人员能够编写应用程序，而不必担心协议，线程管理等低级细节。</p><h3 id="Web应用程序的本质">Web应用程序的本质</h3><p>Web(World Wide Web)诞生最初的目的，是为了利用互联网交流工作文档。</p><h3 id="使用WEB框架的优点">使用WEB框架的优点</h3><p>web网站发展至今，特别是<a href="https://cloud.tencent.com/product/cvm?from_column=20065&amp;from=20065">服务器</a>端，涉及到的知识、内容，非常广泛。这对程序员的要求会越来越高。如果采用成熟，稳健的框架，那么一些基础的工作，比如，安全性，数据流控制等都可以让框架来处理，那么程序开发人员可以把精力放在具体的业务逻辑上面。使用框架的优点： <strong>稳定性和可扩展性强</strong> <strong>可以降低开发难度，提高开发效率。</strong> 总结一句话：避免重复造轮子</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230814-221720.png" alt="20190315163458696"></p><p><a href="https://so.csdn.net/so/search?q=Django&amp;spm=1001.2101.3001.7020">Django</a>等框架只是为了解决路由分发。框架核心：实现路由和视图（业务逻辑处理）</p><h1>参考</h1><ol><li><a href="https://www.w3cschool.cn/flask/flask_overview.html#">Flask 概述_w3cschool</a></li><li><a href="https://cloud.tencent.com/developer/article/1860110">【一周掌握Flask框架学习笔记】Flask概念及基础-腾讯云开发者社区-腾讯云 (tencent.com)</a></li><li><a href="https://cloud.tencent.com/developer/article/1860110">https://cloud.tencent.com/developer/article/1860110</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
          <category> Web框架 </category>
          
          <category> Python </category>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
            <tag> WEB框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Select下拉选择onchange事件</title>
      <link href="/posts/20230810233351-9e5ae3e6.html"/>
      <url>/posts/20230810233351-9e5ae3e6.html</url>
      
        <content type="html"><![CDATA[<h1>Select下拉选择onchange事件</h1><ul><li>现在要实现这样一个效果<br>网页下拉选择选择，自动更新页面内容</li><li>下拉选择是select标签，自动更新页面内容，可以通过onchange事件实现</li></ul><h1>onchange定义</h1><p>当元素的值发生改变时，会发生 onchange 事件。</p><p>对于单选框和复选框，在被选择的状态改变时，发生 onchange 事件。</p><p>提示：该事件类似于 <a href="https://www.w3school.com.cn/jsref/event_oninput.asp">oninput 事件</a>。不同之处在于 oninput 事件在元素值改变后立即发生，而 onchange 在元素失去焦点而内容发生改变后发生。另一个区别是 onchange 事件也适用于 <code>&lt;select&gt;</code> 元素。</p><h1>使用</h1><p>有若干种方式</p><h2 id="1-在select标签-设置-onchange属性">1. 在select标签 设置 onchange属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请从列表中选择一辆新车。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;mySelect&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;myFunction()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Audi&quot;</span>&gt;</span>Audi<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;BMW&quot;</span>&gt;</span>BMW<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Mercedes&quot;</span>&gt;</span>Mercedes<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Volvo&quot;</span>&gt;</span>Volvo<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当您选择一辆新车时，会触发一个函数，输出所选汽车的值。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>You selected: <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">myFunction</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> x = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;mySelect&quot;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;demo&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;You selected: &quot;</span> + x;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如示下例</li></ul><!DOCTYPE html><html><body><p>请从列表中选择一辆新车。</p><select id="mySelect" onchange="myFunction()">  <option value="Audi">Audi</option>  <option value="BMW">BMW</option>  <option value="Mercedes">Mercedes</option>  <option value="Volvo">Volvo</option></select><p>当您选择一辆新车时，会触发一个函数，输出所选汽车的值。</p><p id="demo">You selected: </p><script>function myFunction() {  var x = document.getElementById("mySelect").value;  document.getElementById("demo").innerHTML = "You selected: " + x;}</script></body></html><h2 id="2-使用jQuery动态添加-onchange属性">2. 使用jQuery动态添加 onchange属性</h2><ul><li>引入jquery <code>&lt;script src=&quot;/js/jquery.min.js&quot;&gt;&lt;/script&gt;</code></li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script src=<span class="string">&quot;/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;p&gt;请从列表中选择一辆新车。&lt;/p&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;mySelect2&quot;</span> &gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;Audi&quot;</span>&gt;Audi&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;BMW&quot;</span>&gt;BMW&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;Mercedes&quot;</span>&gt;Mercedes&lt;/option&gt;</span><br><span class="line">  &lt;option value=<span class="string">&quot;Volvo&quot;</span>&gt;Volvo&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;p&gt;当您选择一辆新车时，会触发一个函数，输出所选汽车的值。&lt;/p&gt;</span><br><span class="line">&lt;p id=<span class="string">&quot;demo2&quot;</span>&gt;You selected: &lt;/p&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">$( document ).ready(function() &#123;</span><br><span class="line">    $(<span class="string">&quot;#mySelect2&quot;</span>).change(function()&#123;</span><br><span class="line">      update();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  function <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">let</span> <span class="variable">mySelect2</span> <span class="operator">=</span> $(<span class="string">&quot;#mySelect2&quot;</span>).val();</span><br><span class="line">    console.log(<span class="string">&quot;You selected: &quot;</span> + mySelect2);</span><br><span class="line">    demo2.innerText = (<span class="string">&quot;You selected: &quot;</span> + mySelect2).toLocaleString();</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>如示下例</li></ul><!DOCTYPE html><html><body>  <script src="/js/jquery.min.js"></script><p>请从列表中选择一辆新车。</p><select id="mySelect2" >  <option value="Audi">Audi</option>  <option value="BMW">BMW</option>  <option value="Mercedes">Mercedes</option>  <option value="Volvo">Volvo</option></select><p>当您选择一辆新车时，会触发一个函数，输出所选汽车的值。</p><p id="demo2">You selected: </p><script type="text/javascript">$( document ).ready(function() {    $("#mySelect2").change(function(){      update();    })  })  function update() {    let mySelect2 = $("#mySelect2").val();    console.log("You selected: " + mySelect2);    demo2.innerText = ("You selected: " + mySelect2).toLocaleString();  }</script></body></html><h1>参考</h1><ol><li><a href="https://www.w3school.com.cn/jsref/event_onchange.asp">onchange 事件 (w3school.com.cn)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> select标签 </tag>
            
            <tag> onchange </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回车换行详解</title>
      <link href="/posts/20230810180521-d0173ed6.html"/>
      <url>/posts/20230810180521-d0173ed6.html</url>
      
        <content type="html"><![CDATA[<h1>回车换行详解</h1><ul><li>原始的 回车(carriage return)和换行(line feed)是两个动作<ul><li>\n：表示换到下一行</li><li>\r  ：表示移动到行首</li></ul></li><li>现在 在计算机文件中，编程语言中<ul><li>\n：换行并移动到行首</li><li>\r：移动到行首</li></ul></li></ul><h2 id="1-机械打字机">1. 机械打字机</h2><p>“车(carriage)”是指纸车,带着纸一起左右移动的模块。</p><ul><li>回车：<br>在早期的机械打字机上，打印头是固定的，只能通过左右移动纸车在一行上打字。当开始打第一个字之前，要把纸车拉到最右边，上紧弹簧，随着打字，弹簧把纸车拉回去。每当打完一行后，纸车就完全收回去了，所以叫回车。<ul><li>换行：<br>打字机边上有个&quot;把手&quot;,往下扳动一下,纸会上移一行。在后来的电传打字机甚至今天的终端中都沿用了这些叫法。<br>YouTube上找了两个视频，一个是打印头固定的，一个是不固定的。可以看下，更容易理解：<ul><li><a href="https://www.youtube.com/watch?v=wf0a4tos3mk">固定打印头</a></li><li><a href="https://www.youtube.com/watch?v=lCZmVXGyVQQ">不固定打印头</a></li></ul></li></ul></li></ul><h2 id="2-电传打字机">2. 电传打字机</h2><p>​在后来的电传打字机中，通常打印头可以左右移动，这样可以节省空间，同时也就没有纸车这个概念了，不过车这个说法依然留下来了，只不过是指打印头，回车即将打印头回到行首，换行依然是将纸上移一行。</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230810-182802.jpg" alt="ASR 33 Teletype Information"></p><ul><li><p>回车(<code>CR</code>)和换行(<code>LF</code>)的顺序问题<br>据<a href="https://en.wikipedia.org/wiki/Newline#History">wiki记载</a>，通常的电传打字机都是用<code>CR+LF</code>这个顺序，典型的就是上面那台<code>Teletype Model 33 ASR</code>。</p><p>把这一步骤拆分为回车和换行，是因为 <strong>打印头不能在一个字符的时间内从最右侧移动到下一行开始</strong> 。在<code>CR</code>之后打印的一个字符通常会变成污迹，由于打印头在移动到行首过程中，下个字符同时打印了。<br>所以解决办法就是将换行做成两个字符：<code>CR</code>将打印头移动到行首，<code>LF</code>进纸。事实上，通常还要发送额外的字符(额外的<code>CR</code>或者<code>NUL</code>，这些字符将被忽略)以保证打印头有足够的时间移动到行首。</p></li></ul><h2 id="3-计算机中打印字符">3. 计算机中打印字符</h2><ul><li>以下参考网上很多说法</li></ul><blockquote><ul><li><p>等到早期的计算机发明时，很自然的这两个概念被拿了过来。但是由于那时的存储设备非常昂贵，一些人认为在每行的结尾加两个字符用于换行，实在是极大的浪费，于是各个厂商在这一点上便出现了分歧。</p></li><li><p>windows: 由于一些早期的微型计算机还没有用于隐藏底层硬件细节的设备驱动，所以它们直接沿用了打字机的惯例，使用不带<code>NUL</code>的<code>CRLF</code>作为一个<code>EOL</code>。而CP/M为了和这些微型计算机使用同一个终端，也采用了这种设计。所以它的克隆MS-DOS也同样使用<code>CRLF</code>，由于Windows又是基于MS-DOS，为保持兼容性，所以就导致了如今的Windows是采用<code>CRLF</code>作为<code>EOL</code>，即<code>\r\n</code>(或<code>0x0D</code> <code>0x0A</code>)。</p></li><li><p>Unix: 而Multics在被设计之时就非常认真的考虑了这一问题，设计者们觉得只需一个字符便完全足够来表示<code>EOL</code>，这样更加合理。那么选择<code>CR</code>还是<code>LF</code>呢？本来由于那时的键盘上都有一个<code>Return</code>键，所以可能更好的选择是<code>CR</code>。但当时考虑到<code>CR</code>可以用来重写一行，以完成如<strong>粗体</strong>和<s>删除线</s>等效果，所以他们选择了稍稍难以理解的<code>LF</code>。然后自己设计了一个设备驱动程序来将<code>LF</code>转换为各种打字机所需要的<code>EOL</code>，这个方案非常完美，当然除了<code>LF</code>稍微奇怪一些。随后一脉相承的<code>Unix</code>和<code>Linux</code>们都继承了这个选择，于是你在这些操作系统上可以发现每一行的结尾是一个<code>LF</code>，即<code>\n(或0x0A)</code>。</p></li><li><p>Mac: 系统的选择就更加复杂一些。Apple在设计Mac OS时，他们采用了一个最容易理解的选择：<code>CR</code>，即<code>\r</code>(或<code>0x0D</code>)。但这只维持到Mac OS 9，后一个版本的Mac OSX基于Mach-BSD内核，所以此后版本的Mac OSX在每行的结尾存储了与Linux一样的<code>LF</code>，即<code>\n</code>(或<code>0x0A</code>)。</p></li><li><p>还有很多其它的操作系统采用更加不同的方案，这也导致了混乱的产生，</p><p>因为Linux和Mac OSX上使用的是<code>LF</code>，而Windows上使用的是<code>CRLF</code>，那么Linux和Mac OSX上创建的文件在Windows上打开时，由于每一行的结尾只有一个<code>LF</code>，但Windows只认识<code>CRLF</code>，所以便不会有逻辑上的换行处理，故所有的文字被挤到了一行。<br>反过来，如果Windows上的文件在Linux和Mac OSX上打开时，仅需<code>LF</code>便可换行，那么每一行的结尾便多了一个<code>CR</code>，对应的ASCII码为<code>^M</code>。</p></li><li><p>而git的安装向导会特意有一个这样的提醒页面也出于此，因为一个项目可能有多个开发者，每个开发者可能使用的是不同的系统，那么开发者checkout代码时，如果不做换行符的转换，有可能就会出现只有一行或者行尾多了<code>^M</code>的情况。当然，如果你有一个可以识别多种<code>EOL</code>的现代文本编辑器，那么不做转换也无妨(notepad不行)。</p></li></ul></blockquote><h2 id="4-编程语言中的回车换行">4. 编程语言中的回车换行</h2><ul><li>C语言，C系语言</li></ul><p>为了避免在这些不同的实现中挣扎，高级语言给我们带来了福音，它们各自使用了<a href="http://en.wikipedia.org/wiki/Newline#In_programming_languages">统一</a>的方式来处理<code>EOL</code>。在C语言中，你一定知道在字符串中如果要增加一个换行符的话，直接用<code>\n</code>即可，比如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This is the first line! \nThis is a new line!&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面的输出将是：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">This is the first line!</span><br><span class="line">This is a new line!</span><br></pre></td></tr></table></figure><p>为什么C语言选择了<code>\n</code>而不是<code>\r</code>？这绝非偶然。熟悉C语言历史的朋友可能知道当初C语言是Dennis Ritchie为开发Unix而设计，所以它沿用了Unix上<code>EOL</code>的惯例便很容易理解了。而我们知道Unix使用的<code>LF</code>的ASCII码为<code>0x0A</code>，转义符为<code>\n</code>，因此C语言中也使用<code>\n</code>作为换行。</p><h2 id="Text-Mode-VS-Binary-Mode">Text Mode VS Binary Mode</h2><ul><li>该部分内容转载于：<a href="https://feihu.me/blog/2014/end-of-line/">知无涯之回车换行的故事 (feihu.me)</a></li></ul><p>但是，千万别简单的认为上面的<code>\n</code>最终写到文件中就一定是其ASCII码<code>0x0A</code>，或者文件中的<code>0x0A</code>被读到内存中就是其转义符<code>\n</code>。这取决于你打开文件的方式。在C语言中，在对文件进行读取操作之前，都需要先打开文件，可以使用下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#inlcude <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line">FILE *<span class="title function_">fopen</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">char</span> *mode)</span>;</span><br></pre></td></tr></table></figure><p>注意看第二个参数<code>mode</code>，它是一个字符指针，通常可以为读®，写(w)，追加(a)或者读写(r+, w+, a+)，仅指定这些参数时，文件将被当成是文本文件来操作，即<code>Text Mode</code>，而如果在这些参数之外再指定一个额外的<code>b</code>时，文件便会被当成是二进制文件，即<code>Binary Mode</code>。这两种模式的区别在哪里呢？这里稍稍有些复杂，因为它们在不同的平台上表现不同。</p><h3 id="Windows平台">Windows平台</h3><p>对于Windows平台，因为其使用<code>CRLF</code>来表示<code>EOL</code>，故对于<code>Text Mode</code>需要做一定的转换才能够与C语言保持一致。接下来的两个图可以给出最为直观的描述。</p><p>先看二者对于读操作的区别：</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230810-184939.png" alt="读操作"></p><p><code>Text Mode</code>下，C语言会尝试去“理解”这些回车与换行，它会知道<code>LF</code>和<code>CRLF</code>都可能是<code>EOL</code>，所以不管文件中是<code>LF</code>还是<code>CRLF</code>，被读进内存时都会变成<code>LF</code>。而<code>Binary Mode</code>下，C语言不会做任何的“理解”，所以这些字符在文件中什么样，读到内存中依然那样。</p><p>接下来是写操作的区别：</p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/2023/08/20230810-184939.png" alt="写操作"></p><p><code>Text Mode</code>下，内存中的每一个<code>LF</code>写入文件中时都会变为<code>CRLF</code>，当然，如果不幸内存中为<code>CRLF</code>，以此种模式写入到文件中时就会变成<code>CRCRLF</code>（<strong>注意</strong>：这里不是<code>CRLF</code>。原因我想大概是如果你认为内存中的数据是文本，那么它一定是以<code>LF</code>作为<code>EOL</code>，<code>CR</code>也一定是你有意而为之，是个有意义的字符，所以它并不会处理。）。而<code>Binary Mode</code>下，内存中的内容会被原封不动的写到文件中。</p><p>所以为了保证一致性，一定需要注意配套使用读和写，即<strong>读和写采用同一种模式打开文件</strong>。</p><h3 id="Linux和Mac-OSX平台">Linux和Mac OSX平台</h3><p>因为Linux和Mac OSX平台与C语言对待<code>EOL</code>的方式完全一致，所以<code>Text Mode</code>和<code>Binary Mode</code>在这些平台下没有任何区别，可以参考<code>fopen</code>的<a href="http://man7.org/linux/man-pages/man3/fopen.3.html">man page</a>。实际上，所有遵循POSIX的平台都忽略了<code>b</code>这个参数。</p><p>虽说在这些平台上处理<code>EOL</code>非常简单，但是如果你的程序需要移植到其它非POSIX平台上时，请务必正确对待<code>b</code>参数。</p><h2 id="POSIX平台-介绍">POSIX平台 介绍</h2><p>因为Linux和Mac OSX平台与C语言对待<code>EOL</code>的方式完全一致，所以<code>Text Mode</code>和<code>Binary Mode</code>在这些平台下没有任何区别，可以参考<code>fopen</code>的<a href="http://man7.org/linux/man-pages/man3/fopen.3.html">man page</a>。实际上，所有遵循POSIX的平台都忽略了<code>b</code>这个参数。</p><ul><li><p>POSIX：可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ）</p></li><li><p>历史：</p><blockquote><p>974年，贝尔实验室正式对外发布Unix。因为涉及到反垄断等各种原因，加上早期的Unix不够完善，于是贝尔实验室以慷慨的条件向学校提供源代码，所以Unix在大专院校里获得了很多支持并得以持续发展。</p><p>于是出现了好些独立开发的与Unix基本兼容但又不完全兼容的OS，通称Unix-like OS.包括：</p><ol><li>美国加州大学伯克利分校的Unix4.xBSD(Berkeley Software Distribution)。</li><li>贝尔实验室发布的自己的版本，称为System V Unix。</li><li>其他厂商的版本，比如Sun Microsystems的Solaris系统,则是从这些原始的BSD和System V版本中衍生而来。</li></ol><p>20世纪80年代中期，Unix厂商试图通过加入新的、往往不兼容的特性来使它们的程序与众不同。局面非常混乱，麻烦也就随之而来了。</p><p>为了提高兼容性和应用程序的可移植性，阻止这种趋势， IEEE(电气和电子工程师协会)开始努力标准化Unix的开发，后来由 Richard Stallman命名为“Posix”。</p></blockquote></li></ul><p>这套标准涵盖了很多方面，比如Unix系统调用的C语言接口、shell程序和工具、线程及网络编程。</p><ul><li><p>支持POSIX</p><blockquote><p>Unix和Linux</p><p>苹果的操作系统也是Unix-based的</p><p>Windows从WinNT开始就有兼容POSIX的考虑。这是因为当年在要求严格的领域，Unix地位比Windows高。为了把Unix用户拉到Windows阵营，被迫支持POSIX。</p><p>现在Win10对 Linux/POSIX 支持好，则是因为Linux已经统治了廉价服务器市场。为了提高Windows的竞争力搞的。</p></blockquote></li></ul><h2 id="参考">参考</h2><ol><li><a href="https://zh.wikipedia.org/zh-sg/%E5%9B%9E%E8%BB%8A%E9%8D%B5">回车键 - 维基百科，自由的百科全书 (wikipedia.org)</a></li><li><a href="https://en.wikipedia.org/wiki/Newline#History">Newline - Wikipedia</a></li><li><a href="https://www.racecoder.com/archives/383/">回车与换行的一些历史 - 这破站 (racecoder.com)</a></li><li><a href="https://feihu.me/blog/2014/end-of-line/">知无涯之回车换行的故事 (feihu.me)</a></li><li><a href="https://zhuanlan.zhihu.com/p/392588996">posix是什么都不知道，还好意思说你懂Linux？ - 知乎 (zhihu.com)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回车换行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell函数返回值详解</title>
      <link href="/posts/20230809143243-c8a1efbf.html"/>
      <url>/posts/20230809143243-c8a1efbf.html</url>
      
        <content type="html"><![CDATA[<h1>Shell函数返回值详解</h1><p>shell脚本中，执行函数</p><p>通常来说函数返回值有两类</p><h2 id="1-函数执行状态码">1. 函数执行状态码</h2><p>我更愿意称之为函数执行状态码</p><p>标识函数是否执行成功，返回值只能是整数 ，在0-255之间，0表示成功，其他值表示失败</p><blockquote><ul><li><p>函数内，显示使用return 语句，指定 函数返回值，（0-255）</p></li><li><p>不显示使用return 语句，会将最后一条命令运行结果状态作为返回值</p></li><li><p>获取该状态码，需要在函数执行后，<strong>立即</strong>从 $? 变量获取  ，因为该变量只显示最后命令的退出状态</p></li><li><table><thead><tr><th>$?</th><th>仅显示最后命令的退出状态，0表示没有错误，其他表示有错误；</th></tr></thead></table></li></ul></blockquote><h3 id="举例">举例</h3><ol><li>return  整数 0-255，获取为正常状态码</li><li>return 字符串，报错，<a href="http://test.sh">test.sh</a>: line 11: return: xyz: numeric argument required</li><li>return 整数大于255，返回值 为 整数 取模256 ，如下例 64789 % 256 = 21</li><li>不显示使用return 语句，则函数内最后一条命令的执行结果，0为正常，其他错误</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo0</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 64789</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo1</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo2</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> <span class="string">&quot;xyz&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooa</span></span>() &#123;</span><br><span class="line">    <span class="built_in">ls</span> *.sh</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foob</span></span>() &#123;</span><br><span class="line">    <span class="built_in">ls</span> *.ksh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo0</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo0 return $?\n..&quot;</span></span><br><span class="line">foo1</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo1 return $?\n..&quot;</span></span><br><span class="line">foo2</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foo2 return $?\n..&quot;</span></span><br><span class="line">fooa</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooa return $?\n..&quot;</span></span><br><span class="line">foob</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;foob return $?\n..&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代码执行结果</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">foo0 <span class="built_in">return</span> 21</span><br><span class="line">..</span><br><span class="line">foo1 <span class="built_in">return</span> 1</span><br><span class="line">..</span><br><span class="line">test.sh: line 11: <span class="built_in">return</span>: xyz: numeric argument required</span><br><span class="line">foo2 <span class="built_in">return</span> 255</span><br><span class="line">..</span><br><span class="line">excutep.sh  test.sh</span><br><span class="line">fooa <span class="built_in">return</span> 0</span><br><span class="line">..</span><br><span class="line"><span class="built_in">ls</span>: cannot access *.ksh: No such file or directory</span><br><span class="line">foob <span class="built_in">return</span> 2</span><br><span class="line">..</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-用户自定义的函数执行返回结果">2. 用户自定义的函数执行返回结果</h2><p>也有两种方式</p><h3 id="1-函数内-给全局变量-赋值">1. 函数内 给全局变量 赋值</h3><blockquote><ol><li>函数外首先定义全局变量</li><li>函数内修改全局变量</li></ol></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cc=<span class="string">&quot;aa&quot;</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooc</span></span>() &#123;</span><br><span class="line">    cc=<span class="string">&quot;bb&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$cc</span>&quot;</span></span><br><span class="line">fooc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooc return $? \n  cc=<span class="variable">$cc</span>   \n..&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数执行结果</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">..</span><br><span class="line">aa</span><br><span class="line">fooc return 0</span><br><span class="line">  cc=bb   </span><br><span class="line">..</span><br></pre></td></tr></table></figure><h3 id="2-执行函数的shell，继承函数内部的打印输出">2. 执行函数的shell，继承函数内部的打印输出</h3><blockquote><ol><li>函数内部 包括打印语句<br>比如 echo 语句，不止echo，还包括，head、cat等等</li><li>执行函数并赋值给一个变量 ，注意 dd=<code>food</code>，函数名使用`` 包裹表示执行函数<ul><li>而且通过下述例子可以看出，状态码是函数体内部返回的 状态码 5，也即该赋值操作，没改变变量$?</li><li>函数内部有多处打印输出，则通过该种方法赋值时，赋值为一个字符串<br>==会把多行输出都合并到一个字符串中，并且以一个空格做分割==<br>( 这里一个测试时很奇怪的点<br>原因是，以<code>echo $dd</code> 打印，结果以空格分割<br>和以<code>echo &quot;$dd&quot;</code> 打印结果以换行分割)</li></ul></li><li>执行函数若不进行赋值操作，则函数内部的打印输出也会直接被继承到调用函数shell 的打印输出 顺序中</li></ol></blockquote><h3 id="举例-2">举例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">food</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;22 222&quot;</span></span><br><span class="line">    <span class="built_in">head</span> -1 test.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;33&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;directly print:&quot;</span>  `food`</span><br><span class="line"><span class="built_in">dd</span>=`food`</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;food return $? &quot;</span></span><br><span class="line"><span class="built_in">echo</span>  <span class="variable">$dd</span> <span class="string">&quot;start:<span class="variable">$&#123;dd&#125;</span>end&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;****************&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;if dd is string, print the length of dd: <span class="variable">$&#123;#dd&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;if dd is array,print the length of array: <span class="variable">$&#123;#dd[@]&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">fooe</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;11&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;22 222&quot;</span></span><br><span class="line">    <span class="built_in">head</span> -1 return_fuc_test.sh</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;33&quot;</span></span><br><span class="line">    <span class="built_in">return</span> 5</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 无赋值操作 则函数内部打印，会直接打印出来</span></span><br><span class="line">fooe</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;fooe return $? &quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数执行结果</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">directly print: 11 22 222 #!/bin/bash 33</span><br><span class="line">food return 5 </span><br><span class="line">11 22 222 #!/bin/bash 33 start:11</span><br><span class="line">22 222</span><br><span class="line">#!/bin/bash</span><br><span class="line">33end</span><br><span class="line">****************</span><br><span class="line">if dd is string, print the length of dd: 24</span><br><span class="line">if dd is array,print the length of array: 1</span><br><span class="line"># 按数组来看，查询数组长度为1，所以函数返回值是一个字符串</span><br><span class="line"></span><br><span class="line">11</span><br><span class="line">22 222</span><br><span class="line">#!/bin/bash</span><br><span class="line">33</span><br><span class="line">fooe return 5 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="总结">总结</h2><ol><li>函数执行状态码，一般是用来判断 函数执行结果状态</li><li>第二种方式，获取函数返回值，如同一般编程中函数返回值使用</li></ol><h1>参考</h1><ol><li><a href="https://blog.51cto.com/u_13800449/3049036">linux shell返回值方式及示例_51CTO博客_shell脚本返回值</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell函数返回值 </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ReadyToRead</title>
      <link href="/posts/20230626153850-8f8e2f5b.html"/>
      <url>/posts/20230626153850-8f8e2f5b.html</url>
      
        <content type="html"><![CDATA[<h1>articles</h1><ol><li><a href="https://zhuanlan.zhihu.com/p/79202151">BM25算法, Best Matching - 知乎专栏</a></li><li><a href="https://zhuanlan.zhihu.com/p/31009310">BM25F模型 - 知乎专栏</a></li><li><a href="https://lumingdong.cn/go/4q3yru">推荐系统算法调研. 蘑菇先生学习记</a><a href="https://lumingdong.cn/recommendation-algorithm-based-on-matrix-decomposition.html#ref-footnote-3">↩</a></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Typora代码块-添加折叠展开按钮</title>
      <link href="/posts/20230613222744-8b05256b.html"/>
      <url>/posts/20230613222744-8b05256b.html</url>
      
        <content type="html"><![CDATA[<p>Typora 是一款由 Abner Lee 开发的<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7/10002835?fromModule=lemma_inlink">轻量级</a> Markdown 编辑器，与其他 Markdown 编辑器不同的是，Typora 没有采用<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3969?fromModule=lemma_inlink">源代码</a>和预览双栏显示的方式，而是采用所见即所得的编辑方式，实现了即时预览的功能，但也可切换至源代码编辑模式。</p><p>一个遗憾是不支持，代码块的折叠，当代码块中代码行数过多，会显得臃肿</p><h1>代码块添加折叠按钮</h1><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230613222824.png" alt="image-20230613220158516"></p><p>Typora实际就是一个浏览器</p><p>通过修改Typora安装目录如下 的  frame.js文件，来实现这个功能</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\NotesRead\Typora\resources\appsrc\window\frame.js</span><br></pre></td></tr></table></figure><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230613222824.png" alt="image-20230613215619674"></p><ul><li>在文件  frame.js的末尾添加如下代码</li></ul><h2 id="1-在单个代码块添加代码收缩按钮">1. 在单个代码块添加代码收缩按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加代码收缩功能</span></span><br><span class="line">content.<span class="title function_">addEventListener</span>(<span class="string">&quot;mouseover&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">codeDivs.<span class="title function_">forEach</span>(<span class="function">(<span class="params">div, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (div.<span class="property">firstChild</span>.<span class="property">nodeName</span> != <span class="string">&quot;BUTTON&quot;</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">button.<span class="property">className</span> = <span class="string">&quot;contract-code-button&quot;</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">button.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (div.<span class="property">style</span>.<span class="property">height</span> != <span class="string">&quot;2.9em&quot;</span>) &#123;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码展开&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;2.9em&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">div.<span class="title function_">insertBefore</span>(button, div.<span class="property">firstChild</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-添加收缩文件全部代码块按钮">2.添加收缩文件全部代码块按钮</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加收缩全部按钮</span></span><br><span class="line"><span class="keyword">var</span> isAdd = <span class="literal">false</span>;</span><br><span class="line">content.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isAdd) &#123;</span><br><span class="line"><span class="keyword">var</span> footer = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;footer&quot;</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部收缩按钮</span></span><br><span class="line"><span class="keyword">var</span> contractButton = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">contractButton.<span class="property">innerText</span> = <span class="string">&quot;全部收缩&quot;</span>;</span><br><span class="line">contractButton.<span class="property">name</span> = <span class="string">&quot;contarctAllButton&quot;</span>;</span><br><span class="line">contractButton.<span class="property">className</span> = <span class="string">&quot;contract-all-button&quot;</span>;</span><br><span class="line">contractButton.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;contract-code-button&quot;</span>);</span><br><span class="line">buttons.<span class="title function_">forEach</span>(<span class="function">(<span class="params">button, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> div = button.<span class="property">parentNode</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码展开&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;2.9em&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部展开按钮</span></span><br><span class="line"><span class="keyword">var</span> expandButton = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">expandButton.<span class="property">innerText</span> = <span class="string">&quot;全部展开&quot;</span>;</span><br><span class="line">expandButton.<span class="property">name</span> = <span class="string">&quot;expandAllButton&quot;</span>;</span><br><span class="line">expandButton.<span class="property">className</span> = <span class="string">&quot;expand-all-button&quot;</span>;</span><br><span class="line">expandButton.<span class="property">onclick</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;contract-code-button&quot;</span>);</span><br><span class="line">buttons.<span class="title function_">forEach</span>(<span class="function">(<span class="params">button, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">var</span> div = button.<span class="property">parentNode</span>;</span><br><span class="line">button.<span class="property">innerText</span> = <span class="string">&quot;代码收缩&quot;</span>;</span><br><span class="line">div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;inherit&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">footer.<span class="title function_">append</span>(contractButton);</span><br><span class="line">footer.<span class="title function_">append</span>(expandButton);</span><br><span class="line">isAdd = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><h1>实现效果</h1><ol><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221127.png" alt="image-20230625221126253"><br><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221323.png" alt="image-20230625221322980"></p></li><li><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230625221247.png" alt="image-20230625221247195"></p></li></ol><h1>参考</h1><ol><li><a href="https://baike.baidu.com/item/Typora/59397163?fr=aladdin">Typora</a></li><li><a href="https://www.baidu.com/link?url=vi5U5lv00bECq-fkX5mqrhd7uQJ53z1W6CKvh4ZGmMS&amp;wd=&amp;eqid=960a248d0007b0710000000364886a64">Typora官方中文站</a></li><li><a href="https://blog.csdn.net/qq_41259552/article/details/107892376">CSDN-jo尼jo斯达博客</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
          <category> PC软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown笔记 </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐系统简述</title>
      <link href="/posts/20230310224218-66919c32.html"/>
      <url>/posts/20230310224218-66919c32.html</url>
      
        <content type="html"><![CDATA[<h1>推荐系统</h1><h2 id="什么是推荐">什么是推荐</h2><blockquote><ul><li>推荐是一种思维方式</li><li><ol><li>作为搜索的延申</li><li>作为广告的土壤</li><li>掌握信息传播主动权</li></ol></li><li>适用场景<ol><li>资源受限的信息过滤</li><li>导向性的信息展现</li><li>目的性的资源分配</li></ol></li><li></li></ul></blockquote><h2 id="解决问题">解决问题</h2><ol><li><p>信息过载</p></li><li><p>挖掘长尾</p><blockquote><ul><li><a href="https://baike.baidu.com/item/%E9%95%BF%E5%B0%BE/389156?fr=aladdin">长尾</a><br>是指那些原来不受到重视的销量小但种类多的产品或服务由于总量巨大，累积起来的总收益超过主流产品的现象。在互联网领域，长尾效应尤为显著。长尾术语也在统计学中被使用，通常应用在财产的分布和词汇。</li><li>帕雷托法则<br>向来被商业界视为铁律，其内涵认为企业界80%的业绩来自20%的产品</li></ul><p>数据、物品价值</p></blockquote></li><li><p>用户体验</p><blockquote><p>提升用户体验；帮助用户发现自己很难发现的兴趣点、商品……</p></blockquote></li></ol><h2 id="推荐系统的技术演进">推荐系统的技术演进</h2><blockquote><ol><li><p>早期论坛的打分系统；hacknews；reddit;</p></li><li><p>早期社交内容</p></li><li><p>早期电商内容</p></li><li><p>单一算法到多算法融合<br>基于内容的算法 ;( 文本相关性, 主题相关性)<br>基于行为的算法 ;( 协同过滤的变种，随机游走等其他行为类算法  )<br>结果融合；人工规则</p></li><li><p>引入机器学习模型</p><blockquote><p>启发式，无明确目标<br>相对静态，反应慢<br>考虑维度较少，个性化程度不足<br>纯手工，改进空间小</p></blockquote><blockquote><p>对齐明确目标，成熟的优化方法<br>时效性灵活，反映可快可慢特征维度丰富，个性化程度细腻<br>理论储备丰富，发展空间大</p></blockquote></li><li><p>深度学习</p><blockquote><ul><li>从浅层模型到深度模型</li><li><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309200210231" style="zoom:50%;" /></li></ul></blockquote></li></ol></blockquote><h2 id="推荐系统基本流程">推荐系统基本流程</h2><ol><li><h2 id="召回">召回</h2><blockquote><ul><li>协同过滤</li><li>内容相似召回</li><li>热门召回</li><li>……</li></ul></blockquote></li><li><h2 id="排序">排序</h2><blockquote><ul><li>机器学习</li><li>二分类算法</li><li>深度学习算法</li><li></li></ul></blockquote></li><li><h2 id="调整-重排">调整(重排)</h2><blockquote><ul><li>针对 具体场景</li></ul><hr><ul><li>去重</li><li>过滤，热门补充</li></ul></blockquote></li></ol><h3 id="召回-2">召回</h3><ul><li><p>一般召回路径</p><blockquote><ol><li>i2i</li><li>u2i</li><li>u2i2i</li><li>u2u2i</li><li>u2tag2i<br>泛化性好</li><li>u2***2i<br>基于图的算法</li></ol></blockquote></li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230516165627.png" alt="image-20230516165625814"><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309155810040"></p><h3 id="排序-2">排序</h3><h3 id="调整">调整</h3><h2 id="通用推荐系统技术架构（数据流图）">通用推荐系统技术架构（数据流图）</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224422.png" alt="image-20230309161118965"></p><h1>推荐系统的方法</h1><h2 id="Content-Based-基于内容的推荐系统">Content-Based   ; 基于内容的推荐系统</h2><ul><li>最早被使用的推荐算法，效果良好</li><li>给用户推荐之前喜欢的物品，相似的物品</li><li>u2i2i<br>u2tag2i</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309165128805"></p><h3 id="重点：相似度计算">重点：相似度计算</h3><ol><li>余弦相似度</li><li></li></ol><h3 id="优缺点">优缺点</h3><ul><li><p>优点</p><blockquote><ol><li>不需要其他用户的数据</li><li>能给具备独特口味的用户推荐</li><li>可以推荐最新的、冷门的物品</li><li>容易做推荐结果的解释</li></ol></blockquote></li><li><p>缺点</p><blockquote><ol><li>很难找到能表达物品的“标签”，有时候需要人工打标签</li><li>过于局限于自己的世界，无法挖掘出用户的潜在兴趣</li><li>新用户如果没有行为，没法做推荐  (<em><strong>==冷启动问题==</strong></em>)</li></ol></blockquote></li></ul><h2 id="Collaborative-Filtering-协同过滤">Collaborative-Filtering  ; 协同过滤</h2><ul><li><p>大类，一般也分为两种</p><blockquote><ul><li><blockquote><ol><li>Memory-based CF ; 基于数据统计（记忆）的协同过滤</li><li>Model-based CF ; 基于模型（参数学习）的协同过滤</li></ol></blockquote></li><li><blockquote><ul><li>基于用户的协同过滤<br>u2u2i</li><li>基于物品的协同过滤<br>u2i2i</li></ul><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309175315079"></p></blockquote></li></ul></blockquote></li></ul><h3 id="example">example</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224422.png" alt="image-20230309171614207"></p><hr><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309171709127"></p><h2 id="CF-Content-based-混合推荐系统">CF+Content-based ;  混合推荐系统</h2><h1>推荐系统一般问题</h1><h2 id="冷启动问题">冷启动问题</h2><h1>实战应用考虑方法</h1><h2 id="多路召回融合排序">多路召回融合排序</h2><blockquote><ul><li>一般会使 用多个召回策略，互相弥补不足，效果更好，三个臭皮匠顶个诸葛亮。</li><li>每个策略之间毫不相关，一般可以编写并发多线程同时执行</li><li>问题:怎样将多个召回列表融合成一个有序列表?</li></ul></blockquote><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224419.png" alt="image-20230309171938088"></p><blockquote><ul><li><blockquote><p>举例，几种召回策略返回的列表(Item-ID、权重)分别为:</p><p>召回策略x:A0.9，B0.8,C0.7<br>召回策略Y:B0.6，C0.5，D0.4<br>召回策略Z∶C0.3，D0.2，E0.1</p></blockquote></li><li><p>策略:效果依次变好，按照成本进行选择</p></li></ul><p>1、按顺序展示:比如实时&gt;购买数据召回&gt;播放数据召回，则直接展示A、B、C、D、E</p><p>2、平均法:分母为召回策略个数，分子为权重加和，C为(0.7+0.5+0.3)/3，B为(0.8+0.6)/3，</p><p>3、加权平均:比如三种策略自己指定权重为0…4、0.3、0.2，则B的权重为(0.4<em>0.8+0.6</em>0.3+O*0.2)/(0.4+0.3+0.2)</p><p>4、动态加权法:计算x/Y/z三种召回策略的CTR，作为每天更新的动态加权</p><p>5、机器学习权重法:逻辑回归LR分类模型预先离线算好各种召回的权重，然后做加权召回</p></blockquote><h2 id="推荐系统-AB-Test">推荐系统  AB Test</h2><ul><li><p>定义</p><blockquote><ol><li>AB测试是一种向产品的不同受众展示同一内容的2个或多个变体，并比较哪个变体带来了更多转化的做法。</li><li>AB测试是转化率优化过程的重要方法之一，使用它来收集定性和定量的用户见解，来了解潜在客户并根据该数据优化转化渠道。</li></ol></blockquote></li><li><p>必要性</p><blockquote><ol><li>想要数据驱动，重点是做AB对比实验，然后模型策略、设计等不断的迭代更新;</li><li>进行低风险的修改，先在小流量测试，如果没有问题再调大流量;</li><li>实现数据统计上的重大改进，降低人工猜测、直觉决策的不确定性;</li><li>怎样证明自己做的好?工程开发职位和算法职位的重大区分，后者更能用对比数据说话</li></ol></blockquote></li></ul><h3 id="AB-Test基本架构">AB Test基本架构</h3><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309174152009"></p><h3 id="ab测试中常见问题">ab测试中常见问题</h3><blockquote><ol><li>不要同时运行太多测试:<br>要确定测试的优先级，一起测试太多的元素很难确定哪个元素对测试的成功或失败影响最大。</li><li>实验的流量大小:<br>流量样本的数量过小，实验结论不能使人信服</li><li>测试持续时间不能太短:<br>运行测试时间过短会导致测试失败或产生不重要的结果</li><li>无法遵循迭代过程:<br>A/B测试是一个迭代过程，每个测试都基于先前测试的结果，不管当前成功或失败，都不要停止继续AB测试</li></ol></blockquote><h1>案例</h1><h2 id="1-Netflix经典推荐系统架构">1. Netflix经典推荐系统架构</h2><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224421.png" alt="image-20230309160440223"></p><p><img src="https://aliyun-photo-bucket.oss-cn-beijing.aliyuncs.com/img/202320230310224420.png" alt="image-20230309160850977"></p><h1>智能推荐系统未来展望</h1><h2 id="CCF-C³活动第十八期：智能推荐与搜索，2023年3月30日周四（18-00-21-30），小红书北京举行">CCF C³活动第十八期：智能推荐与搜索，2023年3月30日周四（18:00-21:30），小红书北京举行</h2><h3 id="newbing-，AIGC-大模型的冲击">newbing  ，AIGC,  大模型的冲击</h3><ol><li>对于网站盈利，网站存活的影响</li><li>对于广告商认定广告有效程度的认定</li><li>智能推荐可能的更大的发展<ul><li>利用该大模型对于用户，心智捕捉更强的能力；能够真正做到智能推荐，给用户真正有用的推荐</li></ul></li><li>生成式的大模型，需要关注使用场景<ul><li>比如，风控领域，需要的是fact</li><li>适配大模型结合个人信息，个性化</li></ul></li><li>存疑，未来推荐、搜索的形态</li><li>过去的搜索推荐，都是基于用户点击行为驱动的算法分发模式，走向用户<br>行为加内容理解，双轮并驱的内容分发模式</li><li>搜推一体化</li></ol><h3 id="在智能信息检索方面，如何发现并去除用户反馈中的偏差">在智能信息检索方面，如何发现并去除用户反馈中的偏差</h3><ol><li><p>因果分析</p><blockquote><ul><li>假设；因果图</li></ul></blockquote><blockquote><p>总体是基于一种假设，没有对系统进行干预</p><p>搜推一体化不一定</p><p>但是搜索数据可以帮推荐，推荐的数据可以帮搜索</p><ul><li>是否可以进行干预，自然干预的方法<ul><li>不付出太多的代价，把搜索的query当成对推荐的一种干预</li><li>利用微观经济学中的一个概念，工具变量</li></ul></li><li>稍微引入外部的知识进行干预，</li><li>是否干预，都是为了实现无偏估计</li></ul></blockquote></li></ol><h3 id="基于人类反馈的强化学习，LHF，对推荐有哪些启发">基于人类反馈的强化学习，LHF，对推荐有哪些启发</h3><p>郝建业老师</p><p>传统强化学习的优化目标多是点击，时长</p><ul><li><p>openai,   训练的三步，强化学习的面临的挑战</p><blockquote><p>ss</p></blockquote></li><li><p>如何进行强化学习梯度的训练</p></li><li><p>ctr预估，早已经利用了强化学习的思想《</p><blockquote><p>当前推荐，有偏</p><p>强化学习 很难落地推荐</p><p>用户心智应该是一个序列决策问题</p><p>推荐领域的用户大模型，数据打通</p><p>数据质量</p></blockquote></li></ul><h3 id="用户隐私，AIGC，-计算所，敖翔老师">用户隐私，AIGC，--计算所，敖翔老师</h3><p>菁蓉领域反欺诈领域</p><p>对抗性，其内的机理和范式是存在的</p><h3 id="小红书，为什么脱颖而出-–-小红书技术负责人，夏侯">小红书，为什么脱颖而出 – 小红书技术负责人，夏侯</h3><ul><li><p>UGC社区而不是PGC社区</p></li><li><p>希望是一个去中心化的流量分发机制</p></li><li><p>交互和消费之间是怎样的trade-off，又是怎样建模</p></li><li><p>小红书内容的多样性</p></li><li><p>可行的流量货币化的机制</p></li></ul><p>关于搜索</p><ul><li>当前的搜索非常  中长尾，优化难度大</li><li>传统的搜索流量集中在头部</li><li>chatgpt，</li><li>搜索，推荐互相finetuning</li></ul><h3 id=""></h3><h3 id="已有研究，把各类推荐任务统一到语言生成任务框架中，下一代推荐系统是否会形成大一统">已有研究，把各类推荐任务统一到语言生成任务框架中，下一代推荐系统是否会形成大一统</h3><p>大模型+插件，会不会形成新的OS，以后的app都变成插件</p><ul><li><p>传统的搜索、推荐，是使用大量的用户数据，区训练模型，使得模型能够反映用户在使用这两种工具所自然的表现，喜好等等</p></li><li><p>而GPT的训练方式，还是使用了语言的特点</p></li><li><p>GPT  应用到搜索推荐的话，对应于搜索、推荐的行为做对齐</p><blockquote><p>不同推荐场景的关联性有多大</p></blockquote></li></ul><h3 id="大语言模型的开发和训练，需要极大的资源和算力">大语言模型的开发和训练，需要极大的资源和算力</h3><h1>参考资料</h1><ol><li><a href="https://www.bilibili.com/video/BV1Dz411B7wd?p=4&amp;spm_id_from=pageDriver&amp;vd_source=079f268ceb076dc167768a4865b01eaa">https://www.bilibili.com/video/BV1Dz411B7wd?p=4&amp;spm_id_from=pageDriver&amp;vd_source=079f268ceb076dc167768a4865b01eaa</a></li><li><a href="https://www.bilibili.com/video/BV1BL411m7A7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa">https://www.bilibili.com/video/BV1BL411m7A7/?spm_id_from=333.337.search-card.all.click&amp;vd_source=079f268ceb076dc167768a4865b01eaa</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 推荐算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 推荐系统 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
